
updatedFOCFirm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800c188  0800c188  0000d188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7c8  0800c7c8  0000e0a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7c8  0800c7c8  0000d7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7d0  0800c7d0  0000e0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7d0  0800c7d0  0000d7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7d4  0800c7d4  0000d7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  0800c7d8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf4  200000a8  0800c880  0000e0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c9c  0800c880  0000ec9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db9a  00000000  00000000  0000e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003529  00000000  00000000  0002bc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  0002f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001433  00000000  00000000  00030b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021add  00000000  00000000  00031fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ceab  00000000  00000000  00053a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5773  00000000  00000000  00070933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001560a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007908  00000000  00000000  001560ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0015d9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a8 	.word	0x200000a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c170 	.word	0x0800c170

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ac 	.word	0x200000ac
 8000214:	0800c170 	.word	0x0800c170

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2uiz>:
 8000944:	004a      	lsls	r2, r1, #1
 8000946:	d211      	bcs.n	800096c <__aeabi_d2uiz+0x28>
 8000948:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800094c:	d211      	bcs.n	8000972 <__aeabi_d2uiz+0x2e>
 800094e:	d50d      	bpl.n	800096c <__aeabi_d2uiz+0x28>
 8000950:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000958:	d40e      	bmi.n	8000978 <__aeabi_d2uiz+0x34>
 800095a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000966:	fa23 f002 	lsr.w	r0, r3, r2
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000976:	d102      	bne.n	800097e <__aeabi_d2uiz+0x3a>
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	4770      	bx	lr
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	4770      	bx	lr

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b96a 	b.w	8000d10 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9d08      	ldr	r5, [sp, #32]
 8000a5a:	460c      	mov	r4, r1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d14e      	bne.n	8000afe <__udivmoddi4+0xaa>
 8000a60:	4694      	mov	ip, r2
 8000a62:	458c      	cmp	ip, r1
 8000a64:	4686      	mov	lr, r0
 8000a66:	fab2 f282 	clz	r2, r2
 8000a6a:	d962      	bls.n	8000b32 <__udivmoddi4+0xde>
 8000a6c:	b14a      	cbz	r2, 8000a82 <__udivmoddi4+0x2e>
 8000a6e:	f1c2 0320 	rsb	r3, r2, #32
 8000a72:	4091      	lsls	r1, r2
 8000a74:	fa20 f303 	lsr.w	r3, r0, r3
 8000a78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7c:	4319      	orrs	r1, r3
 8000a7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a86:	fa1f f68c 	uxth.w	r6, ip
 8000a8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a92:	fb07 1114 	mls	r1, r7, r4, r1
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb04 f106 	mul.w	r1, r4, r6
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x64>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aaa:	f080 8112 	bcs.w	8000cd2 <__udivmoddi4+0x27e>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 810f 	bls.w	8000cd2 <__udivmoddi4+0x27e>
 8000ab4:	3c02      	subs	r4, #2
 8000ab6:	4463      	add	r3, ip
 8000ab8:	1a59      	subs	r1, r3, r1
 8000aba:	fa1f f38e 	uxth.w	r3, lr
 8000abe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb00 f606 	mul.w	r6, r0, r6
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x94>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ada:	f080 80fc 	bcs.w	8000cd6 <__udivmoddi4+0x282>
 8000ade:	429e      	cmp	r6, r3
 8000ae0:	f240 80f9 	bls.w	8000cd6 <__udivmoddi4+0x282>
 8000ae4:	4463      	add	r3, ip
 8000ae6:	3802      	subs	r0, #2
 8000ae8:	1b9b      	subs	r3, r3, r6
 8000aea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aee:	2100      	movs	r1, #0
 8000af0:	b11d      	cbz	r5, 8000afa <__udivmoddi4+0xa6>
 8000af2:	40d3      	lsrs	r3, r2
 8000af4:	2200      	movs	r2, #0
 8000af6:	e9c5 3200 	strd	r3, r2, [r5]
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d905      	bls.n	8000b0e <__udivmoddi4+0xba>
 8000b02:	b10d      	cbz	r5, 8000b08 <__udivmoddi4+0xb4>
 8000b04:	e9c5 0100 	strd	r0, r1, [r5]
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	e7f5      	b.n	8000afa <__udivmoddi4+0xa6>
 8000b0e:	fab3 f183 	clz	r1, r3
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d146      	bne.n	8000ba4 <__udivmoddi4+0x150>
 8000b16:	42a3      	cmp	r3, r4
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xcc>
 8000b1a:	4290      	cmp	r0, r2
 8000b1c:	f0c0 80f0 	bcc.w	8000d00 <__udivmoddi4+0x2ac>
 8000b20:	1a86      	subs	r6, r0, r2
 8000b22:	eb64 0303 	sbc.w	r3, r4, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d0e6      	beq.n	8000afa <__udivmoddi4+0xa6>
 8000b2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b30:	e7e3      	b.n	8000afa <__udivmoddi4+0xa6>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	f040 8090 	bne.w	8000c58 <__udivmoddi4+0x204>
 8000b38:	eba1 040c 	sub.w	r4, r1, ip
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	fa1f f78c 	uxth.w	r7, ip
 8000b44:	2101      	movs	r1, #1
 8000b46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b56:	fb07 f006 	mul.w	r0, r7, r6
 8000b5a:	4298      	cmp	r0, r3
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x11c>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x11a>
 8000b68:	4298      	cmp	r0, r3
 8000b6a:	f200 80cd 	bhi.w	8000d08 <__udivmoddi4+0x2b4>
 8000b6e:	4626      	mov	r6, r4
 8000b70:	1a1c      	subs	r4, r3, r0
 8000b72:	fa1f f38e 	uxth.w	r3, lr
 8000b76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b82:	fb00 f707 	mul.w	r7, r0, r7
 8000b86:	429f      	cmp	r7, r3
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x148>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b92:	d202      	bcs.n	8000b9a <__udivmoddi4+0x146>
 8000b94:	429f      	cmp	r7, r3
 8000b96:	f200 80b0 	bhi.w	8000cfa <__udivmoddi4+0x2a6>
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	1bdb      	subs	r3, r3, r7
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	e7a5      	b.n	8000af0 <__udivmoddi4+0x9c>
 8000ba4:	f1c1 0620 	rsb	r6, r1, #32
 8000ba8:	408b      	lsls	r3, r1
 8000baa:	fa22 f706 	lsr.w	r7, r2, r6
 8000bae:	431f      	orrs	r7, r3
 8000bb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bb8:	ea43 030c 	orr.w	r3, r3, ip
 8000bbc:	40f4      	lsrs	r4, r6
 8000bbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000bc2:	0c38      	lsrs	r0, r7, #16
 8000bc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bcc:	fa1f fc87 	uxth.w	ip, r7
 8000bd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bdc:	45a1      	cmp	r9, r4
 8000bde:	fa02 f201 	lsl.w	r2, r2, r1
 8000be2:	d90a      	bls.n	8000bfa <__udivmoddi4+0x1a6>
 8000be4:	193c      	adds	r4, r7, r4
 8000be6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bea:	f080 8084 	bcs.w	8000cf6 <__udivmoddi4+0x2a2>
 8000bee:	45a1      	cmp	r9, r4
 8000bf0:	f240 8081 	bls.w	8000cf6 <__udivmoddi4+0x2a2>
 8000bf4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bf8:	443c      	add	r4, r7
 8000bfa:	eba4 0409 	sub.w	r4, r4, r9
 8000bfe:	fa1f f983 	uxth.w	r9, r3
 8000c02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c06:	fb00 4413 	mls	r4, r0, r3, r4
 8000c0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c12:	45a4      	cmp	ip, r4
 8000c14:	d907      	bls.n	8000c26 <__udivmoddi4+0x1d2>
 8000c16:	193c      	adds	r4, r7, r4
 8000c18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c1c:	d267      	bcs.n	8000cee <__udivmoddi4+0x29a>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0x29a>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	443c      	add	r4, r7
 8000c26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c2e:	eba4 040c 	sub.w	r4, r4, ip
 8000c32:	429c      	cmp	r4, r3
 8000c34:	46ce      	mov	lr, r9
 8000c36:	469c      	mov	ip, r3
 8000c38:	d351      	bcc.n	8000cde <__udivmoddi4+0x28a>
 8000c3a:	d04e      	beq.n	8000cda <__udivmoddi4+0x286>
 8000c3c:	b155      	cbz	r5, 8000c54 <__udivmoddi4+0x200>
 8000c3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c42:	eb64 040c 	sbc.w	r4, r4, ip
 8000c46:	fa04 f606 	lsl.w	r6, r4, r6
 8000c4a:	40cb      	lsrs	r3, r1
 8000c4c:	431e      	orrs	r6, r3
 8000c4e:	40cc      	lsrs	r4, r1
 8000c50:	e9c5 6400 	strd	r6, r4, [r5]
 8000c54:	2100      	movs	r1, #0
 8000c56:	e750      	b.n	8000afa <__udivmoddi4+0xa6>
 8000c58:	f1c2 0320 	rsb	r3, r2, #32
 8000c5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	fa24 f303 	lsr.w	r3, r4, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	430c      	orrs	r4, r1
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c80:	0c23      	lsrs	r3, r4, #16
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb00 f107 	mul.w	r1, r0, r7
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x24c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c96:	d22c      	bcs.n	8000cf2 <__udivmoddi4+0x29e>
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d92a      	bls.n	8000cf2 <__udivmoddi4+0x29e>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ca8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb01 f307 	mul.w	r3, r1, r7
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x276>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cc0:	d213      	bcs.n	8000cea <__udivmoddi4+0x296>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d911      	bls.n	8000cea <__udivmoddi4+0x296>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4464      	add	r4, ip
 8000cca:	1ae4      	subs	r4, r4, r3
 8000ccc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cd0:	e739      	b.n	8000b46 <__udivmoddi4+0xf2>
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	e6f0      	b.n	8000ab8 <__udivmoddi4+0x64>
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e706      	b.n	8000ae8 <__udivmoddi4+0x94>
 8000cda:	45c8      	cmp	r8, r9
 8000cdc:	d2ae      	bcs.n	8000c3c <__udivmoddi4+0x1e8>
 8000cde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ce2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ce6:	3801      	subs	r0, #1
 8000ce8:	e7a8      	b.n	8000c3c <__udivmoddi4+0x1e8>
 8000cea:	4631      	mov	r1, r6
 8000cec:	e7ed      	b.n	8000cca <__udivmoddi4+0x276>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e799      	b.n	8000c26 <__udivmoddi4+0x1d2>
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	e7d4      	b.n	8000ca0 <__udivmoddi4+0x24c>
 8000cf6:	46d6      	mov	lr, sl
 8000cf8:	e77f      	b.n	8000bfa <__udivmoddi4+0x1a6>
 8000cfa:	4463      	add	r3, ip
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	e74d      	b.n	8000b9c <__udivmoddi4+0x148>
 8000d00:	4606      	mov	r6, r0
 8000d02:	4623      	mov	r3, r4
 8000d04:	4608      	mov	r0, r1
 8000d06:	e70f      	b.n	8000b28 <__udivmoddi4+0xd4>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	e730      	b.n	8000b70 <__udivmoddi4+0x11c>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <_DoInit+0xa0>)
 8000d1c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000d1e:	22a8      	movs	r2, #168	@ 0xa8
 8000d20:	2100      	movs	r1, #0
 8000d22:	6838      	ldr	r0, [r7, #0]
 8000d24:	f009 fa00 	bl	800a128 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2203      	movs	r2, #3
 8000d32:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	4a20      	ldr	r2, [pc, #128]	@ (8000db8 <_DoInit+0xa4>)
 8000d38:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dbc <_DoInit+0xa8>)
 8000d3e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d46:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4a16      	ldr	r2, [pc, #88]	@ (8000db8 <_DoInit+0xa4>)
 8000d5e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <_DoInit+0xac>)
 8000d64:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2210      	movs	r2, #16
 8000d6a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000d7e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	e00c      	b.n	8000da2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f1c3 030f 	rsb	r3, r3, #15
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <_DoInit+0xb0>)
 8000d90:	5cd1      	ldrb	r1, [r2, r3]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	460a      	mov	r2, r1
 8000d9a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d9ef      	bls.n	8000d88 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000da8:	f3bf 8f5f 	dmb	sy
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200000c4 	.word	0x200000c4
 8000db8:	0800c188 	.word	0x0800c188
 8000dbc:	2000016c 	.word	0x2000016c
 8000dc0:	2000056c 	.word	0x2000056c
 8000dc4:	0800c194 	.word	0x0800c194

08000dc8 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  _DoInit();
 8000dcc:	f7ff ffa2 	bl	8000d14 <_DoInit>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_EXTI_Callback>:
void readAccel(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
	int timeSteps;
	timeSteps = __HAL_TIM_GET_COUNTER(&htim17);
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de4:	60fb      	str	r3, [r7, #12]
	float refClock = TIMCLOCK/(PRESCALAR);
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <HAL_GPIO_EXTI_Callback+0x60>)
 8000de8:	60bb      	str	r3, [r7, #8]
	motor.speed = (60.0f)/((float)timeSteps/refClock);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000dfc:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000e38 <HAL_GPIO_EXTI_Callback+0x64>
 8000e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e06:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
	motor.hallCount = timeSteps;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e16:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
	readHalls(&motor);
 8000e1a:	4808      	ldr	r0, [pc, #32]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e1c:	f001 f88e 	bl	8001f3c <readHalls>
	htim17.Instance->CNT = 0;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000930 	.word	0x20000930
 8000e34:	49742400 	.word	0x49742400
 8000e38:	42700000 	.word	0x42700000
 8000e3c:	20000a10 	.word	0x20000a10

08000e40 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if(htim == &htim17){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d119      	bne.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x44>
		motor.speed = 0;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		motor.avg_speed = 0;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		motor.hallspeed = 0;
 8000e64:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
		htim17.Instance->CNT = 0;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24
		motor.prescaler++;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e80:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
	}
	if(htim == &htim16){
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d103      	bne.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0x54>

		//MOTOR_FOCtask(&motor);
		//MOTOR_task(&motor);
		htim->Instance->CNT = 0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	if(htim == &htim7){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d107      	bne.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x6c>
		motor.torqueLevel = 15.0f;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

		htim->Instance->CNT = 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	20000930 	.word	0x20000930
 8000ebc:	20000a10 	.word	0x20000a10
 8000ec0:	200008e4 	.word	0x200008e4
 8000ec4:	20000898 	.word	0x20000898

08000ec8 <accWrite>:
        }

        output[i] = y0;
    }
}
void accWrite(uint8_t add, uint8_t *data){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
	//read
	uint8_t buff;
	//write
	buff = add & 0b01111111;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 0); // setting CS LOW
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <accWrite+0x58>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f20 <accWrite+0x58>)
 8000ee4:	8891      	ldrh	r1, [r2, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 fffd 	bl	8005ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &buff, 1, 100);
 8000eee:	f107 010f 	add.w	r1, r7, #15
 8000ef2:	2364      	movs	r3, #100	@ 0x64
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <accWrite+0x5c>)
 8000ef8:	f006 f8a3 	bl	8007042 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, 1, 100);
 8000efc:	2364      	movs	r3, #100	@ 0x64
 8000efe:	2201      	movs	r2, #1
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	4808      	ldr	r0, [pc, #32]	@ (8000f24 <accWrite+0x5c>)
 8000f04:	f006 f89d 	bl	8007042 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 1);// setting CS HIGH
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <accWrite+0x58>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <accWrite+0x58>)
 8000f0e:	8891      	ldrh	r1, [r2, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f004 ffe8 	bl	8005ee8 <HAL_GPIO_WritePin>
	return;
 8000f18:	bf00      	nop
}
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000018 	.word	0x20000018
 8000f24:	20000738 	.word	0x20000738

08000f28 <accRead>:
void accRead(uint8_t add, uint8_t* data){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
	uint8_t buff;
	buff = add | 0x80;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 0); // setting CS LOW
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <accRead+0x58>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <accRead+0x58>)
 8000f44:	8891      	ldrh	r1, [r2, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 ffcd 	bl	8005ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &buff, 1, 100);
 8000f4e:	f107 010f 	add.w	r1, r7, #15
 8000f52:	2364      	movs	r3, #100	@ 0x64
 8000f54:	2201      	movs	r2, #1
 8000f56:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <accRead+0x5c>)
 8000f58:	f006 f873 	bl	8007042 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, 1, 100);
 8000f5c:	2364      	movs	r3, #100	@ 0x64
 8000f5e:	2201      	movs	r2, #1
 8000f60:	6839      	ldr	r1, [r7, #0]
 8000f62:	4808      	ldr	r0, [pc, #32]	@ (8000f84 <accRead+0x5c>)
 8000f64:	f006 f9e2 	bl	800732c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 1);// setting CS HIGH
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <accRead+0x58>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <accRead+0x58>)
 8000f6e:	8891      	ldrh	r1, [r2, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 ffb8 	bl	8005ee8 <HAL_GPIO_WritePin>
	return;
 8000f78:	bf00      	nop
}
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000018 	.word	0x20000018
 8000f84:	20000738 	.word	0x20000738

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	ed2d 8b02 	vpush	{d8}
 8000f8e:	f5ad 7d6a 	sub.w	sp, sp, #936	@ 0x3a8
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f002 fcf3 	bl	800397e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 fac8 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 ff18 	bl	8001dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa0:	f000 fee4 	bl	8001d6c <MX_DMA_Init>
  MX_ADC1_Init();
 8000fa4:	f000 fb0e 	bl	80015c4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000fa8:	f000 fc52 	bl	8001850 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000fac:	f000 fccc 	bl	8001948 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fb0:	f000 fd9e 	bl	8001af0 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000fb4:	f000 fe68 	bl	8001c88 <MX_TIM17_Init>
  MX_TIM16_Init();
 8000fb8:	f000 fe40 	bl	8001c3c <MX_TIM16_Init>
  MX_TIM7_Init();
 8000fbc:	f000 fe08 	bl	8001bd0 <MX_TIM7_Init>
  MX_ADC2_Init();
 8000fc0:	f000 fba6 	bl	8001710 <MX_ADC2_Init>
  MX_COMP2_Init();
 8000fc4:	f000 fc1c 	bl	8001800 <MX_COMP2_Init>
  MX_SPI3_Init();
 8000fc8:	f000 fc80 	bl	80018cc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000fcc:	f000 fe82 	bl	8001cd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  acc.IO.BusType = 4;
 8000fd0:	4b89      	ldr	r3, [pc, #548]	@ (80011f8 <main+0x270>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	609a      	str	r2, [r3, #8]
  acc.IO.Address = address;
 8000fd6:	4b89      	ldr	r3, [pc, #548]	@ (80011fc <main+0x274>)
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	4b87      	ldr	r3, [pc, #540]	@ (80011f8 <main+0x270>)
 8000fdc:	731a      	strb	r2, [r3, #12]
  acc.IO.WriteReg = &accWrite;
 8000fde:	4b86      	ldr	r3, [pc, #536]	@ (80011f8 <main+0x270>)
 8000fe0:	4a87      	ldr	r2, [pc, #540]	@ (8001200 <main+0x278>)
 8000fe2:	611a      	str	r2, [r3, #16]
  acc.IO.ReadReg = &accRead;
 8000fe4:	4b84      	ldr	r3, [pc, #528]	@ (80011f8 <main+0x270>)
 8000fe6:	4a87      	ldr	r2, [pc, #540]	@ (8001204 <main+0x27c>)
 8000fe8:	615a      	str	r2, [r3, #20]

  // set up motor struct
  motor.pwm = &htim1;
 8000fea:	4b87      	ldr	r3, [pc, #540]	@ (8001208 <main+0x280>)
 8000fec:	4a87      	ldr	r2, [pc, #540]	@ (800120c <main+0x284>)
 8000fee:	601a      	str	r2, [r3, #0]
  motor.adc = &hadc1;
 8000ff0:	4b85      	ldr	r3, [pc, #532]	@ (8001208 <main+0x280>)
 8000ff2:	4a87      	ldr	r2, [pc, #540]	@ (8001210 <main+0x288>)
 8000ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
  motor.encoder = &hspi1;
 8000ff6:	4b84      	ldr	r3, [pc, #528]	@ (8001208 <main+0x280>)
 8000ff8:	4a86      	ldr	r2, [pc, #536]	@ (8001214 <main+0x28c>)
 8000ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
  // Enable pins
  motor.torqueLevel = 50.0f;
 8000ffc:	4b82      	ldr	r3, [pc, #520]	@ (8001208 <main+0x280>)
 8000ffe:	2232      	movs	r2, #50	@ 0x32
 8001000:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  motor.enablePins[0] = ena;
 8001004:	4b80      	ldr	r3, [pc, #512]	@ (8001208 <main+0x280>)
 8001006:	4a84      	ldr	r2, [pc, #528]	@ (8001218 <main+0x290>)
 8001008:	331c      	adds	r3, #28
 800100a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100e:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.enablePins[1] = enb;
 8001012:	4b7d      	ldr	r3, [pc, #500]	@ (8001208 <main+0x280>)
 8001014:	4a81      	ldr	r2, [pc, #516]	@ (800121c <main+0x294>)
 8001016:	3324      	adds	r3, #36	@ 0x24
 8001018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101c:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.enablePins[2] = enc;
 8001020:	4b79      	ldr	r3, [pc, #484]	@ (8001208 <main+0x280>)
 8001022:	4a7f      	ldr	r2, [pc, #508]	@ (8001220 <main+0x298>)
 8001024:	332c      	adds	r3, #44	@ 0x2c
 8001026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102a:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.motorSleep = motor_Sleep;
 800102e:	4b76      	ldr	r3, [pc, #472]	@ (8001208 <main+0x280>)
 8001030:	4a7c      	ldr	r2, [pc, #496]	@ (8001224 <main+0x29c>)
 8001032:	3334      	adds	r3, #52	@ 0x34
 8001034:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001038:	e883 0003 	stmia.w	r3, {r0, r1}

  motor.hallPins[0] = Hall_1;
 800103c:	4b72      	ldr	r3, [pc, #456]	@ (8001208 <main+0x280>)
 800103e:	4a7a      	ldr	r2, [pc, #488]	@ (8001228 <main+0x2a0>)
 8001040:	3304      	adds	r3, #4
 8001042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001046:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.hallPins[1] = Hall_2;
 800104a:	4b6f      	ldr	r3, [pc, #444]	@ (8001208 <main+0x280>)
 800104c:	4a77      	ldr	r2, [pc, #476]	@ (800122c <main+0x2a4>)
 800104e:	330c      	adds	r3, #12
 8001050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001054:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.hallPins[2] = Hall_3;
 8001058:	4b6b      	ldr	r3, [pc, #428]	@ (8001208 <main+0x280>)
 800105a:	4a75      	ldr	r2, [pc, #468]	@ (8001230 <main+0x2a8>)
 800105c:	3314      	adds	r3, #20
 800105e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001062:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.dutyCycle = 0.2;
 8001066:	4b68      	ldr	r3, [pc, #416]	@ (8001208 <main+0x280>)
 8001068:	4a72      	ldr	r2, [pc, #456]	@ (8001234 <main+0x2ac>)
 800106a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  motor.speedTim = &htim17;
 800106e:	4b66      	ldr	r3, [pc, #408]	@ (8001208 <main+0x280>)
 8001070:	4a71      	ldr	r2, [pc, #452]	@ (8001238 <main+0x2b0>)
 8001072:	655a      	str	r2, [r3, #84]	@ 0x54
  motor.dir = 0;        // make go forward
 8001074:	4b64      	ldr	r3, [pc, #400]	@ (8001208 <main+0x280>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103

  uint8_t dataBuffer;
  uint8_t changeState;

  //accelerometer Control Reg
  accRead(0x10, &dataBuffer);
 800107c:	f207 333f 	addw	r3, r7, #831	@ 0x33f
 8001080:	4619      	mov	r1, r3
 8001082:	2010      	movs	r0, #16
 8001084:	f7ff ff50 	bl	8000f28 <accRead>

  changeState = dataBuffer | 0b10100000;
 8001088:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 800108c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f887 333e 	strb.w	r3, [r7, #830]	@ 0x33e
  accWrite(0x10, &changeState);
 8001096:	f207 333e 	addw	r3, r7, #830	@ 0x33e
 800109a:	4619      	mov	r1, r3
 800109c:	2010      	movs	r0, #16
 800109e:	f7ff ff13 	bl	8000ec8 <accWrite>

  //GyroControl Reg
  accRead(0x11, &dataBuffer);
 80010a2:	f207 333f 	addw	r3, r7, #831	@ 0x33f
 80010a6:	4619      	mov	r1, r3
 80010a8:	2011      	movs	r0, #17
 80010aa:	f7ff ff3d 	bl	8000f28 <accRead>

  changeState = dataBuffer | 0b10100000;
 80010ae:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 80010b2:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f887 333e 	strb.w	r3, [r7, #830]	@ 0x33e
  accWrite(0x11, &changeState);
 80010bc:	f207 333e 	addw	r3, r7, #830	@ 0x33e
 80010c0:	4619      	mov	r1, r3
 80010c2:	2011      	movs	r0, #17
 80010c4:	f7ff ff00 	bl	8000ec8 <accWrite>

  //
  accRead(0x13, &dataBuffer);
 80010c8:	f207 333f 	addw	r3, r7, #831	@ 0x33f
 80010cc:	4619      	mov	r1, r3
 80010ce:	2013      	movs	r0, #19
 80010d0:	f7ff ff2a 	bl	8000f28 <accRead>

  changeState = dataBuffer | 0b10101100;
 80010d4:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 80010d8:	f063 0353 	orn	r3, r3, #83	@ 0x53
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f887 333e 	strb.w	r3, [r7, #830]	@ 0x33e
  accWrite(0x13, &changeState);
 80010e2:	f207 333e 	addw	r3, r7, #830	@ 0x33e
 80010e6:	4619      	mov	r1, r3
 80010e8:	2013      	movs	r0, #19
 80010ea:	f7ff feed 	bl	8000ec8 <accWrite>

  MOTOR_init(&motor);
 80010ee:	4846      	ldr	r0, [pc, #280]	@ (8001208 <main+0x280>)
 80010f0:	f001 f81a 	bl	8002128 <MOTOR_init>
  int order = 4; // 2nd order Butterworth filter
 80010f4:	2304      	movs	r3, #4
 80010f6:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  float cutoff_frequency = 5.0f; // Desired cutoff frequency in Hz
 80010fa:	4b50      	ldr	r3, [pc, #320]	@ (800123c <main+0x2b4>)
 80010fc:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
  float sampling_rate = 500.0f; // Sampling rate in Hz
 8001100:	4b4f      	ldr	r3, [pc, #316]	@ (8001240 <main+0x2b8>)
 8001102:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  int length = 100; // Length of the data array
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  // Example input data (replace with your actual ADC data)
  float adcData[100];
  float filteredData[100];
  float a[3], b[3];

  toggleState = 0;
 800110c:	4b4d      	ldr	r3, [pc, #308]	@ (8001244 <main+0x2bc>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
  double kp = 0.00000000215f;
 8001112:	a333      	add	r3, pc, #204	@ (adr r3, 80011e0 <main+0x258>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	e9c7 23de 	strd	r2, r3, [r7, #888]	@ 0x378
  double kd = 0.00000000205f;
 800111c:	a332      	add	r3, pc, #200	@ (adr r3, 80011e8 <main+0x260>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	e9c7 23dc 	strd	r2, r3, [r7, #880]	@ 0x370
  double ki = 0.000000000288f;
 8001126:	a332      	add	r3, pc, #200	@ (adr r3, 80011f0 <main+0x268>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c7 23da 	strd	r2, r3, [r7, #872]	@ 0x368
  double lastDuty = 0;
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9c7 23d8 	strd	r2, r3, [r7, #864]	@ 0x360
  double lastSpeedErr = 0;
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
  double speedErr = 0;
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
  double totalErr = 0;
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
  int samples = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  int count = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
  float pitchAngle;
  float yawAngle;
  char * adcString;

  float datatest;
  SEGGER_RTT_Init();
 800116c:	f7ff fe2c 	bl	8000dc8 <SEGGER_RTT_Init>
  HAL_COMP_Start(&hcomp2);
 8001170:	4835      	ldr	r0, [pc, #212]	@ (8001248 <main+0x2c0>)
 8001172:	f004 f955 	bl	8005420 <HAL_COMP_Start>

  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_2);
 8001176:	2104      	movs	r1, #4
 8001178:	4834      	ldr	r0, [pc, #208]	@ (800124c <main+0x2c4>)
 800117a:	f006 ff69 	bl	8008050 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_3);
 800117e:	2108      	movs	r1, #8
 8001180:	4832      	ldr	r0, [pc, #200]	@ (800124c <main+0x2c4>)
 8001182:	f006 ff65 	bl	8008050 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,  TIM_CHANNEL_4);
 8001186:	210c      	movs	r1, #12
 8001188:	4830      	ldr	r0, [pc, #192]	@ (800124c <main+0x2c4>)
 800118a:	f006 ff61 	bl	8008050 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 800118e:	4b2f      	ldr	r3, [pc, #188]	@ (800124c <main+0x2c4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	639a      	str	r2, [r3, #56]	@ 0x38
  htim2.Instance->CCR3 = 0;
 8001196:	4b2d      	ldr	r3, [pc, #180]	@ (800124c <main+0x2c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim2.Instance->CCR4 = 0;
 800119e:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <main+0x2c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	641a      	str	r2, [r3, #64]	@ 0x40




  HAL_TIM_Base_Start_IT(&htim17);
 80011a6:	4824      	ldr	r0, [pc, #144]	@ (8001238 <main+0x2b0>)
 80011a8:	f006 fe90 	bl	8007ecc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim17);
 80011ac:	4822      	ldr	r0, [pc, #136]	@ (8001238 <main+0x2b0>)
 80011ae:	f006 fe2b 	bl	8007e08 <HAL_TIM_Base_Start>

  //start adc for motor
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80011b2:	217f      	movs	r1, #127	@ 0x7f
 80011b4:	4816      	ldr	r0, [pc, #88]	@ (8001210 <main+0x288>)
 80011b6:	f003 fea9 	bl	8004f0c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) motor.adcData, 3);
 80011ba:	2203      	movs	r2, #3
 80011bc:	4924      	ldr	r1, [pc, #144]	@ (8001250 <main+0x2c8>)
 80011be:	4814      	ldr	r0, [pc, #80]	@ (8001210 <main+0x288>)
 80011c0:	f003 f816 	bl	80041f0 <HAL_ADC_Start_DMA>

  // start adc for joystick
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80011c4:	217f      	movs	r1, #127	@ 0x7f
 80011c6:	4823      	ldr	r0, [pc, #140]	@ (8001254 <main+0x2cc>)
 80011c8:	f003 fea0 	bl	8004f0c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) motor.joystickData, 2);
 80011cc:	2202      	movs	r2, #2
 80011ce:	4922      	ldr	r1, [pc, #136]	@ (8001258 <main+0x2d0>)
 80011d0:	4820      	ldr	r0, [pc, #128]	@ (8001254 <main+0x2cc>)
 80011d2:	f003 f80d 	bl	80041f0 <HAL_ADC_Start_DMA>

  // setting motor 1
  int x = 0 ;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
  float offsetU;
  float offsetV;
  float offsetW;

  while (x < 1000){
 80011dc:	e06a      	b.n	80012b4 <main+0x32c>
 80011de:	bf00      	nop
 80011e0:	60000000 	.word	0x60000000
 80011e4:	3e2277e6 	.word	0x3e2277e6
 80011e8:	60000000 	.word	0x60000000
 80011ec:	3e219bff 	.word	0x3e219bff
 80011f0:	c0000000 	.word	0xc0000000
 80011f4:	3df3ca8c 	.word	0x3df3ca8c
 80011f8:	20000b18 	.word	0x20000b18
 80011fc:	20000040 	.word	0x20000040
 8001200:	08000ec9 	.word	0x08000ec9
 8001204:	08000f29 	.word	0x08000f29
 8001208:	20000a10 	.word	0x20000a10
 800120c:	20000800 	.word	0x20000800
 8001210:	2000057c 	.word	0x2000057c
 8001214:	20000738 	.word	0x20000738
 8001218:	20000020 	.word	0x20000020
 800121c:	20000028 	.word	0x20000028
 8001220:	20000030 	.word	0x20000030
 8001224:	20000038 	.word	0x20000038
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000010 	.word	0x20000010
 8001234:	3e4ccccd 	.word	0x3e4ccccd
 8001238:	20000930 	.word	0x20000930
 800123c:	40a00000 	.word	0x40a00000
 8001240:	43fa0000 	.word	0x43fa0000
 8001244:	20000b14 	.word	0x20000b14
 8001248:	20000714 	.word	0x20000714
 800124c:	2000084c 	.word	0x2000084c
 8001250:	20000a50 	.word	0x20000a50
 8001254:	200005e8 	.word	0x200005e8
 8001258:	20000a56 	.word	0x20000a56
	  offsetU += (float)motor.adcData[0];
 800125c:	4bae      	ldr	r3, [pc, #696]	@ (8001518 <main+0x590>)
 800125e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800126a:	ed97 7ae8 	vldr	s14, [r7, #928]	@ 0x3a0
 800126e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001272:	edc7 7ae8 	vstr	s15, [r7, #928]	@ 0x3a0
  	  offsetV += (float)motor.adcData[1];
 8001276:	4ba8      	ldr	r3, [pc, #672]	@ (8001518 <main+0x590>)
 8001278:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001284:	ed97 7ae7 	vldr	s14, [r7, #924]	@ 0x39c
 8001288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128c:	edc7 7ae7 	vstr	s15, [r7, #924]	@ 0x39c
  	  offsetW += (float)motor.adcData[2];
 8001290:	4ba1      	ldr	r3, [pc, #644]	@ (8001518 <main+0x590>)
 8001292:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129e:	ed97 7ae6 	vldr	s14, [r7, #920]	@ 0x398
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	edc7 7ae6 	vstr	s15, [r7, #920]	@ 0x398
  	  x++;
 80012aa:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80012ae:	3301      	adds	r3, #1
 80012b0:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
  while (x < 1000){
 80012b4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80012b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012bc:	dbce      	blt.n	800125c <main+0x2d4>
  	  }
  motor.posMode = false;
 80012be:	4b96      	ldr	r3, [pc, #600]	@ (8001518 <main+0x590>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  motor.prescaler = 150;
 80012c6:	4b94      	ldr	r3, [pc, #592]	@ (8001518 <main+0x590>)
 80012c8:	2296      	movs	r2, #150	@ 0x96
 80012ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  motor.offset[0] = round(offsetU/1000.0f);
 80012ce:	edd7 7ae8 	vldr	s15, [r7, #928]	@ 0x3a0
 80012d2:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 800151c <main+0x594>
 80012d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012da:	ee16 0a90 	vmov	r0, s13
 80012de:	f7ff fa29 	bl	8000734 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	ec43 2b10 	vmov	d0, r2, r3
 80012ea:	f009 f8b7 	bl	800a45c <round>
 80012ee:	ec53 2b10 	vmov	r2, r3, d0
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fb45 	bl	8000984 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a86      	ldr	r2, [pc, #536]	@ (8001518 <main+0x590>)
 80012fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  motor.offset[1] = round(offsetV/1000.0f);
 8001302:	edd7 7ae7 	vldr	s15, [r7, #924]	@ 0x39c
 8001306:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800151c <main+0x594>
 800130a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800130e:	ee16 0a90 	vmov	r0, s13
 8001312:	f7ff fa0f 	bl	8000734 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	ec43 2b10 	vmov	d0, r2, r3
 800131e:	f009 f89d 	bl	800a45c <round>
 8001322:	ec53 2b10 	vmov	r2, r3, d0
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fb2b 	bl	8000984 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	4a79      	ldr	r2, [pc, #484]	@ (8001518 <main+0x590>)
 8001332:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  motor.offset[2] = round(offsetW/1000.0f);
 8001336:	edd7 7ae6 	vldr	s15, [r7, #920]	@ 0x398
 800133a:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800151c <main+0x594>
 800133e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001342:	ee16 0a90 	vmov	r0, s13
 8001346:	f7ff f9f5 	bl	8000734 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b10 	vmov	d0, r2, r3
 8001352:	f009 f883 	bl	800a45c <round>
 8001356:	ec53 2b10 	vmov	r2, r3, d0
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fb11 	bl	8000984 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a6c      	ldr	r2, [pc, #432]	@ (8001518 <main+0x590>)
 8001366:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  motor.torqueLevel = 12;
 800136a:	4b6b      	ldr	r3, [pc, #428]	@ (8001518 <main+0x590>)
 800136c:	220c      	movs	r2, #12
 800136e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  int ledTime = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  htim2.Instance->CCR2 = 500.0f;
 8001378:	4b69      	ldr	r3, [pc, #420]	@ (8001520 <main+0x598>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001380:	639a      	str	r2, [r3, #56]	@ 0x38
	  htim2.Instance->CCR3 = 500.0f;
 8001382:	4b67      	ldr	r3, [pc, #412]	@ (8001520 <main+0x598>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800138a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  htim2.Instance->CCR4 = 0;
 800138c:	4b64      	ldr	r3, [pc, #400]	@ (8001520 <main+0x598>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	641a      	str	r2, [r3, #64]	@ 0x40
	  ledTime+=0.00001;
 8001394:	f8d7 0394 	ldr.w	r0, [r7, #916]	@ 0x394
 8001398:	f7ff f9ba 	bl	8000710 <__aeabi_i2d>
 800139c:	a35c      	add	r3, pc, #368	@ (adr r3, 8001510 <main+0x588>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f869 	bl	8000478 <__adddf3>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff faa1 	bl	80008f4 <__aeabi_d2iz>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394

	  if(motor.joystickData[0] > 2500){
 80013b8:	4b57      	ldr	r3, [pc, #348]	@ (8001518 <main+0x590>)
 80013ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80013be:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d90b      	bls.n	80013de <main+0x456>
		  motor.dir = 1;
 80013c6:	4b54      	ldr	r3, [pc, #336]	@ (8001518 <main+0x590>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
		  motor.posMode = false;
 80013ce:	4b52      	ldr	r3, [pc, #328]	@ (8001518 <main+0x590>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
		  motor.goalSpeed = 100.0f;
 80013d6:	4b50      	ldr	r3, [pc, #320]	@ (8001518 <main+0x590>)
 80013d8:	4a52      	ldr	r2, [pc, #328]	@ (8001524 <main+0x59c>)
 80013da:	659a      	str	r2, [r3, #88]	@ 0x58
 80013dc:	e019      	b.n	8001412 <main+0x48a>
	  }
	  else if (motor.joystickData[0] < 2000){
 80013de:	4b4e      	ldr	r3, [pc, #312]	@ (8001518 <main+0x590>)
 80013e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80013e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013e8:	d20b      	bcs.n	8001402 <main+0x47a>
		  motor.posMode = false;
 80013ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001518 <main+0x590>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
		  motor.dir = 0;
 80013f2:	4b49      	ldr	r3, [pc, #292]	@ (8001518 <main+0x590>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
		  motor.goalSpeed = 100.0f;
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <main+0x590>)
 80013fc:	4a49      	ldr	r2, [pc, #292]	@ (8001524 <main+0x59c>)
 80013fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001400:	e007      	b.n	8001412 <main+0x48a>
	  }
	  else{
		  motor.goalSpeed = 0.0f;
 8001402:	4b45      	ldr	r3, [pc, #276]	@ (8001518 <main+0x590>)
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	659a      	str	r2, [r3, #88]	@ 0x58
		  motor.posMode = true;
 800140a:	4b43      	ldr	r3, [pc, #268]	@ (8001518 <main+0x590>)
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	  }

	  get_Current(&motor);
 8001412:	4841      	ldr	r0, [pc, #260]	@ (8001518 <main+0x590>)
 8001414:	f000 ff2c 	bl	8002270 <get_Current>
	  motor.hallCount = htim17.Instance->CNT;
 8001418:	4b43      	ldr	r3, [pc, #268]	@ (8001528 <main+0x5a0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <main+0x590>)
 8001428:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4

	  readHalls(&motor);
 800142c:	483a      	ldr	r0, [pc, #232]	@ (8001518 <main+0x590>)
 800142e:	f000 fd85 	bl	8001f3c <readHalls>
	  MOTOR_FOCtask(&motor);
 8001432:	4839      	ldr	r0, [pc, #228]	@ (8001518 <main+0x590>)
 8001434:	f000 ffaa 	bl	800238c <MOTOR_FOCtask>
	  speedErr = (float)(motor.goalSpeed - motor.avg_speed);
 8001438:	4b37      	ldr	r3, [pc, #220]	@ (8001518 <main+0x590>)
 800143a:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800143e:	4b36      	ldr	r3, [pc, #216]	@ (8001518 <main+0x590>)
 8001440:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8001444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001448:	ee17 0a90 	vmov	r0, s15
 800144c:	f7ff f972 	bl	8000734 <__aeabi_f2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
	  motor.dutyCycle = motor.dutyCycle + (float)(kp *speedErr) + (float)(kd * (speedErr - lastSpeedErr)) + (float)(ki * totalErr);
 8001458:	4b2f      	ldr	r3, [pc, #188]	@ (8001518 <main+0x590>)
 800145a:	ed93 8a37 	vldr	s16, [r3, #220]	@ 0xdc
 800145e:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8001462:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	@ 0x378
 8001466:	f7fe fed7 	bl	8000218 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fa87 	bl	8000984 <__aeabi_d2f>
 8001476:	ee07 0a90 	vmov	s15, r0
 800147a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800147e:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8001482:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
 8001486:	f7fe fff5 	bl	8000474 <__aeabi_dsub>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	@ 0x370
 8001496:	f7fe febf 	bl	8000218 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fa6f 	bl	8000984 <__aeabi_d2f>
 80014a6:	ee07 0a90 	vmov	s15, r0
 80014aa:	ee38 8a27 	vadd.f32	s16, s16, s15
 80014ae:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 80014b2:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	@ 0x368
 80014b6:	f7fe feaf 	bl	8000218 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fa5f 	bl	8000984 <__aeabi_d2f>
 80014c6:	ee07 0a90 	vmov	s15, r0
 80014ca:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <main+0x590>)
 80014d0:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc

	 if(motor.dutyCycle > 1.0f){
 80014d4:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <main+0x590>)
 80014d6:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80014da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	dd05      	ble.n	80014f4 <main+0x56c>
	    motor.dutyCycle = 1.0f;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <main+0x590>)
 80014ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80014ee:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 80014f2:	e741      	b.n	8001378 <main+0x3f0>
	 	 }
	 else if(motor.dutyCycle < 0.000f){
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <main+0x590>)
 80014f6:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80014fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d504      	bpl.n	800150e <main+0x586>
			motor.dutyCycle = 0.000f;
 8001504:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <main+0x590>)
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  {
 800150e:	e733      	b.n	8001378 <main+0x3f0>
 8001510:	88e368f1 	.word	0x88e368f1
 8001514:	3ee4f8b5 	.word	0x3ee4f8b5
 8001518:	20000a10 	.word	0x20000a10
 800151c:	447a0000 	.word	0x447a0000
 8001520:	2000084c 	.word	0x2000084c
 8001524:	42c80000 	.word	0x42c80000
 8001528:	20000930 	.word	0x20000930

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	@ 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0318 	add.w	r3, r7, #24
 8001536:	2238      	movs	r2, #56	@ 0x38
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f008 fdf4 	bl	800a128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001552:	f004 fcf9 	bl	8005f48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001560:	2340      	movs	r3, #64	@ 0x40
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001564:	2302      	movs	r3, #2
 8001566:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001568:	2302      	movs	r3, #2
 800156a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800156c:	2304      	movs	r3, #4
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001570:	234b      	movs	r3, #75	@ 0x4b
 8001572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001574:	2302      	movs	r3, #2
 8001576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800157c:	2302      	movs	r3, #2
 800157e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001580:	f107 0318 	add.w	r3, r7, #24
 8001584:	4618      	mov	r0, r3
 8001586:	f004 fd93 	bl	80060b0 <HAL_RCC_OscConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001590:	f000 fcce 	bl	8001f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001594:	230f      	movs	r3, #15
 8001596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001598:	2303      	movs	r3, #3
 800159a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2104      	movs	r1, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f005 f891 	bl	80066d4 <HAL_RCC_ClockConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015b8:	f000 fcba 	bl	8001f30 <Error_Handler>
  }
}
 80015bc:	bf00      	nop
 80015be:	3750      	adds	r7, #80	@ 0x50
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2220      	movs	r2, #32
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f008 fda3 	bl	800a128 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015e2:	4b47      	ldr	r3, [pc, #284]	@ (8001700 <MX_ADC1_Init+0x13c>)
 80015e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80015e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015ea:	4b45      	ldr	r3, [pc, #276]	@ (8001700 <MX_ADC1_Init+0x13c>)
 80015ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015f2:	4b43      	ldr	r3, [pc, #268]	@ (8001700 <MX_ADC1_Init+0x13c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f8:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <MX_ADC1_Init+0x13c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80015fe:	4b40      	ldr	r3, [pc, #256]	@ (8001700 <MX_ADC1_Init+0x13c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001604:	4b3e      	ldr	r3, [pc, #248]	@ (8001700 <MX_ADC1_Init+0x13c>)
 8001606:	2201      	movs	r2, #1
 8001608:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800160a:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <MX_ADC1_Init+0x13c>)
 800160c:	2208      	movs	r2, #8
 800160e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001610:	4b3b      	ldr	r3, [pc, #236]	@ (8001700 <MX_ADC1_Init+0x13c>)
 8001612:	2200      	movs	r2, #0
 8001614:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001616:	4b3a      	ldr	r3, [pc, #232]	@ (8001700 <MX_ADC1_Init+0x13c>)
 8001618:	2200      	movs	r2, #0
 800161a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800161c:	4b38      	ldr	r3, [pc, #224]	@ (8001700 <MX_ADC1_Init+0x13c>)
 800161e:	2203      	movs	r2, #3
 8001620:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001622:	4b37      	ldr	r3, [pc, #220]	@ (8001700 <MX_ADC1_Init+0x13c>)
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 800162a:	4b35      	ldr	r3, [pc, #212]	@ (8001700 <MX_ADC1_Init+0x13c>)
 800162c:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <MX_ADC1_Init+0x13c>)
 8001634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001638:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <MX_ADC1_Init+0x13c>)
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <MX_ADC1_Init+0x13c>)
 8001644:	2200      	movs	r2, #0
 8001646:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001648:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <MX_ADC1_Init+0x13c>)
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001650:	482b      	ldr	r0, [pc, #172]	@ (8001700 <MX_ADC1_Init+0x13c>)
 8001652:	f002 fc49 	bl	8003ee8 <HAL_ADC_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800165c:	f000 fc68 	bl	8001f30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	4825      	ldr	r0, [pc, #148]	@ (8001700 <MX_ADC1_Init+0x13c>)
 800166c:	f003 fcb0 	bl	8004fd0 <HAL_ADCEx_MultiModeConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001676:	f000 fc5b 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800167a:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <MX_ADC1_Init+0x140>)
 800167c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167e:	2306      	movs	r3, #6
 8001680:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001682:	2301      	movs	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001686:	237f      	movs	r3, #127	@ 0x7f
 8001688:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_4;
 800168a:	2303      	movs	r3, #3
 800168c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 40;
 800168e:	2328      	movs	r3, #40	@ 0x28
 8001690:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_NEGATIVE;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4817      	ldr	r0, [pc, #92]	@ (8001700 <MX_ADC1_Init+0x13c>)
 80016a2:	f002 fe77 	bl	8004394 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80016ac:	f000 fc40 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_ADC1_Init+0x144>)
 80016b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016b4:	230c      	movs	r3, #12
 80016b6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 10;
 80016bc:	230a      	movs	r3, #10
 80016be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	480e      	ldr	r0, [pc, #56]	@ (8001700 <MX_ADC1_Init+0x13c>)
 80016c6:	f002 fe65 	bl	8004394 <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80016d0:	f000 fc2e 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016d4:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <MX_ADC1_Init+0x148>)
 80016d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80016d8:	2312      	movs	r3, #18
 80016da:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016dc:	2304      	movs	r3, #4
 80016de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_ADC1_Init+0x13c>)
 80016ea:	f002 fe53 	bl	8004394 <HAL_ADC_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80016f4:	f000 fc1c 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3730      	adds	r7, #48	@ 0x30
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000057c 	.word	0x2000057c
 8001704:	14f00020 	.word	0x14f00020
 8001708:	2e300800 	.word	0x2e300800
 800170c:	3ac04000 	.word	0x3ac04000

08001710 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2220      	movs	r2, #32
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f008 fd03 	bl	800a128 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001722:	4b33      	ldr	r3, [pc, #204]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001724:	4a33      	ldr	r2, [pc, #204]	@ (80017f4 <MX_ADC2_Init+0xe4>)
 8001726:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001728:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 800172a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800172e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001730:	4b2f      	ldr	r3, [pc, #188]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001736:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800173c:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001742:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001744:	2201      	movs	r2, #1
 8001746:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001748:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 800174a:	2204      	movs	r2, #4
 800174c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800174e:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001750:	2200      	movs	r2, #0
 8001752:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001754:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001756:	2200      	movs	r2, #0
 8001758:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800175a:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 800175c:	2202      	movs	r2, #2
 800175e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001760:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 800176a:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001770:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001776:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001778:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001782:	2200      	movs	r2, #0
 8001784:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800178e:	4818      	ldr	r0, [pc, #96]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 8001790:	f002 fbaa 	bl	8003ee8 <HAL_ADC_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800179a:	f000 fbc9 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800179e:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <MX_ADC2_Init+0xe8>)
 80017a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a2:	2306      	movs	r3, #6
 80017a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80017a6:	2301      	movs	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017aa:	237f      	movs	r3, #127	@ 0x7f
 80017ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017ae:	2304      	movs	r3, #4
 80017b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	4619      	mov	r1, r3
 80017ba:	480d      	ldr	r0, [pc, #52]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 80017bc:	f002 fdea 	bl	8004394 <HAL_ADC_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80017c6:	f000 fbb3 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <MX_ADC2_Init+0xec>)
 80017cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017ce:	230c      	movs	r3, #12
 80017d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	@ (80017f0 <MX_ADC2_Init+0xe0>)
 80017d8:	f002 fddc 	bl	8004394 <HAL_ADC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80017e2:	f000 fba5 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200005e8 	.word	0x200005e8
 80017f4:	50000100 	.word	0x50000100
 80017f8:	04300002 	.word	0x04300002
 80017fc:	08600004 	.word	0x08600004

08001800 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_COMP2_Init+0x44>)
 8001806:	4a10      	ldr	r2, [pc, #64]	@ (8001848 <MX_COMP2_Init+0x48>)
 8001808:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <MX_COMP2_Init+0x44>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_COMP2_Init+0x44>)
 8001812:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <MX_COMP2_Init+0x4c>)
 8001814:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001816:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <MX_COMP2_Init+0x44>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <MX_COMP2_Init+0x44>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <MX_COMP2_Init+0x44>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <MX_COMP2_Init+0x44>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_COMP2_Init+0x44>)
 8001830:	f003 fd1a 	bl	8005268 <HAL_COMP_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 800183a:	f000 fb79 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000714 	.word	0x20000714
 8001848:	40010204 	.word	0x40010204
 800184c:	00800030 	.word	0x00800030

08001850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <MX_SPI1_Init+0x74>)
 8001856:	4a1c      	ldr	r2, [pc, #112]	@ (80018c8 <MX_SPI1_Init+0x78>)
 8001858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_SPI1_Init+0x74>)
 800185c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_SPI1_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <MX_SPI1_Init+0x74>)
 800186a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800186e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001870:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <MX_SPI1_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <MX_SPI1_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <MX_SPI1_Init+0x74>)
 800187e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001882:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001884:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <MX_SPI1_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800188a:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <MX_SPI1_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <MX_SPI1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <MX_SPI1_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <MX_SPI1_Init+0x74>)
 800189e:	2207      	movs	r2, #7
 80018a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <MX_SPI1_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <MX_SPI1_Init+0x74>)
 80018aa:	2208      	movs	r2, #8
 80018ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_SPI1_Init+0x74>)
 80018b0:	f005 fb1c 	bl	8006eec <HAL_SPI_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018ba:	f000 fb39 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000738 	.word	0x20000738
 80018c8:	40013000 	.word	0x40013000

080018cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <MX_SPI3_Init+0x74>)
 80018d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001944 <MX_SPI3_Init+0x78>)
 80018d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <MX_SPI3_Init+0x74>)
 80018d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80018de:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <MX_SPI3_Init+0x74>)
 80018e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <MX_SPI3_Init+0x74>)
 80018e8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80018ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_SPI3_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <MX_SPI3_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <MX_SPI3_Init+0x74>)
 80018fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001900:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <MX_SPI3_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <MX_SPI3_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <MX_SPI3_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001914:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <MX_SPI3_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <MX_SPI3_Init+0x74>)
 800191c:	2207      	movs	r2, #7
 800191e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001920:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <MX_SPI3_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <MX_SPI3_Init+0x74>)
 8001928:	2208      	movs	r2, #8
 800192a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	@ (8001940 <MX_SPI3_Init+0x74>)
 800192e:	f005 fadd 	bl	8006eec <HAL_SPI_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8001938:	f000 fafa 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000079c 	.word	0x2000079c
 8001944:	40003c00 	.word	0x40003c00

08001948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b09c      	sub	sp, #112	@ 0x70
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]
 800197a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2234      	movs	r2, #52	@ 0x34
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f008 fbd0 	bl	800a128 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001988:	4b57      	ldr	r3, [pc, #348]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 800198a:	4a58      	ldr	r2, [pc, #352]	@ (8001aec <MX_TIM1_Init+0x1a4>)
 800198c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 800198e:	4b56      	ldr	r3, [pc, #344]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 8001990:	2202      	movs	r2, #2
 8001992:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001994:	4b54      	ldr	r3, [pc, #336]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 8001996:	2220      	movs	r2, #32
 8001998:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 765;
 800199a:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 800199c:	f240 22fd 	movw	r2, #765	@ 0x2fd
 80019a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b51      	ldr	r3, [pc, #324]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019a8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ae:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019b4:	484c      	ldr	r0, [pc, #304]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 80019b6:	f006 f9cf 	bl	8007d58 <HAL_TIM_Base_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019c0:	f000 fab6 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019ce:	4619      	mov	r1, r3
 80019d0:	4845      	ldr	r0, [pc, #276]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 80019d2:	f006 fea1 	bl	8008718 <HAL_TIM_ConfigClockSource>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019dc:	f000 faa8 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019e0:	4841      	ldr	r0, [pc, #260]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 80019e2:	f006 fadd 	bl	8007fa0 <HAL_TIM_PWM_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019ec:	f000 faa0 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80019f0:	2350      	movs	r3, #80	@ 0x50
 80019f2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a00:	4619      	mov	r1, r3
 8001a02:	4839      	ldr	r0, [pc, #228]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 8001a04:	f007 fbfe 	bl	8009204 <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a0e:	f000 fa8f 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a12:	2360      	movs	r3, #96	@ 0x60
 8001a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	482c      	ldr	r0, [pc, #176]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 8001a38:	f006 fd5a 	bl	80084f0 <HAL_TIM_PWM_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a42:	f000 fa75 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4826      	ldr	r0, [pc, #152]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 8001a50:	f006 fd4e 	bl	80084f0 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a5a:	f000 fa69 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a62:	2208      	movs	r2, #8
 8001a64:	4619      	mov	r1, r3
 8001a66:	4820      	ldr	r0, [pc, #128]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 8001a68:	f006 fd42 	bl	80084f0 <HAL_TIM_PWM_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001a72:	f000 fa5d 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481a      	ldr	r0, [pc, #104]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 8001a80:	f006 fd36 	bl	80084f0 <HAL_TIM_PWM_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001a8a:	f000 fa51 	bl	8001f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ab4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4807      	ldr	r0, [pc, #28]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 8001acc:	f007 fc1c 	bl	8009308 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001ad6:	f000 fa2b 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ada:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <MX_TIM1_Init+0x1a0>)
 8001adc:	f001 fdae 	bl	800363c <HAL_TIM_MspPostInit>

}
 8001ae0:	bf00      	nop
 8001ae2:	3770      	adds	r7, #112	@ 0x70
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000800 	.word	0x20000800
 8001aec:	40012c00 	.word	0x40012c00

08001af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b02:	463b      	mov	r3, r7
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	615a      	str	r2, [r3, #20]
 8001b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b14:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b1e:	2202      	movs	r2, #2
 8001b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 765;
 8001b28:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b2a:	f240 22fd 	movw	r2, #765	@ 0x2fd
 8001b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b25      	ldr	r3, [pc, #148]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b3c:	4823      	ldr	r0, [pc, #140]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b3e:	f006 fa2f 	bl	8007fa0 <HAL_TIM_PWM_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001b48:	f000 f9f2 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	481c      	ldr	r0, [pc, #112]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b5c:	f007 fb52 	bl	8009204 <HAL_TIMEx_MasterConfigSynchronization>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001b66:	f000 f9e3 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6a:	2360      	movs	r3, #96	@ 0x60
 8001b6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4812      	ldr	r0, [pc, #72]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b82:	f006 fcb5 	bl	80084f0 <HAL_TIM_PWM_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001b8c:	f000 f9d0 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b90:	463b      	mov	r3, r7
 8001b92:	2208      	movs	r2, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001b98:	f006 fcaa 	bl	80084f0 <HAL_TIM_PWM_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001ba2:	f000 f9c5 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	220c      	movs	r2, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001bae:	f006 fc9f 	bl	80084f0 <HAL_TIM_PWM_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001bb8:	f000 f9ba 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bbc:	4803      	ldr	r0, [pc, #12]	@ (8001bcc <MX_TIM2_Init+0xdc>)
 8001bbe:	f001 fd3d 	bl	800363c <HAL_TIM_MspPostInit>

}
 8001bc2:	bf00      	nop
 8001bc4:	3728      	adds	r7, #40	@ 0x28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000084c 	.word	0x2000084c

08001bd0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001be0:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001be2:	4a15      	ldr	r2, [pc, #84]	@ (8001c38 <MX_TIM7_Init+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8001be6:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001be8:	2204      	movs	r2, #4
 8001bea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2556;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001bf4:	f640 12fc 	movw	r2, #2556	@ 0x9fc
 8001bf8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c00:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001c02:	f006 f8a9 	bl	8007d58 <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c0c:	f000 f990 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001c1e:	f007 faf1 	bl	8009204 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c28:	f000 f982 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000898 	.word	0x20000898
 8001c38:	40001400 	.word	0x40001400

08001c3c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_TIM16_Init+0x44>)
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <MX_TIM16_Init+0x48>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_TIM16_Init+0x44>)
 8001c48:	2202      	movs	r2, #2
 8001c4a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_TIM16_Init+0x44>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <MX_TIM16_Init+0x44>)
 8001c54:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001c58:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_TIM16_Init+0x44>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <MX_TIM16_Init+0x44>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_TIM16_Init+0x44>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	@ (8001c80 <MX_TIM16_Init+0x44>)
 8001c6e:	f006 f873 	bl	8007d58 <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001c78:	f000 f95a 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200008e4 	.word	0x200008e4
 8001c84:	40014400 	.word	0x40014400

08001c88 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <MX_TIM17_Init+0x44>)
 8001c8e:	4a10      	ldr	r2, [pc, #64]	@ (8001cd0 <MX_TIM17_Init+0x48>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 150;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <MX_TIM17_Init+0x44>)
 8001c94:	2296      	movs	r2, #150	@ 0x96
 8001c96:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <MX_TIM17_Init+0x44>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <MX_TIM17_Init+0x44>)
 8001ca0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <MX_TIM17_Init+0x44>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001cac:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <MX_TIM17_Init+0x44>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <MX_TIM17_Init+0x44>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	@ (8001ccc <MX_TIM17_Init+0x44>)
 8001cba:	f006 f84d 	bl	8007d58 <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001cc4:	f000 f934 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000930 	.word	0x20000930
 8001cd0:	40014800 	.word	0x40014800

08001cd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd8:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001cda:	4a23      	ldr	r2, [pc, #140]	@ (8001d68 <MX_USART1_UART_Init+0x94>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d10:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d1c:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d1e:	f007 fbc5 	bl	80094ac <HAL_UART_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d28:	f000 f902 	bl	8001f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d30:	f008 f930 	bl	8009f94 <HAL_UARTEx_SetTxFifoThreshold>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d3a:	f000 f8f9 	bl	8001f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4808      	ldr	r0, [pc, #32]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d42:	f008 f965 	bl	800a010 <HAL_UARTEx_SetRxFifoThreshold>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d4c:	f000 f8f0 	bl	8001f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d50:	4804      	ldr	r0, [pc, #16]	@ (8001d64 <MX_USART1_UART_Init+0x90>)
 8001d52:	f008 f8e6 	bl	8009f22 <HAL_UARTEx_DisableFifoMode>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d5c:	f000 f8e8 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	2000097c 	.word	0x2000097c
 8001d68:	40013800 	.word	0x40013800

08001d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d72:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <MX_DMA_Init+0x60>)
 8001d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d76:	4a15      	ldr	r2, [pc, #84]	@ (8001dcc <MX_DMA_Init+0x60>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d7e:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <MX_DMA_Init+0x60>)
 8001d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <MX_DMA_Init+0x60>)
 8001d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dcc <MX_DMA_Init+0x60>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <MX_DMA_Init+0x60>)
 8001d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	200b      	movs	r0, #11
 8001da8:	f003 fc5d 	bl	8005666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001dac:	200b      	movs	r0, #11
 8001dae:	f003 fc74 	bl	800569a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	200c      	movs	r0, #12
 8001db8:	f003 fc55 	bl	8005666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001dbc:	200c      	movs	r0, #12
 8001dbe:	f003 fc6c 	bl	800569a <HAL_NVIC_EnableIRQ>

}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b4f      	ldr	r3, [pc, #316]	@ (8001f24 <MX_GPIO_Init+0x154>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	4a4e      	ldr	r2, [pc, #312]	@ (8001f24 <MX_GPIO_Init+0x154>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f24 <MX_GPIO_Init+0x154>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b49      	ldr	r3, [pc, #292]	@ (8001f24 <MX_GPIO_Init+0x154>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	4a48      	ldr	r2, [pc, #288]	@ (8001f24 <MX_GPIO_Init+0x154>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0a:	4b46      	ldr	r3, [pc, #280]	@ (8001f24 <MX_GPIO_Init+0x154>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	4b43      	ldr	r3, [pc, #268]	@ (8001f24 <MX_GPIO_Init+0x154>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	4a42      	ldr	r2, [pc, #264]	@ (8001f24 <MX_GPIO_Init+0x154>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e22:	4b40      	ldr	r3, [pc, #256]	@ (8001f24 <MX_GPIO_Init+0x154>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2110      	movs	r1, #16
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e36:	f004 f857 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f44f 4121 	mov.w	r1, #41216	@ 0xa100
 8001e40:	4839      	ldr	r0, [pc, #228]	@ (8001f28 <MX_GPIO_Init+0x158>)
 8001e42:	f004 f851 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2140      	movs	r1, #64	@ 0x40
 8001e4a:	4838      	ldr	r0, [pc, #224]	@ (8001f2c <MX_GPIO_Init+0x15c>)
 8001e4c:	f004 f84c 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_11;
 8001e50:	f642 0310 	movw	r3, #10256	@ 0x2810
 8001e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e56:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4619      	mov	r1, r3
 8001e66:	4831      	ldr	r0, [pc, #196]	@ (8001f2c <MX_GPIO_Init+0x15c>)
 8001e68:	f003 fea4 	bl	8005bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e86:	f003 fe95 	bl	8005bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10;
 8001e8a:	f240 4302 	movw	r3, #1026	@ 0x402
 8001e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4822      	ldr	r0, [pc, #136]	@ (8001f28 <MX_GPIO_Init+0x158>)
 8001ea0:	f003 fe88 	bl	8005bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8;
 8001ea4:	f44f 4321 	mov.w	r3, #41216	@ 0xa100
 8001ea8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481a      	ldr	r0, [pc, #104]	@ (8001f28 <MX_GPIO_Init+0x158>)
 8001ebe:	f003 fe79 	bl	8005bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ec2:	2340      	movs	r3, #64	@ 0x40
 8001ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4814      	ldr	r0, [pc, #80]	@ (8001f2c <MX_GPIO_Init+0x15c>)
 8001eda:	f003 fe6b 	bl	8005bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ee4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef8:	f003 fe5c 	bl	8005bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	200a      	movs	r0, #10
 8001f02:	f003 fbb0 	bl	8005666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f06:	200a      	movs	r0, #10
 8001f08:	f003 fbc7 	bl	800569a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2028      	movs	r0, #40	@ 0x28
 8001f12:	f003 fba8 	bl	8005666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f16:	2028      	movs	r0, #40	@ 0x28
 8001f18:	f003 fbbf 	bl	800569a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f1c:	bf00      	nop
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	48000800 	.word	0x48000800

08001f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f34:	b672      	cpsid	i
}
 8001f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <Error_Handler+0x8>

08001f3c <readHalls>:


	//m->angle = angle;
}

void readHalls(motor_t* m){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    int hall1 = HAL_GPIO_ReadPin(m->hallPins[0].gpioGroup, m->hallPins[0].gpioPin);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	891b      	ldrh	r3, [r3, #8]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f003 ffb2 	bl	8005eb8 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	617b      	str	r3, [r7, #20]
    int hall2 = HAL_GPIO_ReadPin(m->hallPins[1].gpioGroup, m->hallPins[1].gpioPin);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8a1b      	ldrh	r3, [r3, #16]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f003 ffa8 	bl	8005eb8 <HAL_GPIO_ReadPin>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	613b      	str	r3, [r7, #16]
    int hall3 = HAL_GPIO_ReadPin(m->hallPins[2].gpioGroup, m->hallPins[2].gpioPin);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	8b1b      	ldrh	r3, [r3, #24]
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f003 ff9e 	bl	8005eb8 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60fb      	str	r3, [r7, #12]
    int steps;

    switch((hall1<<2)|(hall2<<1)|(hall3))
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	009a      	lsls	r2, r3, #2
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d840      	bhi.n	8002016 <readHalls+0xda>
 8001f94:	a201      	add	r2, pc, #4	@ (adr r2, 8001f9c <readHalls+0x60>)
 8001f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9a:	bf00      	nop
 8001f9c:	08001ff7 	.word	0x08001ff7
 8001fa0:	08001fd7 	.word	0x08001fd7
 8001fa4:	08001fe7 	.word	0x08001fe7
 8001fa8:	08001fb5 	.word	0x08001fb5
 8001fac:	08002007 	.word	0x08002007
 8001fb0:	08001fc7 	.word	0x08001fc7
    {
        case 0b100:
            m->angle = 0.0f;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	665a      	str	r2, [r3, #100]	@ 0x64
            m->hallState = 0b100;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

            break;
 8001fc4:	e02f      	b.n	8002026 <readHalls+0xea>
        case 0b110:
            //m->angle = (pi / 3.0f);
        	m->angle = 60.0f;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4f      	ldr	r2, [pc, #316]	@ (8002108 <readHalls+0x1cc>)
 8001fca:	665a      	str	r2, [r3, #100]	@ 0x64
            m->hallState = 0b110;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2206      	movs	r2, #6
 8001fd0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            break;
 8001fd4:	e027      	b.n	8002026 <readHalls+0xea>

        case 0b010:
            //m->angle = (2.0f * pi / 3.0f);
        	m->angle = 120.0f;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800210c <readHalls+0x1d0>)
 8001fda:	665a      	str	r2, [r3, #100]	@ 0x64
            m->hallState = 0b010;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

            break;
 8001fe4:	e01f      	b.n	8002026 <readHalls+0xea>

        case 0b011:
            //m->angle = pi;
        	m->angle = 180.f;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a49      	ldr	r2, [pc, #292]	@ (8002110 <readHalls+0x1d4>)
 8001fea:	665a      	str	r2, [r3, #100]	@ 0x64
            m->hallState = 0b011;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            break;
 8001ff4:	e017      	b.n	8002026 <readHalls+0xea>

        case 0b001:
            //m->angle = (4.0f * pi / 3.0f);
        	m->angle = 240.0f;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a46      	ldr	r2, [pc, #280]	@ (8002114 <readHalls+0x1d8>)
 8001ffa:	665a      	str	r2, [r3, #100]	@ 0x64
            m->hallState = 0b001;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            break;
 8002004:	e00f      	b.n	8002026 <readHalls+0xea>

        case 0b101:
            //m->angle = (5.0f * pi / 3.0f);
        	m->angle = 300.0f;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a43      	ldr	r2, [pc, #268]	@ (8002118 <readHalls+0x1dc>)
 800200a:	665a      	str	r2, [r3, #100]	@ 0x64
            m->hallState = 0b101;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2205      	movs	r2, #5
 8002010:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            break;
 8002014:	e007      	b.n	8002026 <readHalls+0xea>

        default:
            m->invalidCts++;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            return;
 8002024:	e06c      	b.n	8002100 <readHalls+0x1c4>
    }

    m->avg_speed = approxRollingAverage(avg_speed, m->speed);
 8002026:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <readHalls+0x1e0>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8002032:	eef0 0a47 	vmov.f32	s1, s14
 8002036:	eeb0 0a67 	vmov.f32	s0, s15
 800203a:	f000 f8eb 	bl	8002214 <approxRollingAverage>
 800203e:	eef0 7a40 	vmov.f32	s15, s0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
    m->angleOffset =  60.0f * (m->avg_speed * (float)m->hallCount / 1000000.0f);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	edd3 7a39 	vldr	s15, [r3, #228]	@ 0xe4
 8002054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002058:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8002120 <readHalls+0x1e4>
 800205c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002060:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002124 <readHalls+0x1e8>
 8002064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
    float temp = m->angle;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002072:	60bb      	str	r3, [r7, #8]
    if(m->angleOffset > 60.0f ){
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 800207a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002124 <readHalls+0x1e8>
 800207e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	dd04      	ble.n	8002092 <readHalls+0x156>
    	m->angleOffset = 60.0f;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a1f      	ldr	r2, [pc, #124]	@ (8002108 <readHalls+0x1cc>)
 800208c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002090:	e00c      	b.n	80020ac <readHalls+0x170>

    }
    else if (m->angleOffset < 0.0f){
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 8002098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	d504      	bpl.n	80020ac <readHalls+0x170>
    	m->angleOffset = 0.0f;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    }
    if(m->dir){
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <readHalls+0x192>
        m->angle = m->angle +  m->angleOffset;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 80020c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 80020cc:	e00e      	b.n	80020ec <readHalls+0x1b0>
    }
    else{
    	m->angle = m->angle + 60.0f - m->angleOffset;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80020d4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002124 <readHalls+0x1e8>
 80020d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 80020e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
    }
    m->lastAngle = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	669a      	str	r2, [r3, #104]	@ 0x68
    m->lastHallState = m->hallState;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

  return;
 80020fe:	bf00      	nop
}
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	42700000 	.word	0x42700000
 800210c:	42f00000 	.word	0x42f00000
 8002110:	43340000 	.word	0x43340000
 8002114:	43700000 	.word	0x43700000
 8002118:	43960000 	.word	0x43960000
 800211c:	20000b58 	.word	0x20000b58
 8002120:	49742400 	.word	0x49742400
 8002124:	42700000 	.word	0x42700000

08002128 <MOTOR_init>:
 * @brief Initialize the motor control structure
 *
 * @param m A pointer to a motor_t struct (not a vicproto MotorState!) that is already initialized with the correct references
 */
void MOTOR_init(motor_t* m)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(m->pwm, TIM_CHANNEL_1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f005 ff8a 	bl	8008050 <HAL_TIM_PWM_Start>
    // Using channel 2 as no output for 0 point adc trigger
    HAL_TIM_PWM_Start(m->pwm, TIM_CHANNEL_2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2104      	movs	r1, #4
 8002142:	4618      	mov	r0, r3
 8002144:	f005 ff84 	bl	8008050 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(m->pwm, TIM_CHANNEL_3);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2108      	movs	r1, #8
 800214e:	4618      	mov	r0, r3
 8002150:	f005 ff7e 	bl	8008050 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(m->pwm, TIM_CHANNEL_4);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	210c      	movs	r1, #12
 800215a:	4618      	mov	r0, r3
 800215c:	f005 ff78 	bl	8008050 <HAL_TIM_PWM_Start>

    m->pwm->Instance->CCR1 = round(ARR * m->dutyCycle);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8002166:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002210 <MOTOR_init+0xe8>
 800216a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216e:	ee17 0a90 	vmov	r0, s15
 8002172:	f7fe fadf 	bl	8000734 <__aeabi_f2d>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	ec43 2b10 	vmov	d0, r2, r3
 800217e:	f008 f96d 	bl	800a45c <round>
 8002182:	ec51 0b10 	vmov	r0, r1, d0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681c      	ldr	r4, [r3, #0]
 800218c:	f7fe fbda 	bl	8000944 <__aeabi_d2uiz>
 8002190:	4603      	mov	r3, r0
 8002192:	6363      	str	r3, [r4, #52]	@ 0x34
    m->pwm->Instance->CCR2 = 1;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	639a      	str	r2, [r3, #56]	@ 0x38
    m->pwm->Instance->CCR3 = round(ARR * m->dutyCycle);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80021a4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002210 <MOTOR_init+0xe8>
 80021a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ac:	ee17 0a90 	vmov	r0, s15
 80021b0:	f7fe fac0 	bl	8000734 <__aeabi_f2d>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	ec43 2b10 	vmov	d0, r2, r3
 80021bc:	f008 f94e 	bl	800a45c <round>
 80021c0:	ec51 0b10 	vmov	r0, r1, d0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681c      	ldr	r4, [r3, #0]
 80021ca:	f7fe fbbb 	bl	8000944 <__aeabi_d2uiz>
 80021ce:	4603      	mov	r3, r0
 80021d0:	63e3      	str	r3, [r4, #60]	@ 0x3c
    m->pwm->Instance->CCR4 = round(ARR * m->dutyCycle); // trigger output compare 4 whenever 0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 80021d8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002210 <MOTOR_init+0xe8>
 80021dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e0:	ee17 0a90 	vmov	r0, s15
 80021e4:	f7fe faa6 	bl	8000734 <__aeabi_f2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	ec43 2b10 	vmov	d0, r2, r3
 80021f0:	f008 f934 	bl	800a45c <round>
 80021f4:	ec51 0b10 	vmov	r0, r1, d0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681c      	ldr	r4, [r3, #0]
 80021fe:	f7fe fba1 	bl	8000944 <__aeabi_d2uiz>
 8002202:	4603      	mov	r3, r0
 8002204:	6423      	str	r3, [r4, #64]	@ 0x40

}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
 800220e:	bf00      	nop
 8002210:	443f4000 	.word	0x443f4000

08002214 <approxRollingAverage>:
float MOTOR_getCurrent(motor_t* m)
{
    return m->averageCurrent;
}

float approxRollingAverage (float avg, float new_sample) {
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	ed87 0a01 	vstr	s0, [r7, #4]
 800221e:	edc7 0a00 	vstr	s1, [r7]
	float n = 100.0;
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <approxRollingAverage+0x58>)
 8002224:	60fb      	str	r3, [r7, #12]
    avg -= avg / n;
 8002226:	edd7 6a01 	vldr	s13, [r7, #4]
 800222a:	ed97 7a03 	vldr	s14, [r7, #12]
 800222e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002232:	ed97 7a01 	vldr	s14, [r7, #4]
 8002236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223a:	edc7 7a01 	vstr	s15, [r7, #4]
    avg += new_sample / n;
 800223e:	edd7 6a00 	vldr	s13, [r7]
 8002242:	ed97 7a03 	vldr	s14, [r7, #12]
 8002246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800224a:	ed97 7a01 	vldr	s14, [r7, #4]
 800224e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002252:	edc7 7a01 	vstr	s15, [r7, #4]

    return avg;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	ee07 3a90 	vmov	s15, r3
}
 800225c:	eeb0 0a67 	vmov.f32	s0, s15
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	42c80000 	.word	0x42c80000

08002270 <get_Current>:
    	m->pwm->Instance->CCR2 = round(765.0f * (0.5f * sin(convertedAngle -  (4.0f * pi / 3.0f)) + 0.5) * m->dutyCycle); // pwmw = 0
    	m->pwm->Instance->CCR3 = round(765.0f * (0.5f * sin(convertedAngle - (2.0f * pi / 3.0f)) + 0.5) * m->dutyCycle); // pwmw = 0
	}
}

void get_Current(motor_t * m){
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float voltageA = (3.3f *((float) m->adcData[0] / 4096.0f ));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002286:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800237c <get_Current+0x10c>
 800228a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800228e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002380 <get_Current+0x110>
 8002292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002296:	edc7 7a05 	vstr	s15, [r7, #20]
	float voltageB = (3.3f *((float) m->adcData[1] / 4096.0f ));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a8:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800237c <get_Current+0x10c>
 80022ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002380 <get_Current+0x110>
 80022b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b8:	edc7 7a04 	vstr	s15, [r7, #16]
	float voltageC = (3.3f *((float) m->adcData[2] / 4096.0f ));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ca:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800237c <get_Current+0x10c>
 80022ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022d2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002380 <get_Current+0x110>
 80022d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022da:	edc7 7a03 	vstr	s15, [r7, #12]
	m->iuDat = MP6543_IGAIN * voltageA / MP6543_SHUNT_RESISTOR;
 80022de:	edd7 7a05 	vldr	s15, [r7, #20]
 80022e2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002384 <get_Current+0x114>
 80022e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022ea:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002388 <get_Current+0x118>
 80022ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	m->iwDat = MP6543_IGAIN * voltageB / MP6543_SHUNT_RESISTOR;
 80022f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022fc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002384 <get_Current+0x114>
 8002300:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002304:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002388 <get_Current+0x118>
 8002308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	m->ivDat = MP6543_IGAIN * voltageC / MP6543_SHUNT_RESISTOR;
 8002312:	edd7 7a03 	vldr	s15, [r7, #12]
 8002316:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002384 <get_Current+0x114>
 800231a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800231e:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002388 <get_Current+0x118>
 8002322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	m->iaDat = (m->ivDat +  m->iwDat);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8002338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
	m->ibDat = (m->iuDat +  m->iwDat);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800234e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
	m->icDat = (m->ivDat +  m->iuDat);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
	return;
 800236e:	bf00      	nop
}
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	45800000 	.word	0x45800000
 8002380:	40533333 	.word	0x40533333
 8002384:	460fc000 	.word	0x460fc000
 8002388:	45d48000 	.word	0x45d48000

0800238c <MOTOR_FOCtask>:
 * FOC commutation control
 * Uses SVM switching scheme
 */

void MOTOR_FOCtask(motor_t* m)
{
 800238c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002390:	b08a      	sub	sp, #40	@ 0x28
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
    if(m->posMode == true){
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800239c:	2b00      	cmp	r3, #0
 800239e:	f040 8290 	bne.w	80028c2 <MOTOR_FOCtask+0x536>
    	return;
    }
    // Enable all three motor phases
    HAL_GPIO_WritePin(m->enablePins[0].gpioGroup, m->enablePins[0].gpioPin, 1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69d8      	ldr	r0, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8c1b      	ldrh	r3, [r3, #32]
 80023aa:	2201      	movs	r2, #1
 80023ac:	4619      	mov	r1, r3
 80023ae:	f003 fd9b 	bl	8005ee8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m->enablePins[1].gpioGroup, m->enablePins[1].gpioPin, 1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	2201      	movs	r2, #1
 80023bc:	4619      	mov	r1, r3
 80023be:	f003 fd93 	bl	8005ee8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m->enablePins[2].gpioGroup, m->enablePins[2].gpioPin, 1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80023ca:	2201      	movs	r2, #1
 80023cc:	4619      	mov	r1, r3
 80023ce:	f003 fd8b 	bl	8005ee8 <HAL_GPIO_WritePin>

    // Convert angle from degrees to radians
    float convAngle = m->angle * (pi / 180.0f);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 80023d8:	4be2      	ldr	r3, [pc, #904]	@ (8002764 <MOTOR_FOCtask+0x3d8>)
 80023da:	edd3 6a00 	vldr	s13, [r3]
 80023de:	ed9f 6ae2 	vldr	s12, [pc, #904]	@ 8002768 <MOTOR_FOCtask+0x3dc>
 80023e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Clarke transform: Convert three-phase currents to two-phase alpha-beta
    m->a = (float)(m->iaDat);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    m->b = (0.577350267f * (float)(m->iaDat + 2.0f * m->ibDat));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8002404:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240c:	ed9f 7ad7 	vldr	s14, [pc, #860]	@ 800276c <MOTOR_FOCtask+0x3e0>
 8002410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0

    // Park transform: Convert alpha-beta currents to d-q frame
    m->id =  m->a * cos(convAngle) + m->b * sin(convAngle);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f987 	bl	8000734 <__aeabi_f2d>
 8002426:	4604      	mov	r4, r0
 8002428:	460d      	mov	r5, r1
 800242a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800242c:	f7fe f982 	bl	8000734 <__aeabi_f2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	ec43 2b10 	vmov	d0, r2, r3
 8002438:	f007 feaa 	bl	800a190 <cos>
 800243c:	ec53 2b10 	vmov	r2, r3, d0
 8002440:	4620      	mov	r0, r4
 8002442:	4629      	mov	r1, r5
 8002444:	f7fd fee8 	bl	8000218 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4690      	mov	r8, r2
 800244e:	4699      	mov	r9, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f96c 	bl	8000734 <__aeabi_f2d>
 800245c:	4604      	mov	r4, r0
 800245e:	460d      	mov	r5, r1
 8002460:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002462:	f7fe f967 	bl	8000734 <__aeabi_f2d>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	ec43 2b10 	vmov	d0, r2, r3
 800246e:	f007 fee3 	bl	800a238 <sin>
 8002472:	ec53 2b10 	vmov	r2, r3, d0
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fd fecd 	bl	8000218 <__aeabi_dmul>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4640      	mov	r0, r8
 8002484:	4649      	mov	r1, r9
 8002486:	f7fd fff7 	bl	8000478 <__adddf3>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	f7fe fa77 	bl	8000984 <__aeabi_d2f>
 8002496:	4602      	mov	r2, r0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    m->iq = -m->a * sin(convAngle) + m->b * cos(convAngle);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 80024a4:	eef1 7a67 	vneg.f32	s15, s15
 80024a8:	ee17 3a90 	vmov	r3, s15
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f941 	bl	8000734 <__aeabi_f2d>
 80024b2:	4604      	mov	r4, r0
 80024b4:	460d      	mov	r5, r1
 80024b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024b8:	f7fe f93c 	bl	8000734 <__aeabi_f2d>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	ec43 2b10 	vmov	d0, r2, r3
 80024c4:	f007 feb8 	bl	800a238 <sin>
 80024c8:	ec53 2b10 	vmov	r2, r3, d0
 80024cc:	4620      	mov	r0, r4
 80024ce:	4629      	mov	r1, r5
 80024d0:	f7fd fea2 	bl	8000218 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4690      	mov	r8, r2
 80024da:	4699      	mov	r9, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe f926 	bl	8000734 <__aeabi_f2d>
 80024e8:	4604      	mov	r4, r0
 80024ea:	460d      	mov	r5, r1
 80024ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024ee:	f7fe f921 	bl	8000734 <__aeabi_f2d>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	ec43 2b10 	vmov	d0, r2, r3
 80024fa:	f007 fe49 	bl	800a190 <cos>
 80024fe:	ec53 2b10 	vmov	r2, r3, d0
 8002502:	4620      	mov	r0, r4
 8002504:	4629      	mov	r1, r5
 8002506:	f7fd fe87 	bl	8000218 <__aeabi_dmul>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4640      	mov	r0, r8
 8002510:	4649      	mov	r1, r9
 8002512:	f7fd ffb1 	bl	8000478 <__adddf3>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	f7fe fa31 	bl	8000984 <__aeabi_d2f>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    // Current control: PI controllers for d and q currents
    float idErr =   0.0f - m->id;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8002530:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8002794 <MOTOR_FOCtask+0x408>
 8002534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002538:	edc7 7a08 	vstr	s15, [r7, #32]
    float iqErr = fabs(m->iq) - (0.001f * (float)m->torqueLevel);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 8002542:	eeb0 7ae7 	vabs.f32	s14, s15
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002554:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8002770 <MOTOR_FOCtask+0x3e4>
 8002558:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800255c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002560:	edc7 7a07 	vstr	s15, [r7, #28]
    float outSigID = m->id + (0.00000258f * idErr) + (0.0000002f * idSum);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 800256a:	edd7 7a08 	vldr	s15, [r7, #32]
 800256e:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8002774 <MOTOR_FOCtask+0x3e8>
 8002572:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800257a:	4b7f      	ldr	r3, [pc, #508]	@ (8002778 <MOTOR_FOCtask+0x3ec>)
 800257c:	edd3 7a00 	vldr	s15, [r3]
 8002580:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800277c <MOTOR_FOCtask+0x3f0>
 8002584:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258c:	edc7 7a06 	vstr	s15, [r7, #24]
    float outSigIQ = m->iq + (0.0000003f * iqErr) + (0.00000021f * iqSum);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8002596:	edd7 7a07 	vldr	s15, [r7, #28]
 800259a:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002780 <MOTOR_FOCtask+0x3f4>
 800259e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a6:	4b77      	ldr	r3, [pc, #476]	@ (8002784 <MOTOR_FOCtask+0x3f8>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002788 <MOTOR_FOCtask+0x3fc>
 80025b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b8:	edc7 7a05 	vstr	s15, [r7, #20]
    idSum += idErr;
 80025bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002778 <MOTOR_FOCtask+0x3ec>)
 80025be:	ed93 7a00 	vldr	s14, [r3]
 80025c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80025c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ca:	4b6b      	ldr	r3, [pc, #428]	@ (8002778 <MOTOR_FOCtask+0x3ec>)
 80025cc:	edc3 7a00 	vstr	s15, [r3]
    iqSum += iqErr;
 80025d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002784 <MOTOR_FOCtask+0x3f8>)
 80025d2:	ed93 7a00 	vldr	s14, [r3]
 80025d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80025da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025de:	4b69      	ldr	r3, [pc, #420]	@ (8002784 <MOTOR_FOCtask+0x3f8>)
 80025e0:	edc3 7a00 	vstr	s15, [r3]

    // Inverse Park transform: Convert d-q voltages back to alpha-beta
    m->newa = (cos(convAngle) * outSigID - sin(convAngle) * outSigIQ) * motorVoltage;
 80025e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025e6:	f7fe f8a5 	bl	8000734 <__aeabi_f2d>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	ec43 2b10 	vmov	d0, r2, r3
 80025f2:	f007 fdcd 	bl	800a190 <cos>
 80025f6:	ec55 4b10 	vmov	r4, r5, d0
 80025fa:	69b8      	ldr	r0, [r7, #24]
 80025fc:	f7fe f89a 	bl	8000734 <__aeabi_f2d>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4620      	mov	r0, r4
 8002606:	4629      	mov	r1, r5
 8002608:	f7fd fe06 	bl	8000218 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002616:	f7fe f88d 	bl	8000734 <__aeabi_f2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	ec43 2b10 	vmov	d0, r2, r3
 8002622:	f007 fe09 	bl	800a238 <sin>
 8002626:	ec59 8b10 	vmov	r8, r9, d0
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7fe f882 	bl	8000734 <__aeabi_f2d>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4640      	mov	r0, r8
 8002636:	4649      	mov	r1, r9
 8002638:	f7fd fdee 	bl	8000218 <__aeabi_dmul>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4620      	mov	r0, r4
 8002642:	4629      	mov	r1, r5
 8002644:	f7fd ff16 	bl	8000474 <__aeabi_dsub>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4614      	mov	r4, r2
 800264e:	461d      	mov	r5, r3
 8002650:	4b4e      	ldr	r3, [pc, #312]	@ (800278c <MOTOR_FOCtask+0x400>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe f86d 	bl	8000734 <__aeabi_f2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4620      	mov	r0, r4
 8002660:	4629      	mov	r1, r5
 8002662:	f7fd fdd9 	bl	8000218 <__aeabi_dmul>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fe f989 	bl	8000984 <__aeabi_d2f>
 8002672:	4602      	mov	r2, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    m->newb = (sin(convAngle) * outSigID + cos(convAngle) * outSigIQ) * motorVoltage;
 800267a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800267c:	f7fe f85a 	bl	8000734 <__aeabi_f2d>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	ec43 2b10 	vmov	d0, r2, r3
 8002688:	f007 fdd6 	bl	800a238 <sin>
 800268c:	ec55 4b10 	vmov	r4, r5, d0
 8002690:	69b8      	ldr	r0, [r7, #24]
 8002692:	f7fe f84f 	bl	8000734 <__aeabi_f2d>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4620      	mov	r0, r4
 800269c:	4629      	mov	r1, r5
 800269e:	f7fd fdbb 	bl	8000218 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4614      	mov	r4, r2
 80026a8:	461d      	mov	r5, r3
 80026aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026ac:	f7fe f842 	bl	8000734 <__aeabi_f2d>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	ec43 2b10 	vmov	d0, r2, r3
 80026b8:	f007 fd6a 	bl	800a190 <cos>
 80026bc:	ec59 8b10 	vmov	r8, r9, d0
 80026c0:	6978      	ldr	r0, [r7, #20]
 80026c2:	f7fe f837 	bl	8000734 <__aeabi_f2d>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4640      	mov	r0, r8
 80026cc:	4649      	mov	r1, r9
 80026ce:	f7fd fda3 	bl	8000218 <__aeabi_dmul>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4620      	mov	r0, r4
 80026d8:	4629      	mov	r1, r5
 80026da:	f7fd fecd 	bl	8000478 <__adddf3>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4614      	mov	r4, r2
 80026e4:	461d      	mov	r5, r3
 80026e6:	4b29      	ldr	r3, [pc, #164]	@ (800278c <MOTOR_FOCtask+0x400>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe f822 	bl	8000734 <__aeabi_f2d>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4620      	mov	r0, r4
 80026f6:	4629      	mov	r1, r5
 80026f8:	f7fd fd8e 	bl	8000218 <__aeabi_dmul>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe f93e 	bl	8000984 <__aeabi_d2f>
 8002708:	4602      	mov	r2, r0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

    float tempU, tempV, tempW;

    // Space Vector PWM modulation
    svpwm(m, m->newa, m->newb, &tempU, &tempV, &tempW);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	f107 020c 	add.w	r2, r7, #12
 8002724:	f107 0110 	add.w	r1, r7, #16
 8002728:	eef0 0a47 	vmov.f32	s1, s14
 800272c:	eeb0 0a67 	vmov.f32	s0, s15
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f8cb 	bl	80028cc <svpwm>

    // Limit duty cycles to valid range [0, 0.577]
    tempU = fmaxf(0.0f, fminf(tempU, 0.577f));
 8002736:	edd7 7a04 	vldr	s15, [r7, #16]
 800273a:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8002790 <MOTOR_FOCtask+0x404>
 800273e:	eeb0 0a67 	vmov.f32	s0, s15
 8002742:	f007 fe4e 	bl	800a3e2 <fminf>
 8002746:	eef0 7a40 	vmov.f32	s15, s0
 800274a:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8002794 <MOTOR_FOCtask+0x408>
 800274e:	eeb0 0a67 	vmov.f32	s0, s15
 8002752:	f007 fe29 	bl	800a3a8 <fmaxf>
 8002756:	eef0 7a40 	vmov.f32	s15, s0
 800275a:	edc7 7a04 	vstr	s15, [r7, #16]
    tempV = fmaxf(0.0f, fminf(tempV, 0.577f));
 800275e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002762:	e01b      	b.n	800279c <MOTOR_FOCtask+0x410>
 8002764:	20000048 	.word	0x20000048
 8002768:	43340000 	.word	0x43340000
 800276c:	3f13cd3a 	.word	0x3f13cd3a
 8002770:	3a83126f 	.word	0x3a83126f
 8002774:	362d2410 	.word	0x362d2410
 8002778:	20000b50 	.word	0x20000b50
 800277c:	3456bf95 	.word	0x3456bf95
 8002780:	34a10fb0 	.word	0x34a10fb0
 8002784:	20000b54 	.word	0x20000b54
 8002788:	34617c5c 	.word	0x34617c5c
 800278c:	20000044 	.word	0x20000044
 8002790:	3f13b646 	.word	0x3f13b646
 8002794:	00000000 	.word	0x00000000
 8002798:	443f4000 	.word	0x443f4000
 800279c:	ed5f 0a04 	vldr	s1, [pc, #-16]	@ 8002790 <MOTOR_FOCtask+0x404>
 80027a0:	eeb0 0a67 	vmov.f32	s0, s15
 80027a4:	f007 fe1d 	bl	800a3e2 <fminf>
 80027a8:	eef0 7a40 	vmov.f32	s15, s0
 80027ac:	ed5f 0a07 	vldr	s1, [pc, #-28]	@ 8002794 <MOTOR_FOCtask+0x408>
 80027b0:	eeb0 0a67 	vmov.f32	s0, s15
 80027b4:	f007 fdf8 	bl	800a3a8 <fmaxf>
 80027b8:	eef0 7a40 	vmov.f32	s15, s0
 80027bc:	edc7 7a03 	vstr	s15, [r7, #12]
    tempW = fmaxf(0.0f, fminf(tempW, 0.577f));
 80027c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c4:	ed5f 0a0e 	vldr	s1, [pc, #-56]	@ 8002790 <MOTOR_FOCtask+0x404>
 80027c8:	eeb0 0a67 	vmov.f32	s0, s15
 80027cc:	f007 fe09 	bl	800a3e2 <fminf>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	ed5f 0a11 	vldr	s1, [pc, #-68]	@ 8002794 <MOTOR_FOCtask+0x408>
 80027d8:	eeb0 0a67 	vmov.f32	s0, s15
 80027dc:	f007 fde4 	bl	800a3a8 <fmaxf>
 80027e0:	eef0 7a40 	vmov.f32	s15, s0
 80027e4:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate final duty cycles
    m->U_dutyCycle = tempU * m->dutyCycle;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	ed93 7a37 	vldr	s14, [r3, #220]	@ 0xdc
 80027ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
    m->V_dutyCycle = tempV * m->dutyCycle;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	ed93 7a37 	vldr	s14, [r3, #220]	@ 0xdc
 8002802:	edd7 7a03 	vldr	s15, [r7, #12]
 8002806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
    m->W_dutyCycle = tempW * m->dutyCycle;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	ed93 7a37 	vldr	s14, [r3, #220]	@ 0xdc
 8002816:	edd7 7a02 	vldr	s15, [r7, #8]
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98

    // Update PWM compare registers
    m->pwm->Instance->CCR1 = round(ARR * m->U_dutyCycle);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800282a:	ed1f 7a25 	vldr	s14, [pc, #-148]	@ 8002798 <MOTOR_FOCtask+0x40c>
 800282e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002832:	ee17 0a90 	vmov	r0, s15
 8002836:	f7fd ff7d 	bl	8000734 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	ec43 2b10 	vmov	d0, r2, r3
 8002842:	f007 fe0b 	bl	800a45c <round>
 8002846:	ec51 0b10 	vmov	r0, r1, d0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681c      	ldr	r4, [r3, #0]
 8002850:	f7fe f878 	bl	8000944 <__aeabi_d2uiz>
 8002854:	4603      	mov	r3, r0
 8002856:	6363      	str	r3, [r4, #52]	@ 0x34
    m->pwm->Instance->CCR4 = round(ARR * m->V_dutyCycle);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 800285e:	ed1f 7a32 	vldr	s14, [pc, #-200]	@ 8002798 <MOTOR_FOCtask+0x40c>
 8002862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002866:	ee17 0a90 	vmov	r0, s15
 800286a:	f7fd ff63 	bl	8000734 <__aeabi_f2d>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	ec43 2b10 	vmov	d0, r2, r3
 8002876:	f007 fdf1 	bl	800a45c <round>
 800287a:	ec51 0b10 	vmov	r0, r1, d0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681c      	ldr	r4, [r3, #0]
 8002884:	f7fe f85e 	bl	8000944 <__aeabi_d2uiz>
 8002888:	4603      	mov	r3, r0
 800288a:	6423      	str	r3, [r4, #64]	@ 0x40
    m->pwm->Instance->CCR3 = round(ARR * m->W_dutyCycle);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8002892:	ed1f 7a3f 	vldr	s14, [pc, #-252]	@ 8002798 <MOTOR_FOCtask+0x40c>
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	ee17 0a90 	vmov	r0, s15
 800289e:	f7fd ff49 	bl	8000734 <__aeabi_f2d>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	ec43 2b10 	vmov	d0, r2, r3
 80028aa:	f007 fdd7 	bl	800a45c <round>
 80028ae:	ec51 0b10 	vmov	r0, r1, d0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681c      	ldr	r4, [r3, #0]
 80028b8:	f7fe f844 	bl	8000944 <__aeabi_d2uiz>
 80028bc:	4603      	mov	r3, r0
 80028be:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80028c0:	e000      	b.n	80028c4 <MOTOR_FOCtask+0x538>
    	return;
 80028c2:	bf00      	nop
}
 80028c4:	3728      	adds	r7, #40	@ 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080028cc <svpwm>:

void svpwm(motor_t * m, float V_alpha, float V_beta, float* D_a, float* D_b, float* D_c) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	ed2d 8b02 	vpush	{d8}
 80028d2:	b08a      	sub	sp, #40	@ 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6178      	str	r0, [r7, #20]
 80028d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80028dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
    // Calculate the magnitude of the voltage vector
    m->V_magnitude = sqrtf(V_alpha * V_alpha + V_beta * V_beta);
 80028e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80028ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fa:	eeb0 0a67 	vmov.f32	s0, s15
 80028fe:	f007 fcf1 	bl	800a2e4 <sqrtf>
 8002902:	eef0 7a40 	vmov.f32	s15, s0
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c

    // Calculate flux angle and convert to degrees
    m->fluxAngle = atan2f(V_beta, V_alpha);
 800290c:	edd7 0a04 	vldr	s1, [r7, #16]
 8002910:	ed97 0a03 	vldr	s0, [r7, #12]
 8002914:	f007 fce4 	bl	800a2e0 <atan2f>
 8002918:	eef0 7a40 	vmov.f32	s15, s0
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
    m->convFlux = m->fluxAngle * 180.0f / pi;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002928:	ed9f 7adf 	vldr	s14, [pc, #892]	@ 8002ca8 <svpwm+0x3dc>
 800292c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002930:	4bd9      	ldr	r3, [pc, #868]	@ (8002c98 <svpwm+0x3cc>)
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88

    float convAngle = m->angle * pi / 180.0f;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8002946:	4bd4      	ldr	r3, [pc, #848]	@ (8002c98 <svpwm+0x3cc>)
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002950:	eddf 6ad5 	vldr	s13, [pc, #852]	@ 8002ca8 <svpwm+0x3dc>
 8002954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002958:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate switching times T1 and T2 based on sector
    float T1, T2;
    if (m->angle < 60.0f) {
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002962:	ed9f 7acf 	vldr	s14, [pc, #828]	@ 8002ca0 <svpwm+0x3d4>
 8002966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	d525      	bpl.n	80029bc <svpwm+0xf0>
        T1 = m->V_magnitude  * cosf(convAngle);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002976:	ed97 0a07 	vldr	s0, [r7, #28]
 800297a:	f007 fcd1 	bl	800a320 <cosf>
 800297e:	eef0 7a40 	vmov.f32	s15, s0
 8002982:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002986:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((pi / 3.0f) - convAngle);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002990:	4bc1      	ldr	r3, [pc, #772]	@ (8002c98 <svpwm+0x3cc>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800299a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800299e:	edd7 7a07 	vldr	s15, [r7, #28]
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a6:	eeb0 0a67 	vmov.f32	s0, s15
 80029aa:	f007 fcb9 	bl	800a320 <cosf>
 80029ae:	eef0 7a40 	vmov.f32	s15, s0
 80029b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80029b6:	edc7 7a08 	vstr	s15, [r7, #32]
 80029ba:	e129      	b.n	8002c10 <svpwm+0x344>
    } else if (m->angle < 120.0f) {
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80029c2:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002ca4 <svpwm+0x3d8>
 80029c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	d532      	bpl.n	8002a36 <svpwm+0x16a>
        T1 = m->V_magnitude  * cosf(convAngle - pi / 3.0f);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 80029d6:	4bb0      	ldr	r3, [pc, #704]	@ (8002c98 <svpwm+0x3cc>)
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80029e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80029e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ec:	eeb0 0a67 	vmov.f32	s0, s15
 80029f0:	f007 fc96 	bl	800a320 <cosf>
 80029f4:	eef0 7a40 	vmov.f32	s15, s0
 80029f8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80029fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((2.0f * pi / 3.0f) - convAngle);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002a06:	4ba4      	ldr	r3, [pc, #656]	@ (8002c98 <svpwm+0x3cc>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a10:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002a14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a18:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a20:	eeb0 0a67 	vmov.f32	s0, s15
 8002a24:	f007 fc7c 	bl	800a320 <cosf>
 8002a28:	eef0 7a40 	vmov.f32	s15, s0
 8002a2c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002a30:	edc7 7a08 	vstr	s15, [r7, #32]
 8002a34:	e0ec      	b.n	8002c10 <svpwm+0x344>
    } else if (m->angle < 180.0f) {
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002a3c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002ca8 <svpwm+0x3dc>
 8002a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	d532      	bpl.n	8002ab0 <svpwm+0x1e4>
        T1 = m->V_magnitude  * cosf(convAngle - 2.0f * pi / 3.0f);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002a50:	4b91      	ldr	r3, [pc, #580]	@ (8002c98 <svpwm+0x3cc>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a5a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a62:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6e:	f007 fc57 	bl	800a320 <cosf>
 8002a72:	eef0 7a40 	vmov.f32	s15, s0
 8002a76:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002a7a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((pi / 3.0f) - convAngle);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002a84:	4b84      	ldr	r3, [pc, #528]	@ (8002c98 <svpwm+0x3cc>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002a8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9e:	f007 fc3f 	bl	800a320 <cosf>
 8002aa2:	eef0 7a40 	vmov.f32	s15, s0
 8002aa6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002aaa:	edc7 7a08 	vstr	s15, [r7, #32]
 8002aae:	e0af      	b.n	8002c10 <svpwm+0x344>
    } else if (m->angle < 240.0f) {
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002ab6:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002cac <svpwm+0x3e0>
 8002aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	d530      	bpl.n	8002b26 <svpwm+0x25a>
        T1 = m->V_magnitude  * cosf(convAngle - pi);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002aca:	4b73      	ldr	r3, [pc, #460]	@ (8002c98 <svpwm+0x3cc>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8002adc:	f007 fc20 	bl	800a320 <cosf>
 8002ae0:	eef0 7a40 	vmov.f32	s15, s0
 8002ae4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002ae8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((4.0f * pi / 3.0f) - convAngle);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002af2:	4b69      	ldr	r3, [pc, #420]	@ (8002c98 <svpwm+0x3cc>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b00:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002b04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b08:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b10:	eeb0 0a67 	vmov.f32	s0, s15
 8002b14:	f007 fc04 	bl	800a320 <cosf>
 8002b18:	eef0 7a40 	vmov.f32	s15, s0
 8002b1c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b20:	edc7 7a08 	vstr	s15, [r7, #32]
 8002b24:	e074      	b.n	8002c10 <svpwm+0x344>
    } else if (m->angle < 300.0f) {
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002b2c:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002c9c <svpwm+0x3d0>
 8002b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d538      	bpl.n	8002bac <svpwm+0x2e0>
        T1 = m->V_magnitude  * cosf(convAngle - 4.0f * pi / 3.0f);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002b40:	4b55      	ldr	r3, [pc, #340]	@ (8002c98 <svpwm+0x3cc>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002b4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b4e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b56:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b62:	f007 fbdd 	bl	800a320 <cosf>
 8002b66:	eef0 7a40 	vmov.f32	s15, s0
 8002b6a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((5.0f * pi / 3.0f) - convAngle);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002b78:	4b47      	ldr	r3, [pc, #284]	@ (8002c98 <svpwm+0x3cc>)
 8002b7a:	edd3 7a00 	vldr	s15, [r3]
 8002b7e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b86:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002b8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b96:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9a:	f007 fbc1 	bl	800a320 <cosf>
 8002b9e:	eef0 7a40 	vmov.f32	s15, s0
 8002ba2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002ba6:	edc7 7a08 	vstr	s15, [r7, #32]
 8002baa:	e031      	b.n	8002c10 <svpwm+0x344>
    } else {
        T1 = m->V_magnitude  * cosf(convAngle - 5.0f * pi / 3.0f);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002bb2:	4b39      	ldr	r3, [pc, #228]	@ (8002c98 <svpwm+0x3cc>)
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bc0:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd4:	f007 fba4 	bl	800a320 <cosf>
 8002bd8:	eef0 7a40 	vmov.f32	s15, s0
 8002bdc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002be0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((2.0f * pi) - convAngle);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	ed93 8a27 	vldr	s16, [r3, #156]	@ 0x9c
 8002bea:	4b2b      	ldr	r3, [pc, #172]	@ (8002c98 <svpwm+0x3cc>)
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002bf4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002c00:	f007 fb8e 	bl	800a320 <cosf>
 8002c04:	eef0 7a40 	vmov.f32	s15, s0
 8002c08:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c0c:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    // Calculate T0 (zero vector time)
    float T0 = 1.0f - T1 - T2;
 8002c10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c24:	edc7 7a06 	vstr	s15, [r7, #24]

    if(m->dir){
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 812e 	beq.w	8002e90 <svpwm+0x5c4>
		// Calculate duty cycles based on sector
		if (m->angle < 60.0f) {
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002c3a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002ca0 <svpwm+0x3d4>
 8002c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c46:	d533      	bpl.n	8002cb0 <svpwm+0x3e4>
			*D_a = (T1 + T2 + T0) / 2.0f;
 8002c48:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002c4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c54:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c5c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T2 + T0) / 2.0f;
 8002c6a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c76:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	edc3 7a00 	vstr	s15, [r3]
			*D_c = T0 / 2.0f;
 8002c84:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c88:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
			*D_c = (T2 + T0) / 2.0f;

		}
    }
}
 8002c96:	e21c      	b.n	80030d2 <svpwm+0x806>
 8002c98:	20000048 	.word	0x20000048
 8002c9c:	43960000 	.word	0x43960000
 8002ca0:	42700000 	.word	0x42700000
 8002ca4:	42f00000 	.word	0x42f00000
 8002ca8:	43340000 	.word	0x43340000
 8002cac:	43700000 	.word	0x43700000
		} else if (m->angle < 120.0f) {
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002cb6:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8002ca4 <svpwm+0x3d8>
 8002cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc2:	d527      	bpl.n	8002d14 <svpwm+0x448>
			*D_a = (T1 + T0) / 2.0f;
 8002cc4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002cc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
 8002cde:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002ce2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cea:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cf2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
			*D_c = T0 / 2.0f;
 8002d00:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d04:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	edc3 7a00 	vstr	s15, [r3]
}
 8002d12:	e1de      	b.n	80030d2 <svpwm+0x806>
		} else if (m->angle < 180.0f) {
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002d1a:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 8002ca8 <svpwm+0x3dc>
 8002d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d26:	d527      	bpl.n	8002d78 <svpwm+0x4ac>
			*D_a = T0 / 2.0f;
 8002d28:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d2c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
 8002d3a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d46:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T2 + T0) / 2.0f;
 8002d5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d60:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d68:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	edc3 7a00 	vstr	s15, [r3]
}
 8002d76:	e1ac      	b.n	80030d2 <svpwm+0x806>
		} else if (m->angle < 240.0f) {
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002d7e:	ed1f 7a35 	vldr	s14, [pc, #-212]	@ 8002cac <svpwm+0x3e0>
 8002d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	d527      	bpl.n	8002ddc <svpwm+0x510>
			*D_a = T0 / 2.0f;
 8002d8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d90:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T0) / 2.0f;
 8002d9e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002da2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002da6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002daa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T2 + T0) / 2.0f;
 8002db8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002dbc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dcc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	edc3 7a00 	vstr	s15, [r3]
}
 8002dda:	e17a      	b.n	80030d2 <svpwm+0x806>
		} else if (m->angle < 300.0f) {
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002de2:	ed1f 7a52 	vldr	s14, [pc, #-328]	@ 8002c9c <svpwm+0x3d0>
 8002de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dee:	d527      	bpl.n	8002e40 <svpwm+0x574>
			*D_a = (T2 + T0) / 2.0f;
 8002df0:	ed97 7a08 	vldr	s14, [r7, #32]
 8002df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dfc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	edc3 7a00 	vstr	s15, [r3]
			*D_b = T0 / 2.0f;
 8002e0a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e0e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T2 + T0) / 2.0f;
 8002e1c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e20:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e28:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e30:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	edc3 7a00 	vstr	s15, [r3]
}
 8002e3e:	e148      	b.n	80030d2 <svpwm+0x806>
			*D_a = (T1 + T2 + T0) / 2.0f;
 8002e40:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e44:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e54:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	edc3 7a00 	vstr	s15, [r3]
			*D_b = T0 / 2.0f;
 8002e62:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e66:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T0) / 2.0f;
 8002e74:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e78:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	edc3 7a00 	vstr	s15, [r3]
}
 8002e8e:	e120      	b.n	80030d2 <svpwm+0x806>
		if (m->angle < 60.0f) {
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002e96:	ed1f 7a7e 	vldr	s14, [pc, #-504]	@ 8002ca0 <svpwm+0x3d4>
 8002e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea2:	d527      	bpl.n	8002ef4 <svpwm+0x628>
			*D_a = T0 / 2.0f;
 8002ea4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ea8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002eac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T0) / 2.0f;
 8002eb6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002eba:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T2 + T0) / 2.0f;
 8002ed0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002ed4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002edc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ee8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	edc3 7a00 	vstr	s15, [r3]
}
 8002ef2:	e0ee      	b.n	80030d2 <svpwm+0x806>
		} else if (m->angle < 120.0f) {
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002efa:	ed1f 7a96 	vldr	s14, [pc, #-600]	@ 8002ca4 <svpwm+0x3d8>
 8002efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	d527      	bpl.n	8002f58 <svpwm+0x68c>
			*D_a = (T2 + T0) / 2.0f;
 8002f08:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f14:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	edc3 7a00 	vstr	s15, [r3]
			*D_b = T0 / 2.0f;
 8002f22:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f26:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T2 + T0) / 2.0f;
 8002f34:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f40:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f48:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	edc3 7a00 	vstr	s15, [r3]
}
 8002f56:	e0bc      	b.n	80030d2 <svpwm+0x806>
		} else if (m->angle < 180.0f) {
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002f5e:	ed1f 7aae 	vldr	s14, [pc, #-696]	@ 8002ca8 <svpwm+0x3dc>
 8002f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	d527      	bpl.n	8002fbc <svpwm+0x6f0>
			*D_a = (T1 + T2 + T0) / 2.0f;
 8002f6c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002f70:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f78:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f80:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
			*D_b = T0 / 2.0f;
 8002f8e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f92:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T0) / 2.0f;
 8002fa0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002fa4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	edc3 7a00 	vstr	s15, [r3]
}
 8002fba:	e08a      	b.n	80030d2 <svpwm+0x806>
		} else if (m->angle < 240.0f) {
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002fc2:	ed1f 7ac6 	vldr	s14, [pc, #-792]	@ 8002cac <svpwm+0x3e0>
 8002fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fce:	d527      	bpl.n	8003020 <svpwm+0x754>
			*D_a = (T1 + T2 + T0) / 2.0f;
 8002fd0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002fd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fe4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T2 + T0) / 2.0f;
 8002ff2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ff6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ffe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	edc3 7a00 	vstr	s15, [r3]
			*D_c = T0 / 2.0f;
 800300c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003010:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	edc3 7a00 	vstr	s15, [r3]
}
 800301e:	e058      	b.n	80030d2 <svpwm+0x806>
		} else if (m->angle < 300.0f) {
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003026:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80030e0 <svpwm+0x814>
 800302a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003032:	d527      	bpl.n	8003084 <svpwm+0x7b8>
			*D_a = (T1 + T0) / 2.0f;
 8003034:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003038:	edd7 7a06 	vldr	s15, [r7, #24]
 800303c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003040:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
 800304e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003052:	edd7 7a08 	vldr	s15, [r7, #32]
 8003056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800305a:	edd7 7a06 	vldr	s15, [r7, #24]
 800305e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003062:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	edc3 7a00 	vstr	s15, [r3]
			*D_c = T0 / 2.0f;
 8003070:	ed97 7a06 	vldr	s14, [r7, #24]
 8003074:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	edc3 7a00 	vstr	s15, [r3]
}
 8003082:	e026      	b.n	80030d2 <svpwm+0x806>
			*D_a = T0 / 2.0f;
 8003084:	ed97 7a06 	vldr	s14, [r7, #24]
 8003088:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800308c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
 8003096:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800309a:	edd7 7a08 	vldr	s15, [r7, #32]
 800309e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80030a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80030ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T2 + T0) / 2.0f;
 80030b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80030bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80030c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80030c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	edc3 7a00 	vstr	s15, [r3]
}
 80030d2:	bf00      	nop
 80030d4:	3728      	adds	r7, #40	@ 0x28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	ecbd 8b02 	vpop	{d8}
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	43960000 	.word	0x43960000

080030e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003128 <HAL_MspInit+0x44>)
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003128 <HAL_MspInit+0x44>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80030f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <HAL_MspInit+0x44>)
 80030f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <HAL_MspInit+0x44>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	4a08      	ldr	r2, [pc, #32]	@ (8003128 <HAL_MspInit+0x44>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310c:	6593      	str	r3, [r2, #88]	@ 0x58
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <HAL_MspInit+0x44>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800311a:	f002 ffb9 	bl	8006090 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000

0800312c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b09c      	sub	sp, #112	@ 0x70
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003144:	f107 0318 	add.w	r3, r7, #24
 8003148:	2244      	movs	r2, #68	@ 0x44
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f006 ffeb 	bl	800a128 <memset>
  if(hadc->Instance==ADC1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800315a:	d169      	bne.n	8003230 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800315c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003160:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003162:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003166:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003168:	f107 0318 	add.w	r3, r7, #24
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fccd 	bl	8006b0c <HAL_RCCEx_PeriphCLKConfig>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003178:	f7fe feda 	bl	8001f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800317c:	4b65      	ldr	r3, [pc, #404]	@ (8003314 <HAL_ADC_MspInit+0x1e8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	4a64      	ldr	r2, [pc, #400]	@ (8003314 <HAL_ADC_MspInit+0x1e8>)
 8003184:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003186:	4b63      	ldr	r3, [pc, #396]	@ (8003314 <HAL_ADC_MspInit+0x1e8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d10b      	bne.n	80031a6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800318e:	4b62      	ldr	r3, [pc, #392]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003192:	4a61      	ldr	r2, [pc, #388]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 8003194:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800319a:	4b5f      	ldr	r3, [pc, #380]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800319e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031b2:	4b59      	ldr	r3, [pc, #356]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 80031be:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 80031c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c4:	2303      	movs	r3, #3
 80031c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031d0:	4619      	mov	r1, r3
 80031d2:	4852      	ldr	r0, [pc, #328]	@ (800331c <HAL_ADC_MspInit+0x1f0>)
 80031d4:	f002 fcee 	bl	8005bb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80031d8:	4b51      	ldr	r3, [pc, #324]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 80031da:	4a52      	ldr	r2, [pc, #328]	@ (8003324 <HAL_ADC_MspInit+0x1f8>)
 80031dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80031de:	4b50      	ldr	r3, [pc, #320]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 80031e0:	2205      	movs	r2, #5
 80031e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031e4:	4b4e      	ldr	r3, [pc, #312]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 80031f2:	2280      	movs	r2, #128	@ 0x80
 80031f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 80031f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031fe:	4b48      	ldr	r3, [pc, #288]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 8003200:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003204:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003206:	4b46      	ldr	r3, [pc, #280]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 8003208:	2220      	movs	r2, #32
 800320a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800320c:	4b44      	ldr	r3, [pc, #272]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 800320e:	2200      	movs	r2, #0
 8003210:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003212:	4843      	ldr	r0, [pc, #268]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 8003214:	f002 fa5c 	bl	80056d0 <HAL_DMA_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800321e:	f7fe fe87 	bl	8001f30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a3e      	ldr	r2, [pc, #248]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54
 8003228:	4a3d      	ldr	r2, [pc, #244]	@ (8003320 <HAL_ADC_MspInit+0x1f4>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800322e:	e06d      	b.n	800330c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a3c      	ldr	r2, [pc, #240]	@ (8003328 <HAL_ADC_MspInit+0x1fc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d168      	bne.n	800330c <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800323a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003240:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003244:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003246:	f107 0318 	add.w	r3, r7, #24
 800324a:	4618      	mov	r0, r3
 800324c:	f003 fc5e 	bl	8006b0c <HAL_RCCEx_PeriphCLKConfig>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8003256:	f7fe fe6b 	bl	8001f30 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800325a:	4b2e      	ldr	r3, [pc, #184]	@ (8003314 <HAL_ADC_MspInit+0x1e8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	4a2c      	ldr	r2, [pc, #176]	@ (8003314 <HAL_ADC_MspInit+0x1e8>)
 8003262:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003264:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <HAL_ADC_MspInit+0x1e8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10b      	bne.n	8003284 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800326c:	4b2a      	ldr	r3, [pc, #168]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 800326e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003270:	4a29      	ldr	r2, [pc, #164]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 8003272:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003278:	4b27      	ldr	r3, [pc, #156]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 800327a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003284:	4b24      	ldr	r3, [pc, #144]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 8003286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003288:	4a23      	ldr	r2, [pc, #140]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003290:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <HAL_ADC_MspInit+0x1ec>)
 8003292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800329c:	2303      	movs	r3, #3
 800329e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a0:	2303      	movs	r3, #3
 80032a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80032ac:	4619      	mov	r1, r3
 80032ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032b2:	f002 fc7f 	bl	8005bb4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80032b6:	4b1d      	ldr	r3, [pc, #116]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003330 <HAL_ADC_MspInit+0x204>)
 80032ba:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80032bc:	4b1b      	ldr	r3, [pc, #108]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032be:	2224      	movs	r2, #36	@ 0x24
 80032c0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032c2:	4b1a      	ldr	r3, [pc, #104]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c8:	4b18      	ldr	r3, [pc, #96]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80032ce:	4b17      	ldr	r3, [pc, #92]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032d0:	2280      	movs	r2, #128	@ 0x80
 80032d2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032d4:	4b15      	ldr	r3, [pc, #84]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032da:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032dc:	4b13      	ldr	r3, [pc, #76]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032e2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80032e4:	4b11      	ldr	r3, [pc, #68]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032e6:	2220      	movs	r2, #32
 80032e8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80032ea:	4b10      	ldr	r3, [pc, #64]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80032f0:	480e      	ldr	r0, [pc, #56]	@ (800332c <HAL_ADC_MspInit+0x200>)
 80032f2:	f002 f9ed 	bl	80056d0 <HAL_DMA_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80032fc:	f7fe fe18 	bl	8001f30 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <HAL_ADC_MspInit+0x200>)
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
 8003306:	4a09      	ldr	r2, [pc, #36]	@ (800332c <HAL_ADC_MspInit+0x200>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800330c:	bf00      	nop
 800330e:	3770      	adds	r7, #112	@ 0x70
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000b5c 	.word	0x20000b5c
 8003318:	40021000 	.word	0x40021000
 800331c:	48000400 	.word	0x48000400
 8003320:	20000654 	.word	0x20000654
 8003324:	40020008 	.word	0x40020008
 8003328:	50000100 	.word	0x50000100
 800332c:	200006b4 	.word	0x200006b4
 8003330:	4002001c 	.word	0x4002001c

08003334 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a18      	ldr	r2, [pc, #96]	@ (80033b4 <HAL_COMP_MspInit+0x80>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d129      	bne.n	80033aa <HAL_COMP_MspInit+0x76>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003356:	4b18      	ldr	r3, [pc, #96]	@ (80033b8 <HAL_COMP_MspInit+0x84>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800335a:	4a17      	ldr	r2, [pc, #92]	@ (80033b8 <HAL_COMP_MspInit+0x84>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003362:	4b15      	ldr	r3, [pc, #84]	@ (80033b8 <HAL_COMP_MspInit+0x84>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PA2     ------> COMP2_OUT
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800336e:	2304      	movs	r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP2;
 800337e:	2308      	movs	r3, #8
 8003380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	f107 030c 	add.w	r3, r7, #12
 8003386:	4619      	mov	r1, r3
 8003388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800338c:	f002 fc12 	bl	8005bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003390:	2380      	movs	r3, #128	@ 0x80
 8003392:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003394:	2303      	movs	r3, #3
 8003396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	4619      	mov	r1, r3
 80033a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033a6:	f002 fc05 	bl	8005bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80033aa:	bf00      	nop
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40010204 	.word	0x40010204
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08e      	sub	sp, #56	@ 0x38
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003508 <HAL_SPI_MspInit+0x14c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d145      	bne.n	800346a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033de:	4b4b      	ldr	r3, [pc, #300]	@ (800350c <HAL_SPI_MspInit+0x150>)
 80033e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e2:	4a4a      	ldr	r2, [pc, #296]	@ (800350c <HAL_SPI_MspInit+0x150>)
 80033e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80033ea:	4b48      	ldr	r3, [pc, #288]	@ (800350c <HAL_SPI_MspInit+0x150>)
 80033ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	4b45      	ldr	r3, [pc, #276]	@ (800350c <HAL_SPI_MspInit+0x150>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fa:	4a44      	ldr	r2, [pc, #272]	@ (800350c <HAL_SPI_MspInit+0x150>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003402:	4b42      	ldr	r3, [pc, #264]	@ (800350c <HAL_SPI_MspInit+0x150>)
 8003404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340e:	4b3f      	ldr	r3, [pc, #252]	@ (800350c <HAL_SPI_MspInit+0x150>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003412:	4a3e      	ldr	r2, [pc, #248]	@ (800350c <HAL_SPI_MspInit+0x150>)
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800341a:	4b3c      	ldr	r3, [pc, #240]	@ (800350c <HAL_SPI_MspInit+0x150>)
 800341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003426:	2360      	movs	r3, #96	@ 0x60
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003436:	2305      	movs	r3, #5
 8003438:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800343e:	4619      	mov	r1, r3
 8003440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003444:	f002 fbb6 	bl	8005bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003448:	2320      	movs	r3, #32
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003458:	2305      	movs	r3, #5
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003460:	4619      	mov	r1, r3
 8003462:	482b      	ldr	r0, [pc, #172]	@ (8003510 <HAL_SPI_MspInit+0x154>)
 8003464:	f002 fba6 	bl	8005bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003468:	e049      	b.n	80034fe <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a29      	ldr	r2, [pc, #164]	@ (8003514 <HAL_SPI_MspInit+0x158>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d144      	bne.n	80034fe <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003474:	4b25      	ldr	r3, [pc, #148]	@ (800350c <HAL_SPI_MspInit+0x150>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	4a24      	ldr	r2, [pc, #144]	@ (800350c <HAL_SPI_MspInit+0x150>)
 800347a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800347e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003480:	4b22      	ldr	r3, [pc, #136]	@ (800350c <HAL_SPI_MspInit+0x150>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800348c:	4b1f      	ldr	r3, [pc, #124]	@ (800350c <HAL_SPI_MspInit+0x150>)
 800348e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003490:	4a1e      	ldr	r2, [pc, #120]	@ (800350c <HAL_SPI_MspInit+0x150>)
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003498:	4b1c      	ldr	r3, [pc, #112]	@ (800350c <HAL_SPI_MspInit+0x150>)
 800349a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a4:	4b19      	ldr	r3, [pc, #100]	@ (800350c <HAL_SPI_MspInit+0x150>)
 80034a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a8:	4a18      	ldr	r2, [pc, #96]	@ (800350c <HAL_SPI_MspInit+0x150>)
 80034aa:	f043 0302 	orr.w	r3, r3, #2
 80034ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034b0:	4b16      	ldr	r3, [pc, #88]	@ (800350c <HAL_SPI_MspInit+0x150>)
 80034b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034ce:	2306      	movs	r3, #6
 80034d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d6:	4619      	mov	r1, r3
 80034d8:	480f      	ldr	r0, [pc, #60]	@ (8003518 <HAL_SPI_MspInit+0x15c>)
 80034da:	f002 fb6b 	bl	8005bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034de:	2310      	movs	r3, #16
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034ee:	2306      	movs	r3, #6
 80034f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034f6:	4619      	mov	r1, r3
 80034f8:	4805      	ldr	r0, [pc, #20]	@ (8003510 <HAL_SPI_MspInit+0x154>)
 80034fa:	f002 fb5b 	bl	8005bb4 <HAL_GPIO_Init>
}
 80034fe:	bf00      	nop
 8003500:	3738      	adds	r7, #56	@ 0x38
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40013000 	.word	0x40013000
 800350c:	40021000 	.word	0x40021000
 8003510:	48000400 	.word	0x48000400
 8003514:	40003c00 	.word	0x40003c00
 8003518:	48000800 	.word	0x48000800

0800351c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a30      	ldr	r2, [pc, #192]	@ (80035ec <HAL_TIM_Base_MspInit+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d114      	bne.n	8003558 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800352e:	4b30      	ldr	r3, [pc, #192]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 8003530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003532:	4a2f      	ldr	r2, [pc, #188]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 8003534:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003538:	6613      	str	r3, [r2, #96]	@ 0x60
 800353a:	4b2d      	ldr	r3, [pc, #180]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 800353c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2100      	movs	r1, #0
 800354a:	201a      	movs	r0, #26
 800354c:	f002 f88b 	bl	8005666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003550:	201a      	movs	r0, #26
 8003552:	f002 f8a2 	bl	800569a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003556:	e044      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a25      	ldr	r2, [pc, #148]	@ (80035f4 <HAL_TIM_Base_MspInit+0xd8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d114      	bne.n	800358c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003562:	4b23      	ldr	r3, [pc, #140]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	4a22      	ldr	r2, [pc, #136]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 8003568:	f043 0320 	orr.w	r3, r3, #32
 800356c:	6593      	str	r3, [r2, #88]	@ 0x58
 800356e:	4b20      	ldr	r3, [pc, #128]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	2037      	movs	r0, #55	@ 0x37
 8003580:	f002 f871 	bl	8005666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003584:	2037      	movs	r0, #55	@ 0x37
 8003586:	f002 f888 	bl	800569a <HAL_NVIC_EnableIRQ>
}
 800358a:	e02a      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a19      	ldr	r2, [pc, #100]	@ (80035f8 <HAL_TIM_Base_MspInit+0xdc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10c      	bne.n	80035b0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003596:	4b16      	ldr	r3, [pc, #88]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 8003598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359a:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 800359c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80035a2:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 80035a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	e018      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM17)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a11      	ldr	r2, [pc, #68]	@ (80035fc <HAL_TIM_Base_MspInit+0xe0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d113      	bne.n	80035e2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80035ba:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 80035bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035be:	4a0c      	ldr	r2, [pc, #48]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 80035c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <HAL_TIM_Base_MspInit+0xd4>)
 80035c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	201a      	movs	r0, #26
 80035d8:	f002 f845 	bl	8005666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80035dc:	201a      	movs	r0, #26
 80035de:	f002 f85c 	bl	800569a <HAL_NVIC_EnableIRQ>
}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40001400 	.word	0x40001400
 80035f8:	40014400 	.word	0x40014400
 80035fc:	40014800 	.word	0x40014800

08003600 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003610:	d10b      	bne.n	800362a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003612:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <HAL_TIM_PWM_MspInit+0x38>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003616:	4a08      	ldr	r2, [pc, #32]	@ (8003638 <HAL_TIM_PWM_MspInit+0x38>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6593      	str	r3, [r2, #88]	@ 0x58
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_TIM_PWM_MspInit+0x38>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000

0800363c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	@ 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a43      	ldr	r2, [pc, #268]	@ (8003768 <HAL_TIM_MspPostInit+0x12c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d130      	bne.n	80036c0 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365e:	4b43      	ldr	r3, [pc, #268]	@ (800376c <HAL_TIM_MspPostInit+0x130>)
 8003660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003662:	4a42      	ldr	r2, [pc, #264]	@ (800376c <HAL_TIM_MspPostInit+0x130>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800366a:	4b40      	ldr	r3, [pc, #256]	@ (800376c <HAL_TIM_MspPostInit+0x130>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8003676:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800367a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003684:	2300      	movs	r3, #0
 8003686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003688:	2306      	movs	r3, #6
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4619      	mov	r1, r3
 8003692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003696:	f002 fa8d 	bl	8005bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800369a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800369e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a0:	2302      	movs	r3, #2
 80036a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80036ac:	230b      	movs	r3, #11
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4619      	mov	r1, r3
 80036b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036ba:	f002 fa7b 	bl	8005bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036be:	e04f      	b.n	8003760 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c8:	d14a      	bne.n	8003760 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ca:	4b28      	ldr	r3, [pc, #160]	@ (800376c <HAL_TIM_MspPostInit+0x130>)
 80036cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ce:	4a27      	ldr	r2, [pc, #156]	@ (800376c <HAL_TIM_MspPostInit+0x130>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036d6:	4b25      	ldr	r3, [pc, #148]	@ (800376c <HAL_TIM_MspPostInit+0x130>)
 80036d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <HAL_TIM_MspPostInit+0x130>)
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	4a21      	ldr	r2, [pc, #132]	@ (800376c <HAL_TIM_MspPostInit+0x130>)
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ee:	4b1f      	ldr	r3, [pc, #124]	@ (800376c <HAL_TIM_MspPostInit+0x130>)
 80036f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036fa:	2308      	movs	r3, #8
 80036fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003706:	2300      	movs	r3, #0
 8003708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800370a:	2301      	movs	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	4619      	mov	r1, r3
 8003714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003718:	f002 fa4c 	bl	8005bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800371c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800372e:	230a      	movs	r3, #10
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	4619      	mov	r1, r3
 8003738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800373c:	f002 fa3a 	bl	8005bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003740:	2308      	movs	r3, #8
 8003742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	2300      	movs	r3, #0
 800374e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003750:	2301      	movs	r3, #1
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4619      	mov	r1, r3
 800375a:	4805      	ldr	r0, [pc, #20]	@ (8003770 <HAL_TIM_MspPostInit+0x134>)
 800375c:	f002 fa2a 	bl	8005bb4 <HAL_GPIO_Init>
}
 8003760:	bf00      	nop
 8003762:	3728      	adds	r7, #40	@ 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40021000 	.word	0x40021000
 8003770:	48000400 	.word	0x48000400

08003774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b09a      	sub	sp, #104	@ 0x68
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800378c:	f107 0310 	add.w	r3, r7, #16
 8003790:	2244      	movs	r2, #68	@ 0x44
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f006 fcc7 	bl	800a128 <memset>
  if(huart->Instance==USART1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1e      	ldr	r2, [pc, #120]	@ (8003818 <HAL_UART_MspInit+0xa4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d135      	bne.n	8003810 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ac:	f107 0310 	add.w	r3, r7, #16
 80037b0:	4618      	mov	r0, r3
 80037b2:	f003 f9ab 	bl	8006b0c <HAL_RCCEx_PeriphCLKConfig>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037bc:	f7fe fbb8 	bl	8001f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037c0:	4b16      	ldr	r3, [pc, #88]	@ (800381c <HAL_UART_MspInit+0xa8>)
 80037c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c4:	4a15      	ldr	r2, [pc, #84]	@ (800381c <HAL_UART_MspInit+0xa8>)
 80037c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80037cc:	4b13      	ldr	r3, [pc, #76]	@ (800381c <HAL_UART_MspInit+0xa8>)
 80037ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d8:	4b10      	ldr	r3, [pc, #64]	@ (800381c <HAL_UART_MspInit+0xa8>)
 80037da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037dc:	4a0f      	ldr	r2, [pc, #60]	@ (800381c <HAL_UART_MspInit+0xa8>)
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037e4:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <HAL_UART_MspInit+0xa8>)
 80037e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037f0:	23c0      	movs	r3, #192	@ 0xc0
 80037f2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f4:	2302      	movs	r3, #2
 80037f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fc:	2300      	movs	r3, #0
 80037fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003800:	2307      	movs	r3, #7
 8003802:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003804:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003808:	4619      	mov	r1, r3
 800380a:	4805      	ldr	r0, [pc, #20]	@ (8003820 <HAL_UART_MspInit+0xac>)
 800380c:	f002 f9d2 	bl	8005bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003810:	bf00      	nop
 8003812:	3768      	adds	r7, #104	@ 0x68
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40013800 	.word	0x40013800
 800381c:	40021000 	.word	0x40021000
 8003820:	48000400 	.word	0x48000400

08003824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003828:	bf00      	nop
 800382a:	e7fd      	b.n	8003828 <NMI_Handler+0x4>

0800382c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <HardFault_Handler+0x4>

08003834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <MemManage_Handler+0x4>

0800383c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <BusFault_Handler+0x4>

08003844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <UsageFault_Handler+0x4>

0800384c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800387a:	f000 f8d3 	bl	8003a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}

08003882 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003886:	2010      	movs	r0, #16
 8003888:	f002 fb46 	bl	8005f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}

08003890 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003894:	4802      	ldr	r0, [pc, #8]	@ (80038a0 <DMA1_Channel1_IRQHandler+0x10>)
 8003896:	f002 f83e 	bl	8005916 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000654 	.word	0x20000654

080038a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80038a8:	4802      	ldr	r0, [pc, #8]	@ (80038b4 <DMA1_Channel2_IRQHandler+0x10>)
 80038aa:	f002 f834 	bl	8005916 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200006b4 	.word	0x200006b4

080038b8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038bc:	4803      	ldr	r0, [pc, #12]	@ (80038cc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80038be:	f004 fcc7 	bl	8008250 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80038c2:	4803      	ldr	r0, [pc, #12]	@ (80038d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80038c4:	f004 fcc4 	bl	8008250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000800 	.word	0x20000800
 80038d0:	20000930 	.word	0x20000930

080038d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80038d8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80038dc:	f002 fb1c 	bl	8005f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80038e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80038e4:	f002 fb18 	bl	8005f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80038e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80038ec:	f002 fb14 	bl	8005f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80038f8:	4802      	ldr	r0, [pc, #8]	@ (8003904 <TIM7_IRQHandler+0x10>)
 80038fa:	f004 fca9 	bl	8008250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000898 	.word	0x20000898

08003908 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <SystemInit+0x20>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003912:	4a05      	ldr	r2, [pc, #20]	@ (8003928 <SystemInit+0x20>)
 8003914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800392c:	480d      	ldr	r0, [pc, #52]	@ (8003964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800392e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003930:	f7ff ffea 	bl	8003908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003934:	480c      	ldr	r0, [pc, #48]	@ (8003968 <LoopForever+0x6>)
  ldr r1, =_edata
 8003936:	490d      	ldr	r1, [pc, #52]	@ (800396c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003938:	4a0d      	ldr	r2, [pc, #52]	@ (8003970 <LoopForever+0xe>)
  movs r3, #0
 800393a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800393c:	e002      	b.n	8003944 <LoopCopyDataInit>

0800393e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800393e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003942:	3304      	adds	r3, #4

08003944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003948:	d3f9      	bcc.n	800393e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800394a:	4a0a      	ldr	r2, [pc, #40]	@ (8003974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800394c:	4c0a      	ldr	r4, [pc, #40]	@ (8003978 <LoopForever+0x16>)
  movs r3, #0
 800394e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003950:	e001      	b.n	8003956 <LoopFillZerobss>

08003952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003954:	3204      	adds	r2, #4

08003956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003958:	d3fb      	bcc.n	8003952 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800395a:	f006 fbf3 	bl	800a144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800395e:	f7fd fb13 	bl	8000f88 <main>

08003962 <LoopForever>:

LoopForever:
    b LoopForever
 8003962:	e7fe      	b.n	8003962 <LoopForever>
  ldr   r0, =_estack
 8003964:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800396c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003970:	0800c7d8 	.word	0x0800c7d8
  ldr r2, =_sbss
 8003974:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003978:	20000c9c 	.word	0x20000c9c

0800397c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800397c:	e7fe      	b.n	800397c <ADC1_2_IRQHandler>

0800397e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003988:	2003      	movs	r0, #3
 800398a:	f001 fe61 	bl	8005650 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800398e:	200f      	movs	r0, #15
 8003990:	f000 f80e 	bl	80039b0 <HAL_InitTick>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	71fb      	strb	r3, [r7, #7]
 800399e:	e001      	b.n	80039a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039a0:	f7ff fba0 	bl	80030e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039a4:	79fb      	ldrb	r3, [r7, #7]

}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80039bc:	4b16      	ldr	r3, [pc, #88]	@ (8003a18 <HAL_InitTick+0x68>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d022      	beq.n	8003a0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80039c4:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <HAL_InitTick+0x6c>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <HAL_InitTick+0x68>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80039d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 fe6c 	bl	80056b6 <HAL_SYSTICK_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10f      	bne.n	8003a04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b0f      	cmp	r3, #15
 80039e8:	d809      	bhi.n	80039fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039ea:	2200      	movs	r2, #0
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	f04f 30ff 	mov.w	r0, #4294967295
 80039f2:	f001 fe38 	bl	8005666 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003a20 <HAL_InitTick+0x70>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e007      	b.n	8003a0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e004      	b.n	8003a0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e001      	b.n	8003a0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000054 	.word	0x20000054
 8003a1c:	2000004c 	.word	0x2000004c
 8003a20:	20000050 	.word	0x20000050

08003a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_IncTick+0x1c>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <HAL_IncTick+0x20>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	4a03      	ldr	r2, [pc, #12]	@ (8003a40 <HAL_IncTick+0x1c>)
 8003a34:	6013      	str	r3, [r2, #0]
}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	20000b60 	.word	0x20000b60
 8003a44:	20000054 	.word	0x20000054

08003a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	@ (8003a5c <HAL_GetTick+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000b60 	.word	0x20000b60

08003a60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	609a      	str	r2, [r3, #8]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3360      	adds	r3, #96	@ 0x60
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <LL_ADC_SetOffset+0x44>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	03fff000 	.word	0x03fff000

08003b10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3360      	adds	r3, #96	@ 0x60
 8003b1e:	461a      	mov	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3360      	adds	r3, #96	@ 0x60
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b087      	sub	sp, #28
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3360      	adds	r3, #96	@ 0x60
 8003b82:	461a      	mov	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3360      	adds	r3, #96	@ 0x60
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	615a      	str	r2, [r3, #20]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3330      	adds	r3, #48	@ 0x30
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	4413      	add	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	211f      	movs	r1, #31
 8003c56:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	401a      	ands	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0e9b      	lsrs	r3, r3, #26
 8003c62:	f003 011f 	and.w	r1, r3, #31
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	431a      	orrs	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b087      	sub	sp, #28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3314      	adds	r3, #20
 8003c92:	461a      	mov	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	0e5b      	lsrs	r3, r3, #25
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	4413      	add	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0d1b      	lsrs	r3, r3, #20
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2107      	movs	r1, #7
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	0d1b      	lsrs	r3, r3, #20
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f003 0318 	and.w	r3, r3, #24
 8003cfa:	4908      	ldr	r1, [pc, #32]	@ (8003d1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003cfc:	40d9      	lsrs	r1, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	400b      	ands	r3, r1
 8003d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	0007ffff 	.word	0x0007ffff

08003d20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003d4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6093      	str	r3, [r2, #8]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d74:	d101      	bne.n	8003d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003d98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dc4:	d101      	bne.n	8003dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003de8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e14:	f043 0202 	orr.w	r2, r3, #2
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <LL_ADC_IsEnabled+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_ADC_IsEnabled+0x1a>
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_IsDisableOngoing+0x18>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_IsDisableOngoing+0x1a>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d101      	bne.n	8003eb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d101      	bne.n	8003eda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b089      	sub	sp, #36	@ 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e167      	b.n	80041d2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff f90b 	bl	800312c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff19 	bl	8003d60 <LL_ADC_IsDeepPowerDownEnabled>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff feff 	bl	8003d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff34 	bl	8003db0 <LL_ADC_IsInternalRegulatorEnabled>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d115      	bne.n	8003f7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff18 	bl	8003d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f58:	4ba0      	ldr	r3, [pc, #640]	@ (80041dc <HAL_ADC_Init+0x2f4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	099b      	lsrs	r3, r3, #6
 8003f5e:	4aa0      	ldr	r2, [pc, #640]	@ (80041e0 <HAL_ADC_Init+0x2f8>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f6c:	e002      	b.n	8003f74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f9      	bne.n	8003f6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ff16 	bl	8003db0 <LL_ADC_IsInternalRegulatorEnabled>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8e:	f043 0210 	orr.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff ff76 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 8003fb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 8100 	bne.w	80041c0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 80fc 	bne.w	80041c0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003fd0:	f043 0202 	orr.w	r2, r3, #2
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff23 	bl	8003e28 <LL_ADC_IsEnabled>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d111      	bne.n	800400c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fe8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003fec:	f7ff ff1c 	bl	8003e28 <LL_ADC_IsEnabled>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	487c      	ldr	r0, [pc, #496]	@ (80041e4 <HAL_ADC_Init+0x2fc>)
 8003ff4:	f7ff ff18 	bl	8003e28 <LL_ADC_IsEnabled>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4323      	orrs	r3, r4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4619      	mov	r1, r3
 8004006:	4878      	ldr	r0, [pc, #480]	@ (80041e8 <HAL_ADC_Init+0x300>)
 8004008:	f7ff fd2a 	bl	8003a60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	7f5b      	ldrb	r3, [r3, #29]
 8004010:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004016:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800401c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004022:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800402a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004036:	2b01      	cmp	r3, #1
 8004038:	d106      	bne.n	8004048 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	3b01      	subs	r3, #1
 8004040:	045b      	lsls	r3, r3, #17
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	4b60      	ldr	r3, [pc, #384]	@ (80041ec <HAL_ADC_Init+0x304>)
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	69b9      	ldr	r1, [r7, #24]
 8004074:	430b      	orrs	r3, r1
 8004076:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ff15 	bl	8003ec2 <LL_ADC_INJ_IsConversionOngoing>
 8004098:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d16d      	bne.n	800417c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d16a      	bne.n	800417c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80040aa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040c2:	f023 0302 	bic.w	r3, r3, #2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	69b9      	ldr	r1, [r7, #24]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80040e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80040f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6911      	ldr	r1, [r2, #16]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	430b      	orrs	r3, r1
 8004102:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004106:	e013      	b.n	8004130 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004116:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004128:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800412c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004136:	2b01      	cmp	r3, #1
 8004138:	d118      	bne.n	800416c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004144:	f023 0304 	bic.w	r3, r3, #4
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004150:	4311      	orrs	r1, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800415c:	430a      	orrs	r2, r1
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	611a      	str	r2, [r3, #16]
 800416a:	e007      	b.n	800417c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d10c      	bne.n	800419e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f023 010f 	bic.w	r1, r3, #15
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	1e5a      	subs	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	631a      	str	r2, [r3, #48]	@ 0x30
 800419c:	e007      	b.n	80041ae <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 020f 	bic.w	r2, r2, #15
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041be:	e007      	b.n	80041d0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c4:	f043 0210 	orr.w	r2, r3, #16
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3724      	adds	r7, #36	@ 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	bf00      	nop
 80041dc:	2000004c 	.word	0x2000004c
 80041e0:	053e2d63 	.word	0x053e2d63
 80041e4:	50000100 	.word	0x50000100
 80041e8:	50000300 	.word	0x50000300
 80041ec:	fff04007 	.word	0xfff04007

080041f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041fc:	4851      	ldr	r0, [pc, #324]	@ (8004344 <HAL_ADC_Start_DMA+0x154>)
 80041fe:	f7ff fd8f 	bl	8003d20 <LL_ADC_GetMultimode>
 8004202:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fe47 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 808f 	bne.w	8004334 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_ADC_Start_DMA+0x34>
 8004220:	2302      	movs	r3, #2
 8004222:	e08a      	b.n	800433a <HAL_ADC_Start_DMA+0x14a>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b05      	cmp	r3, #5
 8004236:	d002      	beq.n	800423e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b09      	cmp	r3, #9
 800423c:	d173      	bne.n	8004326 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fc98 	bl	8004b74 <ADC_Enable>
 8004244:	4603      	mov	r3, r0
 8004246:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d166      	bne.n	800431c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004252:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a38      	ldr	r2, [pc, #224]	@ (8004348 <HAL_ADC_Start_DMA+0x158>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d002      	beq.n	8004272 <HAL_ADC_Start_DMA+0x82>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	e001      	b.n	8004276 <HAL_ADC_Start_DMA+0x86>
 8004272:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	4293      	cmp	r3, r2
 800427c:	d002      	beq.n	8004284 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004288:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d006      	beq.n	80042aa <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a0:	f023 0206 	bic.w	r2, r3, #6
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	661a      	str	r2, [r3, #96]	@ 0x60
 80042a8:	e002      	b.n	80042b0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b4:	4a25      	ldr	r2, [pc, #148]	@ (800434c <HAL_ADC_Start_DMA+0x15c>)
 80042b6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	4a24      	ldr	r2, [pc, #144]	@ (8004350 <HAL_ADC_Start_DMA+0x160>)
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c4:	4a23      	ldr	r2, [pc, #140]	@ (8004354 <HAL_ADC_Start_DMA+0x164>)
 80042c6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	221c      	movs	r2, #28
 80042ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0210 	orr.w	r2, r2, #16
 80042e6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3340      	adds	r3, #64	@ 0x40
 8004302:	4619      	mov	r1, r3
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f001 fa8a 	bl	8005820 <HAL_DMA_Start_IT>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fdad 	bl	8003e74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800431a:	e00d      	b.n	8004338 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004324:	e008      	b.n	8004338 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004332:	e001      	b.n	8004338 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004338:	7dfb      	ldrb	r3, [r7, #23]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	50000300 	.word	0x50000300
 8004348:	50000100 	.word	0x50000100
 800434c:	08004d3f 	.word	0x08004d3f
 8004350:	08004e17 	.word	0x08004e17
 8004354:	08004e33 	.word	0x08004e33

08004358 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b0b6      	sub	sp, #216	@ 0xd8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x22>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e3c8      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x7b4>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fd6a 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 83ad 	bne.w	8004b2a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	f7ff fc24 	bl	8003c2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fd58 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 80043ec:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fd64 	bl	8003ec2 <LL_ADC_INJ_IsConversionOngoing>
 80043fa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004402:	2b00      	cmp	r3, #0
 8004404:	f040 81d9 	bne.w	80047ba <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800440c:	2b00      	cmp	r3, #0
 800440e:	f040 81d4 	bne.w	80047ba <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800441a:	d10f      	bne.n	800443c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2200      	movs	r2, #0
 8004426:	4619      	mov	r1, r3
 8004428:	f7ff fc2b 	bl	8003c82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fbd2 	bl	8003bde <LL_ADC_SetSamplingTimeCommonConfig>
 800443a:	e00e      	b.n	800445a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	461a      	mov	r2, r3
 800444a:	f7ff fc1a 	bl	8003c82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fbc2 	bl	8003bde <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d022      	beq.n	80044c2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	6919      	ldr	r1, [r3, #16]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800448c:	f7ff fb1c 	bl	8003ac8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6919      	ldr	r1, [r3, #16]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	461a      	mov	r2, r3
 800449e:	f7ff fb68 	bl	8003b72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d102      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x124>
 80044b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044b6:	e000      	b.n	80044ba <HAL_ADC_ConfigChannel+0x126>
 80044b8:	2300      	movs	r3, #0
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7ff fb74 	bl	8003ba8 <LL_ADC_SetOffsetSaturation>
 80044c0:	e17b      	b.n	80047ba <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fb21 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x15a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2100      	movs	r1, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fb16 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 80044e4:	4603      	mov	r3, r0
 80044e6:	0e9b      	lsrs	r3, r3, #26
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	e01e      	b.n	800452c <HAL_ADC_ConfigChannel+0x198>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fb0b 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800450c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004510:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800451c:	2320      	movs	r3, #32
 800451e:	e004      	b.n	800452a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x1b0>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	e018      	b.n	8004576 <HAL_ADC_ConfigChannel+0x1e2>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800455c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004568:	2320      	movs	r3, #32
 800456a:	e004      	b.n	8004576 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800456c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004570:	fab3 f383 	clz	r3, r3
 8004574:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004576:	429a      	cmp	r2, r3
 8004578:	d106      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fada 	bl	8003b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2101      	movs	r1, #1
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fabe 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004594:	4603      	mov	r3, r0
 8004596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x220>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fab3 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 80045aa:	4603      	mov	r3, r0
 80045ac:	0e9b      	lsrs	r3, r3, #26
 80045ae:	f003 021f 	and.w	r2, r3, #31
 80045b2:	e01e      	b.n	80045f2 <HAL_ADC_ConfigChannel+0x25e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff faa8 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80045d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80045da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80045e2:	2320      	movs	r3, #32
 80045e4:	e004      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80045e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d105      	bne.n	800460a <HAL_ADC_ConfigChannel+0x276>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	0e9b      	lsrs	r3, r3, #26
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	e018      	b.n	800463c <HAL_ADC_ConfigChannel+0x2a8>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004616:	fa93 f3a3 	rbit	r3, r3
 800461a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800461e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004626:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800462e:	2320      	movs	r3, #32
 8004630:	e004      	b.n	800463c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004632:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800463c:	429a      	cmp	r2, r3
 800463e:	d106      	bne.n	800464e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	2101      	movs	r1, #1
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fa77 	bl	8003b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2102      	movs	r1, #2
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fa5b 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 800465a:	4603      	mov	r3, r0
 800465c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <HAL_ADC_ConfigChannel+0x2e6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fa50 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004670:	4603      	mov	r3, r0
 8004672:	0e9b      	lsrs	r3, r3, #26
 8004674:	f003 021f 	and.w	r2, r3, #31
 8004678:	e01e      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x324>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2102      	movs	r1, #2
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fa45 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004686:	4603      	mov	r3, r0
 8004688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004698:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800469c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80046a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80046a8:	2320      	movs	r3, #32
 80046aa:	e004      	b.n	80046b6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80046ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046b0:	fab3 f383 	clz	r3, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x33c>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	e016      	b.n	80046fe <HAL_ADC_ConfigChannel+0x36a>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80046e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80046e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80046f0:	2320      	movs	r3, #32
 80046f2:	e004      	b.n	80046fe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80046f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046f8:	fab3 f383 	clz	r3, r3
 80046fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046fe:	429a      	cmp	r2, r3
 8004700:	d106      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	2102      	movs	r1, #2
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fa16 	bl	8003b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2103      	movs	r1, #3
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff f9fa 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 800471c:	4603      	mov	r3, r0
 800471e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <HAL_ADC_ConfigChannel+0x3a8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2103      	movs	r1, #3
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff f9ef 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004732:	4603      	mov	r3, r0
 8004734:	0e9b      	lsrs	r3, r3, #26
 8004736:	f003 021f 	and.w	r2, r3, #31
 800473a:	e017      	b.n	800476c <HAL_ADC_ConfigChannel+0x3d8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2103      	movs	r1, #3
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff f9e4 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004748:	4603      	mov	r3, r0
 800474a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800474e:	fa93 f3a3 	rbit	r3, r3
 8004752:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004754:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004756:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800475e:	2320      	movs	r3, #32
 8004760:	e003      	b.n	800476a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004762:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x3f0>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	0e9b      	lsrs	r3, r3, #26
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	e011      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x414>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004794:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800479c:	2320      	movs	r3, #32
 800479e:	e003      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80047a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d106      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2103      	movs	r1, #3
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff f9c1 	bl	8003b3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fb32 	bl	8003e28 <LL_ADC_IsEnabled>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 8140 	bne.w	8004a4c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	461a      	mov	r2, r3
 80047da:	f7ff fa7d 	bl	8003cd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	4a8f      	ldr	r2, [pc, #572]	@ (8004a20 <HAL_ADC_ConfigChannel+0x68c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	f040 8131 	bne.w	8004a4c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x47e>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	0e9b      	lsrs	r3, r3, #26
 8004800:	3301      	adds	r3, #1
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	2b09      	cmp	r3, #9
 8004808:	bf94      	ite	ls
 800480a:	2301      	movls	r3, #1
 800480c:	2300      	movhi	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e019      	b.n	8004846 <HAL_ADC_ConfigChannel+0x4b2>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004820:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004822:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004824:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800482a:	2320      	movs	r3, #32
 800482c:	e003      	b.n	8004836 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800482e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	3301      	adds	r3, #1
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2b09      	cmp	r3, #9
 800483e:	bf94      	ite	ls
 8004840:	2301      	movls	r3, #1
 8004842:	2300      	movhi	r3, #0
 8004844:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004846:	2b00      	cmp	r3, #0
 8004848:	d079      	beq.n	800493e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004852:	2b00      	cmp	r3, #0
 8004854:	d107      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x4d2>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	0e9b      	lsrs	r3, r3, #26
 800485c:	3301      	adds	r3, #1
 800485e:	069b      	lsls	r3, r3, #26
 8004860:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004864:	e015      	b.n	8004892 <HAL_ADC_ConfigChannel+0x4fe>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004876:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800487e:	2320      	movs	r3, #32
 8004880:	e003      	b.n	800488a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	3301      	adds	r3, #1
 800488c:	069b      	lsls	r3, r3, #26
 800488e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x51e>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	0e9b      	lsrs	r3, r3, #26
 80048a4:	3301      	adds	r3, #1
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2101      	movs	r1, #1
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	e017      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x54e>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ba:	fa93 f3a3 	rbit	r3, r3
 80048be:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80048c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80048c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80048ca:	2320      	movs	r3, #32
 80048cc:	e003      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80048ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d0:	fab3 f383 	clz	r3, r3
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	3301      	adds	r3, #1
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f303 	lsl.w	r3, r1, r3
 80048e2:	ea42 0103 	orr.w	r1, r2, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x574>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	0e9b      	lsrs	r3, r3, #26
 80048f8:	3301      	adds	r3, #1
 80048fa:	f003 021f 	and.w	r2, r3, #31
 80048fe:	4613      	mov	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4413      	add	r3, r2
 8004904:	051b      	lsls	r3, r3, #20
 8004906:	e018      	b.n	800493a <HAL_ADC_ConfigChannel+0x5a6>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004918:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800491a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004920:	2320      	movs	r3, #32
 8004922:	e003      	b.n	800492c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	3301      	adds	r3, #1
 800492e:	f003 021f 	and.w	r2, r3, #31
 8004932:	4613      	mov	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800493a:	430b      	orrs	r3, r1
 800493c:	e081      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <HAL_ADC_ConfigChannel+0x5c6>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	0e9b      	lsrs	r3, r3, #26
 8004950:	3301      	adds	r3, #1
 8004952:	069b      	lsls	r3, r3, #26
 8004954:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004958:	e015      	b.n	8004986 <HAL_ADC_ConfigChannel+0x5f2>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004962:	fa93 f3a3 	rbit	r3, r3
 8004966:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004972:	2320      	movs	r3, #32
 8004974:	e003      	b.n	800497e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b2db      	uxtb	r3, r3
 800497e:	3301      	adds	r3, #1
 8004980:	069b      	lsls	r3, r3, #26
 8004982:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x612>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	0e9b      	lsrs	r3, r3, #26
 8004998:	3301      	adds	r3, #1
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2101      	movs	r1, #1
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	e017      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x642>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	61fb      	str	r3, [r7, #28]
  return result;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80049be:	2320      	movs	r3, #32
 80049c0:	e003      	b.n	80049ca <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	fab3 f383 	clz	r3, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2101      	movs	r1, #1
 80049d2:	fa01 f303 	lsl.w	r3, r1, r3
 80049d6:	ea42 0103 	orr.w	r1, r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x66e>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0e9b      	lsrs	r3, r3, #26
 80049ec:	3301      	adds	r3, #1
 80049ee:	f003 021f 	and.w	r2, r3, #31
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	3b1e      	subs	r3, #30
 80049fa:	051b      	lsls	r3, r3, #20
 80049fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a00:	e01e      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x6ac>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	613b      	str	r3, [r7, #16]
  return result;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004a1a:	2320      	movs	r3, #32
 8004a1c:	e006      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x698>
 8004a1e:	bf00      	nop
 8004a20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f003 021f 	and.w	r2, r3, #31
 8004a32:	4613      	mov	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	3b1e      	subs	r3, #30
 8004a3a:	051b      	lsls	r3, r3, #20
 8004a3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7ff f91b 	bl	8003c82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b3f      	ldr	r3, [pc, #252]	@ (8004b50 <HAL_ADC_ConfigChannel+0x7bc>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d071      	beq.n	8004b3c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a58:	483e      	ldr	r0, [pc, #248]	@ (8004b54 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a5a:	f7ff f827 	bl	8003aac <LL_ADC_GetCommonPathInternalCh>
 8004a5e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a3c      	ldr	r2, [pc, #240]	@ (8004b58 <HAL_ADC_ConfigChannel+0x7c4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x6e2>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3a      	ldr	r2, [pc, #232]	@ (8004b5c <HAL_ADC_ConfigChannel+0x7c8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d127      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d121      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a8a:	d157      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a94:	4619      	mov	r1, r3
 8004a96:	482f      	ldr	r0, [pc, #188]	@ (8004b54 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a98:	f7fe fff5 	bl	8003a86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a9c:	4b30      	ldr	r3, [pc, #192]	@ (8004b60 <HAL_ADC_ConfigChannel+0x7cc>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	099b      	lsrs	r3, r3, #6
 8004aa2:	4a30      	ldr	r2, [pc, #192]	@ (8004b64 <HAL_ADC_ConfigChannel+0x7d0>)
 8004aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa8:	099b      	lsrs	r3, r3, #6
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ab6:	e002      	b.n	8004abe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f9      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ac4:	e03a      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a27      	ldr	r2, [pc, #156]	@ (8004b68 <HAL_ADC_ConfigChannel+0x7d4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d113      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10d      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	@ (8004b6c <HAL_ADC_ConfigChannel+0x7d8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d02a      	beq.n	8004b3c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aee:	4619      	mov	r1, r3
 8004af0:	4818      	ldr	r0, [pc, #96]	@ (8004b54 <HAL_ADC_ConfigChannel+0x7c0>)
 8004af2:	f7fe ffc8 	bl	8003a86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004af6:	e021      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1c      	ldr	r2, [pc, #112]	@ (8004b70 <HAL_ADC_ConfigChannel+0x7dc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d11c      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d116      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <HAL_ADC_ConfigChannel+0x7d8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d011      	beq.n	8004b3c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b20:	4619      	mov	r1, r3
 8004b22:	480c      	ldr	r0, [pc, #48]	@ (8004b54 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b24:	f7fe ffaf 	bl	8003a86 <LL_ADC_SetCommonPathInternalCh>
 8004b28:	e008      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b44:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	37d8      	adds	r7, #216	@ 0xd8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	80080000 	.word	0x80080000
 8004b54:	50000300 	.word	0x50000300
 8004b58:	c3210000 	.word	0xc3210000
 8004b5c:	90c00010 	.word	0x90c00010
 8004b60:	2000004c 	.word	0x2000004c
 8004b64:	053e2d63 	.word	0x053e2d63
 8004b68:	c7520000 	.word	0xc7520000
 8004b6c:	50000100 	.word	0x50000100
 8004b70:	cb840000 	.word	0xcb840000

08004b74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff f94f 	bl	8003e28 <LL_ADC_IsEnabled>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d169      	bne.n	8004c64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <ADC_Enable+0xfc>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba2:	f043 0210 	orr.w	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bae:	f043 0201 	orr.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e055      	b.n	8004c66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff f90a 	bl	8003dd8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bc4:	482b      	ldr	r0, [pc, #172]	@ (8004c74 <ADC_Enable+0x100>)
 8004bc6:	f7fe ff71 	bl	8003aac <LL_ADC_GetCommonPathInternalCh>
 8004bca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004bcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bd4:	4b28      	ldr	r3, [pc, #160]	@ (8004c78 <ADC_Enable+0x104>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	099b      	lsrs	r3, r3, #6
 8004bda:	4a28      	ldr	r2, [pc, #160]	@ (8004c7c <ADC_Enable+0x108>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	099b      	lsrs	r3, r3, #6
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	4613      	mov	r3, r2
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bee:	e002      	b.n	8004bf6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f9      	bne.n	8004bf0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004bfc:	f7fe ff24 	bl	8003a48 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c02:	e028      	b.n	8004c56 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f90d 	bl	8003e28 <LL_ADC_IsEnabled>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff f8dd 	bl	8003dd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c1e:	f7fe ff13 	bl	8003a48 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d914      	bls.n	8004c56 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d00d      	beq.n	8004c56 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3e:	f043 0210 	orr.w	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4a:	f043 0201 	orr.w	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e007      	b.n	8004c66 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d1cf      	bne.n	8004c04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	8000003f 	.word	0x8000003f
 8004c74:	50000300 	.word	0x50000300
 8004c78:	2000004c 	.word	0x2000004c
 8004c7c:	053e2d63 	.word	0x053e2d63

08004c80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff f8de 	bl	8003e4e <LL_ADC_IsDisableOngoing>
 8004c92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff f8c5 	bl	8003e28 <LL_ADC_IsEnabled>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d047      	beq.n	8004d34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d144      	bne.n	8004d34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 030d 	and.w	r3, r3, #13
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d10c      	bne.n	8004cd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff f89f 	bl	8003e00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cca:	f7fe febd 	bl	8003a48 <HAL_GetTick>
 8004cce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cd0:	e029      	b.n	8004d26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd6:	f043 0210 	orr.w	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce2:	f043 0201 	orr.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e023      	b.n	8004d36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004cee:	f7fe feab 	bl	8003a48 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d914      	bls.n	8004d26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0e:	f043 0210 	orr.w	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e007      	b.n	8004d36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1dc      	bne.n	8004cee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d50:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d14b      	bne.n	8004df0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d021      	beq.n	8004db6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe ff44 	bl	8003c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d032      	beq.n	8004de8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d12b      	bne.n	8004de8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d11f      	bne.n	8004de8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004db4:	e018      	b.n	8004de8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d111      	bne.n	8004de8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7ff fab5 	bl	8004358 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dee:	e00e      	b.n	8004e0e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff fabf 	bl	8004380 <HAL_ADC_ErrorCallback>
}
 8004e02:	e004      	b.n	8004e0e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff faa1 	bl	800436c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e50:	f043 0204 	orr.w	r2, r3, #4
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff fa91 	bl	8004380 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <LL_ADC_IsEnabled>:
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <LL_ADC_IsEnabled+0x18>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <LL_ADC_IsEnabled+0x1a>
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <LL_ADC_StartCalibration>:
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_ADC_IsCalibrationOnGoing>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ed2:	d101      	bne.n	8004ed8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d101      	bne.n	8004efe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_ADCEx_Calibration_Start+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e04d      	b.n	8004fc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fea5 	bl	8004c80 <ADC_Disable>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d136      	bne.n	8004fae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f48:	f023 0302 	bic.w	r3, r3, #2
 8004f4c:	f043 0202 	orr.w	r2, r3, #2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ff96 	bl	8004e8c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f60:	e014      	b.n	8004f8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4a18      	ldr	r2, [pc, #96]	@ (8004fcc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d90d      	bls.n	8004f8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f74:	f023 0312 	bic.w	r3, r3, #18
 8004f78:	f043 0210 	orr.w	r2, r3, #16
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e01b      	b.n	8004fc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ff94 	bl	8004ebe <LL_ADC_IsCalibrationOnGoing>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e2      	bne.n	8004f62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa0:	f023 0303 	bic.w	r3, r3, #3
 8004fa4:	f043 0201 	orr.w	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fac:	e005      	b.n	8004fba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb2:	f043 0210 	orr.w	r2, r3, #16
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	0004de01 	.word	0x0004de01

08004fd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b0a1      	sub	sp, #132	@ 0x84
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e08b      	b.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005006:	d102      	bne.n	800500e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005008:	4b41      	ldr	r3, [pc, #260]	@ (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	e001      	b.n	8005012 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	f043 0220 	orr.w	r2, r3, #32
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e06a      	b.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff ff57 	bl	8004ee6 <LL_ADC_REG_IsConversionOngoing>
 8005038:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff ff51 	bl	8004ee6 <LL_ADC_REG_IsConversionOngoing>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d14c      	bne.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800504a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800504c:	2b00      	cmp	r3, #0
 800504e:	d149      	bne.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005050:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005052:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d028      	beq.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800505c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800506e:	035b      	lsls	r3, r3, #13
 8005070:	430b      	orrs	r3, r1
 8005072:	431a      	orrs	r2, r3
 8005074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005076:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005078:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800507c:	f7ff fef3 	bl	8004e66 <LL_ADC_IsEnabled>
 8005080:	4604      	mov	r4, r0
 8005082:	4823      	ldr	r0, [pc, #140]	@ (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005084:	f7ff feef 	bl	8004e66 <LL_ADC_IsEnabled>
 8005088:	4603      	mov	r3, r0
 800508a:	4323      	orrs	r3, r4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d133      	bne.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005098:	f023 030f 	bic.w	r3, r3, #15
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	6811      	ldr	r1, [r2, #0]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	6892      	ldr	r2, [r2, #8]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	431a      	orrs	r2, r3
 80050a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050aa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050ac:	e024      	b.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050ba:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050be:	f7ff fed2 	bl	8004e66 <LL_ADC_IsEnabled>
 80050c2:	4604      	mov	r4, r0
 80050c4:	4812      	ldr	r0, [pc, #72]	@ (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80050c6:	f7ff fece 	bl	8004e66 <LL_ADC_IsEnabled>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4323      	orrs	r3, r4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d112      	bne.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050da:	f023 030f 	bic.w	r3, r3, #15
 80050de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80050e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050e2:	e009      	b.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e8:	f043 0220 	orr.w	r2, r3, #32
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80050f6:	e000      	b.n	80050fa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005102:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005106:	4618      	mov	r0, r3
 8005108:	3784      	adds	r7, #132	@ 0x84
 800510a:	46bd      	mov	sp, r7
 800510c:	bd90      	pop	{r4, r7, pc}
 800510e:	bf00      	nop
 8005110:	50000100 	.word	0x50000100
 8005114:	50000300 	.word	0x50000300

08005118 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005120:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <LL_EXTI_EnableIT_0_31+0x20>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4904      	ldr	r1, [pc, #16]	@ (8005138 <LL_EXTI_EnableIT_0_31+0x20>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4313      	orrs	r3, r2
 800512a:	600b      	str	r3, [r1, #0]
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40010400 	.word	0x40010400

0800513c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <LL_EXTI_DisableIT_0_31+0x24>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	43db      	mvns	r3, r3
 800514c:	4904      	ldr	r1, [pc, #16]	@ (8005160 <LL_EXTI_DisableIT_0_31+0x24>)
 800514e:	4013      	ands	r3, r2
 8005150:	600b      	str	r3, [r1, #0]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010400 	.word	0x40010400

08005164 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800516c:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <LL_EXTI_EnableEvent_0_31+0x20>)
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	4904      	ldr	r1, [pc, #16]	@ (8005184 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4313      	orrs	r3, r2
 8005176:	604b      	str	r3, [r1, #4]

}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40010400 	.word	0x40010400

08005188 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005190:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <LL_EXTI_DisableEvent_0_31+0x24>)
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	43db      	mvns	r3, r3
 8005198:	4904      	ldr	r1, [pc, #16]	@ (80051ac <LL_EXTI_DisableEvent_0_31+0x24>)
 800519a:	4013      	ands	r3, r2
 800519c:	604b      	str	r3, [r1, #4]
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010400 	.word	0x40010400

080051b0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	4904      	ldr	r1, [pc, #16]	@ (80051d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]

}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	40010400 	.word	0x40010400

080051d4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	43db      	mvns	r3, r3
 80051e4:	4904      	ldr	r1, [pc, #16]	@ (80051f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]

}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010400 	.word	0x40010400

080051fc <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005204:	4b05      	ldr	r3, [pc, #20]	@ (800521c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	4904      	ldr	r1, [pc, #16]	@ (800521c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4313      	orrs	r3, r2
 800520e:	60cb      	str	r3, [r1, #12]
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40010400 	.word	0x40010400

08005220 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005228:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	43db      	mvns	r3, r3
 8005230:	4904      	ldr	r1, [pc, #16]	@ (8005244 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005232:	4013      	ands	r3, r2
 8005234:	60cb      	str	r3, [r1, #12]
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010400 	.word	0x40010400

08005248 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005250:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6153      	str	r3, [r2, #20]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40010400 	.word	0x40010400

08005268 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e0bc      	b.n	80053fe <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800528e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005292:	d102      	bne.n	800529a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e0b1      	b.n	80053fe <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7f5b      	ldrb	r3, [r3, #29]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d108      	bne.n	80052b6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7fe f83f 	bl	8003334 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052c0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b48      	ldr	r3, [pc, #288]	@ (8005408 <HAL_COMP_Init+0x1a0>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	6979      	ldr	r1, [r7, #20]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <HAL_COMP_Init+0xc8>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d113      	bne.n	8005330 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005308:	4b40      	ldr	r3, [pc, #256]	@ (800540c <HAL_COMP_Init+0x1a4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	099b      	lsrs	r3, r3, #6
 800530e:	4a40      	ldr	r2, [pc, #256]	@ (8005410 <HAL_COMP_Init+0x1a8>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	099b      	lsrs	r3, r3, #6
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005322:	e002      	b.n	800532a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3b01      	subs	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f9      	bne.n	8005324 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a37      	ldr	r2, [pc, #220]	@ (8005414 <HAL_COMP_Init+0x1ac>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d012      	beq.n	8005360 <HAL_COMP_Init+0xf8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a36      	ldr	r2, [pc, #216]	@ (8005418 <HAL_COMP_Init+0x1b0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00a      	beq.n	800535a <HAL_COMP_Init+0xf2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a34      	ldr	r2, [pc, #208]	@ (800541c <HAL_COMP_Init+0x1b4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d102      	bne.n	8005354 <HAL_COMP_Init+0xec>
 800534e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005352:	e007      	b.n	8005364 <HAL_COMP_Init+0xfc>
 8005354:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005358:	e004      	b.n	8005364 <HAL_COMP_Init+0xfc>
 800535a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800535e:	e001      	b.n	8005364 <HAL_COMP_Init+0xfc>
 8005360:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005364:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d037      	beq.n	80053e2 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800537e:	6938      	ldr	r0, [r7, #16]
 8005380:	f7ff ff16 	bl	80051b0 <LL_EXTI_EnableRisingTrig_0_31>
 8005384:	e002      	b.n	800538c <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005386:	6938      	ldr	r0, [r7, #16]
 8005388:	f7ff ff24 	bl	80051d4 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005398:	6938      	ldr	r0, [r7, #16]
 800539a:	f7ff ff2f 	bl	80051fc <LL_EXTI_EnableFallingTrig_0_31>
 800539e:	e002      	b.n	80053a6 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80053a0:	6938      	ldr	r0, [r7, #16]
 80053a2:	f7ff ff3d 	bl	8005220 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80053a6:	6938      	ldr	r0, [r7, #16]
 80053a8:	f7ff ff4e 	bl	8005248 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80053b8:	6938      	ldr	r0, [r7, #16]
 80053ba:	f7ff fed3 	bl	8005164 <LL_EXTI_EnableEvent_0_31>
 80053be:	e002      	b.n	80053c6 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80053c0:	6938      	ldr	r0, [r7, #16]
 80053c2:	f7ff fee1 	bl	8005188 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80053d2:	6938      	ldr	r0, [r7, #16]
 80053d4:	f7ff fea0 	bl	8005118 <LL_EXTI_EnableIT_0_31>
 80053d8:	e009      	b.n	80053ee <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80053da:	6938      	ldr	r0, [r7, #16]
 80053dc:	f7ff feae 	bl	800513c <LL_EXTI_DisableIT_0_31>
 80053e0:	e005      	b.n	80053ee <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 80053e2:	6938      	ldr	r0, [r7, #16]
 80053e4:	f7ff fed0 	bl	8005188 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 80053e8:	6938      	ldr	r0, [r7, #16]
 80053ea:	f7ff fea7 	bl	800513c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	7f5b      	ldrb	r3, [r3, #29]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80053fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	ff007e0f 	.word	0xff007e0f
 800540c:	2000004c 	.word	0x2000004c
 8005410:	053e2d63 	.word	0x053e2d63
 8005414:	40010200 	.word	0x40010200
 8005418:	40010204 	.word	0x40010204
 800541c:	40010208 	.word	0x40010208

08005420 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005428:	2300      	movs	r3, #0
 800542a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
 800543a:	e02e      	b.n	800549a <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005446:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800544a:	d102      	bne.n	8005452 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
 8005450:	e023      	b.n	800549a <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	7f5b      	ldrb	r3, [r3, #29]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d11c      	bne.n	8005496 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8005472:	4b0d      	ldr	r3, [pc, #52]	@ (80054a8 <HAL_COMP_Start+0x88>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a0d      	ldr	r2, [pc, #52]	@ (80054ac <HAL_COMP_Start+0x8c>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	0cda      	lsrs	r2, r3, #19
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005486:	e002      	b.n	800548e <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3b01      	subs	r3, #1
 800548c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f9      	bne.n	8005488 <HAL_COMP_Start+0x68>
 8005494:	e001      	b.n	800549a <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800549a:	7bfb      	ldrb	r3, [r7, #15]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	2000004c 	.word	0x2000004c
 80054ac:	431bde83 	.word	0x431bde83

080054b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054c0:	4b0c      	ldr	r3, [pc, #48]	@ (80054f4 <__NVIC_SetPriorityGrouping+0x44>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054cc:	4013      	ands	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054e2:	4a04      	ldr	r2, [pc, #16]	@ (80054f4 <__NVIC_SetPriorityGrouping+0x44>)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	60d3      	str	r3, [r2, #12]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	e000ed00 	.word	0xe000ed00

080054f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054fc:	4b04      	ldr	r3, [pc, #16]	@ (8005510 <__NVIC_GetPriorityGrouping+0x18>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	f003 0307 	and.w	r3, r3, #7
}
 8005506:	4618      	mov	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800551e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005522:	2b00      	cmp	r3, #0
 8005524:	db0b      	blt.n	800553e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	f003 021f 	and.w	r2, r3, #31
 800552c:	4907      	ldr	r1, [pc, #28]	@ (800554c <__NVIC_EnableIRQ+0x38>)
 800552e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	2001      	movs	r0, #1
 8005536:	fa00 f202 	lsl.w	r2, r0, r2
 800553a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	e000e100 	.word	0xe000e100

08005550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	6039      	str	r1, [r7, #0]
 800555a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800555c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005560:	2b00      	cmp	r3, #0
 8005562:	db0a      	blt.n	800557a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	490c      	ldr	r1, [pc, #48]	@ (800559c <__NVIC_SetPriority+0x4c>)
 800556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556e:	0112      	lsls	r2, r2, #4
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	440b      	add	r3, r1
 8005574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005578:	e00a      	b.n	8005590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	4908      	ldr	r1, [pc, #32]	@ (80055a0 <__NVIC_SetPriority+0x50>)
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	3b04      	subs	r3, #4
 8005588:	0112      	lsls	r2, r2, #4
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	440b      	add	r3, r1
 800558e:	761a      	strb	r2, [r3, #24]
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	e000e100 	.word	0xe000e100
 80055a0:	e000ed00 	.word	0xe000ed00

080055a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b089      	sub	sp, #36	@ 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f1c3 0307 	rsb	r3, r3, #7
 80055be:	2b04      	cmp	r3, #4
 80055c0:	bf28      	it	cs
 80055c2:	2304      	movcs	r3, #4
 80055c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3304      	adds	r3, #4
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d902      	bls.n	80055d4 <NVIC_EncodePriority+0x30>
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	3b03      	subs	r3, #3
 80055d2:	e000      	b.n	80055d6 <NVIC_EncodePriority+0x32>
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43da      	mvns	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	401a      	ands	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055ec:	f04f 31ff 	mov.w	r1, #4294967295
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	fa01 f303 	lsl.w	r3, r1, r3
 80055f6:	43d9      	mvns	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055fc:	4313      	orrs	r3, r2
         );
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3724      	adds	r7, #36	@ 0x24
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3b01      	subs	r3, #1
 8005618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800561c:	d301      	bcc.n	8005622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800561e:	2301      	movs	r3, #1
 8005620:	e00f      	b.n	8005642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005622:	4a0a      	ldr	r2, [pc, #40]	@ (800564c <SysTick_Config+0x40>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3b01      	subs	r3, #1
 8005628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800562a:	210f      	movs	r1, #15
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	f7ff ff8e 	bl	8005550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005634:	4b05      	ldr	r3, [pc, #20]	@ (800564c <SysTick_Config+0x40>)
 8005636:	2200      	movs	r2, #0
 8005638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800563a:	4b04      	ldr	r3, [pc, #16]	@ (800564c <SysTick_Config+0x40>)
 800563c:	2207      	movs	r2, #7
 800563e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	e000e010 	.word	0xe000e010

08005650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff29 	bl	80054b0 <__NVIC_SetPriorityGrouping>
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b086      	sub	sp, #24
 800566a:	af00      	add	r7, sp, #0
 800566c:	4603      	mov	r3, r0
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005674:	f7ff ff40 	bl	80054f8 <__NVIC_GetPriorityGrouping>
 8005678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	6978      	ldr	r0, [r7, #20]
 8005680:	f7ff ff90 	bl	80055a4 <NVIC_EncodePriority>
 8005684:	4602      	mov	r2, r0
 8005686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ff5f 	bl	8005550 <__NVIC_SetPriority>
}
 8005692:	bf00      	nop
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	4603      	mov	r3, r0
 80056a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff ff33 	bl	8005514 <__NVIC_EnableIRQ>
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ffa4 	bl	800560c <SysTick_Config>
 80056c4:	4603      	mov	r3, r0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e08d      	b.n	80057fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	4b47      	ldr	r3, [pc, #284]	@ (8005808 <HAL_DMA_Init+0x138>)
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d80f      	bhi.n	800570e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	4b45      	ldr	r3, [pc, #276]	@ (800580c <HAL_DMA_Init+0x13c>)
 80056f6:	4413      	add	r3, r2
 80056f8:	4a45      	ldr	r2, [pc, #276]	@ (8005810 <HAL_DMA_Init+0x140>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	091b      	lsrs	r3, r3, #4
 8005700:	009a      	lsls	r2, r3, #2
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a42      	ldr	r2, [pc, #264]	@ (8005814 <HAL_DMA_Init+0x144>)
 800570a:	641a      	str	r2, [r3, #64]	@ 0x40
 800570c:	e00e      	b.n	800572c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	4b40      	ldr	r3, [pc, #256]	@ (8005818 <HAL_DMA_Init+0x148>)
 8005716:	4413      	add	r3, r2
 8005718:	4a3d      	ldr	r2, [pc, #244]	@ (8005810 <HAL_DMA_Init+0x140>)
 800571a:	fba2 2303 	umull	r2, r3, r2, r3
 800571e:	091b      	lsrs	r3, r3, #4
 8005720:	009a      	lsls	r2, r3, #2
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a3c      	ldr	r2, [pc, #240]	@ (800581c <HAL_DMA_Init+0x14c>)
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005746:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800575c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f9b6 	bl	8005af0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800578c:	d102      	bne.n	8005794 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <HAL_DMA_Init+0x104>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d80c      	bhi.n	80057d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f9d6 	bl	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	e008      	b.n	80057e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40020407 	.word	0x40020407
 800580c:	bffdfff8 	.word	0xbffdfff8
 8005810:	cccccccd 	.word	0xcccccccd
 8005814:	40020000 	.word	0x40020000
 8005818:	bffdfbf8 	.word	0xbffdfbf8
 800581c:	40020400 	.word	0x40020400

08005820 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_DMA_Start_IT+0x20>
 800583c:	2302      	movs	r3, #2
 800583e:	e066      	b.n	800590e <HAL_DMA_Start_IT+0xee>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	d155      	bne.n	8005900 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f8fb 	bl	8005a74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 020e 	orr.w	r2, r2, #14
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	e00f      	b.n	80058b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0204 	bic.w	r2, r2, #4
 80058a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 020a 	orr.w	r2, r2, #10
 80058b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0201 	orr.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e005      	b.n	800590c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005908:	2302      	movs	r3, #2
 800590a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2204      	movs	r2, #4
 8005938:	409a      	lsls	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4013      	ands	r3, r2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d026      	beq.n	8005990 <HAL_DMA_IRQHandler+0x7a>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d021      	beq.n	8005990 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d107      	bne.n	800596a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0204 	bic.w	r2, r2, #4
 8005968:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	f003 021f 	and.w	r2, r3, #31
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	2104      	movs	r1, #4
 8005978:	fa01 f202 	lsl.w	r2, r1, r2
 800597c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005982:	2b00      	cmp	r3, #0
 8005984:	d071      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800598e:	e06c      	b.n	8005a6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	2202      	movs	r2, #2
 800599a:	409a      	lsls	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d02e      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d029      	beq.n	8005a02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 020a 	bic.w	r2, r2, #10
 80059ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d8:	f003 021f 	and.w	r2, r3, #31
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	2102      	movs	r1, #2
 80059e2:	fa01 f202 	lsl.w	r2, r1, r2
 80059e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d038      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a00:	e033      	b.n	8005a6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	2208      	movs	r2, #8
 8005a0c:	409a      	lsls	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d02a      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d025      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 020e 	bic.w	r2, r2, #14
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a34:	f003 021f 	and.w	r2, r3, #31
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
}
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d004      	beq.n	8005a9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	f003 021f 	and.w	r2, r3, #31
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	2101      	movs	r1, #1
 8005aac:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d108      	bne.n	8005ad4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ad2:	e007      	b.n	8005ae4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b16      	ldr	r3, [pc, #88]	@ (8005b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d802      	bhi.n	8005b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005b04:	4b15      	ldr	r3, [pc, #84]	@ (8005b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	e001      	b.n	8005b0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005b0a:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005b0c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	3b08      	subs	r3, #8
 8005b1a:	4a12      	ldr	r2, [pc, #72]	@ (8005b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b28:	089b      	lsrs	r3, r3, #2
 8005b2a:	009a      	lsls	r2, r3, #2
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4413      	add	r3, r2
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a0b      	ldr	r2, [pc, #44]	@ (8005b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2201      	movs	r2, #1
 8005b44:	409a      	lsls	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40020407 	.word	0x40020407
 8005b5c:	40020800 	.word	0x40020800
 8005b60:	40020820 	.word	0x40020820
 8005b64:	cccccccd 	.word	0xcccccccd
 8005b68:	40020880 	.word	0x40020880

08005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a08      	ldr	r2, [pc, #32]	@ (8005bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b8e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	2201      	movs	r2, #1
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	1000823f 	.word	0x1000823f
 8005bb0:	40020940 	.word	0x40020940

08005bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bc2:	e15a      	b.n	8005e7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	2101      	movs	r1, #1
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 814c 	beq.w	8005e74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 0303 	and.w	r3, r3, #3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d005      	beq.n	8005bf4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d130      	bne.n	8005c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	2203      	movs	r2, #3
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	43db      	mvns	r3, r3
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43db      	mvns	r3, r3
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4013      	ands	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	f003 0201 	and.w	r2, r3, #1
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d017      	beq.n	8005c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d123      	bne.n	8005ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	08da      	lsrs	r2, r3, #3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3208      	adds	r2, #8
 8005ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	220f      	movs	r2, #15
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	08da      	lsrs	r2, r3, #3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3208      	adds	r2, #8
 8005ce0:	6939      	ldr	r1, [r7, #16]
 8005ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f003 0203 	and.w	r2, r3, #3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80a6 	beq.w	8005e74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d28:	4b5b      	ldr	r3, [pc, #364]	@ (8005e98 <HAL_GPIO_Init+0x2e4>)
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8005e98 <HAL_GPIO_Init+0x2e4>)
 8005d2e:	f043 0301 	orr.w	r3, r3, #1
 8005d32:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d34:	4b58      	ldr	r3, [pc, #352]	@ (8005e98 <HAL_GPIO_Init+0x2e4>)
 8005d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	60bb      	str	r3, [r7, #8]
 8005d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d40:	4a56      	ldr	r2, [pc, #344]	@ (8005e9c <HAL_GPIO_Init+0x2e8>)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	089b      	lsrs	r3, r3, #2
 8005d46:	3302      	adds	r3, #2
 8005d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	220f      	movs	r2, #15
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4013      	ands	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005d6a:	d01f      	beq.n	8005dac <HAL_GPIO_Init+0x1f8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a4c      	ldr	r2, [pc, #304]	@ (8005ea0 <HAL_GPIO_Init+0x2ec>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d019      	beq.n	8005da8 <HAL_GPIO_Init+0x1f4>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a4b      	ldr	r2, [pc, #300]	@ (8005ea4 <HAL_GPIO_Init+0x2f0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <HAL_GPIO_Init+0x1f0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8005ea8 <HAL_GPIO_Init+0x2f4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00d      	beq.n	8005da0 <HAL_GPIO_Init+0x1ec>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a49      	ldr	r2, [pc, #292]	@ (8005eac <HAL_GPIO_Init+0x2f8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d007      	beq.n	8005d9c <HAL_GPIO_Init+0x1e8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a48      	ldr	r2, [pc, #288]	@ (8005eb0 <HAL_GPIO_Init+0x2fc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d101      	bne.n	8005d98 <HAL_GPIO_Init+0x1e4>
 8005d94:	2305      	movs	r3, #5
 8005d96:	e00a      	b.n	8005dae <HAL_GPIO_Init+0x1fa>
 8005d98:	2306      	movs	r3, #6
 8005d9a:	e008      	b.n	8005dae <HAL_GPIO_Init+0x1fa>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	e006      	b.n	8005dae <HAL_GPIO_Init+0x1fa>
 8005da0:	2303      	movs	r3, #3
 8005da2:	e004      	b.n	8005dae <HAL_GPIO_Init+0x1fa>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e002      	b.n	8005dae <HAL_GPIO_Init+0x1fa>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <HAL_GPIO_Init+0x1fa>
 8005dac:	2300      	movs	r3, #0
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	f002 0203 	and.w	r2, r2, #3
 8005db4:	0092      	lsls	r2, r2, #2
 8005db6:	4093      	lsls	r3, r2
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dbe:	4937      	ldr	r1, [pc, #220]	@ (8005e9c <HAL_GPIO_Init+0x2e8>)
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	089b      	lsrs	r3, r3, #2
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dcc:	4b39      	ldr	r3, [pc, #228]	@ (8005eb4 <HAL_GPIO_Init+0x300>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005df0:	4a30      	ldr	r2, [pc, #192]	@ (8005eb4 <HAL_GPIO_Init+0x300>)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005df6:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb4 <HAL_GPIO_Init+0x300>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e1a:	4a26      	ldr	r2, [pc, #152]	@ (8005eb4 <HAL_GPIO_Init+0x300>)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005e20:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <HAL_GPIO_Init+0x300>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e44:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb4 <HAL_GPIO_Init+0x300>)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb4 <HAL_GPIO_Init+0x300>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	43db      	mvns	r3, r3
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4013      	ands	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e6e:	4a11      	ldr	r2, [pc, #68]	@ (8005eb4 <HAL_GPIO_Init+0x300>)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	3301      	adds	r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f47f ae9d 	bne.w	8005bc4 <HAL_GPIO_Init+0x10>
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	bf00      	nop
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	48000400 	.word	0x48000400
 8005ea4:	48000800 	.word	0x48000800
 8005ea8:	48000c00 	.word	0x48000c00
 8005eac:	48001000 	.word	0x48001000
 8005eb0:	48001400 	.word	0x48001400
 8005eb4:	40010400 	.word	0x40010400

08005eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	887b      	ldrh	r3, [r7, #2]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
 8005ed4:	e001      	b.n	8005eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ef8:	787b      	ldrb	r3, [r7, #1]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f04:	e002      	b.n	8005f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f06:	887a      	ldrh	r2, [r7, #2]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005f22:	4b08      	ldr	r3, [pc, #32]	@ (8005f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f2e:	4a05      	ldr	r2, [pc, #20]	@ (8005f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fa ff4c 	bl	8000dd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40010400 	.word	0x40010400

08005f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d141      	bne.n	8005fda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f56:	4b4b      	ldr	r3, [pc, #300]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f62:	d131      	bne.n	8005fc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f64:	4b47      	ldr	r3, [pc, #284]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f6a:	4a46      	ldr	r2, [pc, #280]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f74:	4b43      	ldr	r3, [pc, #268]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f7c:	4a41      	ldr	r2, [pc, #260]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f84:	4b40      	ldr	r3, [pc, #256]	@ (8006088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2232      	movs	r2, #50	@ 0x32
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f90:	fba2 2303 	umull	r2, r3, r2, r3
 8005f94:	0c9b      	lsrs	r3, r3, #18
 8005f96:	3301      	adds	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f9a:	e002      	b.n	8005fa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa2:	4b38      	ldr	r3, [pc, #224]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fae:	d102      	bne.n	8005fb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f2      	bne.n	8005f9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fb6:	4b33      	ldr	r3, [pc, #204]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fc2:	d158      	bne.n	8006076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e057      	b.n	8006078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fce:	4a2d      	ldr	r2, [pc, #180]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005fd8:	e04d      	b.n	8006076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe0:	d141      	bne.n	8006066 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fe2:	4b28      	ldr	r3, [pc, #160]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fee:	d131      	bne.n	8006054 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ff0:	4b24      	ldr	r3, [pc, #144]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ff6:	4a23      	ldr	r2, [pc, #140]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006000:	4b20      	ldr	r3, [pc, #128]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006008:	4a1e      	ldr	r2, [pc, #120]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800600a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800600e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006010:	4b1d      	ldr	r3, [pc, #116]	@ (8006088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2232      	movs	r2, #50	@ 0x32
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	4a1c      	ldr	r2, [pc, #112]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	0c9b      	lsrs	r3, r3, #18
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006026:	e002      	b.n	800602e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3b01      	subs	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800602e:	4b15      	ldr	r3, [pc, #84]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800603a:	d102      	bne.n	8006042 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f2      	bne.n	8006028 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006042:	4b10      	ldr	r3, [pc, #64]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604e:	d112      	bne.n	8006076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e011      	b.n	8006078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006054:	4b0b      	ldr	r3, [pc, #44]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800605a:	4a0a      	ldr	r2, [pc, #40]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800605c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006064:	e007      	b.n	8006076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006066:	4b07      	ldr	r3, [pc, #28]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800606e:	4a05      	ldr	r2, [pc, #20]	@ (8006084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006070:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006074:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	40007000 	.word	0x40007000
 8006088:	2000004c 	.word	0x2000004c
 800608c:	431bde83 	.word	0x431bde83

08006090 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006094:	4b05      	ldr	r3, [pc, #20]	@ (80060ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4a04      	ldr	r2, [pc, #16]	@ (80060ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800609a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800609e:	6093      	str	r3, [r2, #8]
}
 80060a0:	bf00      	nop
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40007000 	.word	0x40007000

080060b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e2fe      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d075      	beq.n	80061ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ce:	4b97      	ldr	r3, [pc, #604]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 030c 	and.w	r3, r3, #12
 80060d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060d8:	4b94      	ldr	r3, [pc, #592]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b0c      	cmp	r3, #12
 80060e6:	d102      	bne.n	80060ee <HAL_RCC_OscConfig+0x3e>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d002      	beq.n	80060f4 <HAL_RCC_OscConfig+0x44>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d10b      	bne.n	800610c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f4:	4b8d      	ldr	r3, [pc, #564]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d05b      	beq.n	80061b8 <HAL_RCC_OscConfig+0x108>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d157      	bne.n	80061b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e2d9      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006114:	d106      	bne.n	8006124 <HAL_RCC_OscConfig+0x74>
 8006116:	4b85      	ldr	r3, [pc, #532]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a84      	ldr	r2, [pc, #528]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 800611c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e01d      	b.n	8006160 <HAL_RCC_OscConfig+0xb0>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800612c:	d10c      	bne.n	8006148 <HAL_RCC_OscConfig+0x98>
 800612e:	4b7f      	ldr	r3, [pc, #508]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a7e      	ldr	r2, [pc, #504]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	4b7c      	ldr	r3, [pc, #496]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a7b      	ldr	r2, [pc, #492]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e00b      	b.n	8006160 <HAL_RCC_OscConfig+0xb0>
 8006148:	4b78      	ldr	r3, [pc, #480]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a77      	ldr	r2, [pc, #476]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 800614e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	4b75      	ldr	r3, [pc, #468]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a74      	ldr	r2, [pc, #464]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 800615a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800615e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d013      	beq.n	8006190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006168:	f7fd fc6e 	bl	8003a48 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006170:	f7fd fc6a 	bl	8003a48 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b64      	cmp	r3, #100	@ 0x64
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e29e      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006182:	4b6a      	ldr	r3, [pc, #424]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0xc0>
 800618e:	e014      	b.n	80061ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006190:	f7fd fc5a 	bl	8003a48 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006198:	f7fd fc56 	bl	8003a48 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	@ 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e28a      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061aa:	4b60      	ldr	r3, [pc, #384]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0xe8>
 80061b6:	e000      	b.n	80061ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d075      	beq.n	80062b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061c6:	4b59      	ldr	r3, [pc, #356]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061d0:	4b56      	ldr	r3, [pc, #344]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b0c      	cmp	r3, #12
 80061de:	d102      	bne.n	80061e6 <HAL_RCC_OscConfig+0x136>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d002      	beq.n	80061ec <HAL_RCC_OscConfig+0x13c>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d11f      	bne.n	800622c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061ec:	4b4f      	ldr	r3, [pc, #316]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_RCC_OscConfig+0x154>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e25d      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006204:	4b49      	ldr	r3, [pc, #292]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	061b      	lsls	r3, r3, #24
 8006212:	4946      	ldr	r1, [pc, #280]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006218:	4b45      	ldr	r3, [pc, #276]	@ (8006330 <HAL_RCC_OscConfig+0x280>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4618      	mov	r0, r3
 800621e:	f7fd fbc7 	bl	80039b0 <HAL_InitTick>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d043      	beq.n	80062b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e249      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d023      	beq.n	800627c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006234:	4b3d      	ldr	r3, [pc, #244]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a3c      	ldr	r2, [pc, #240]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 800623a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800623e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fd fc02 	bl	8003a48 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006248:	f7fd fbfe 	bl	8003a48 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e232      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800625a:	4b34      	ldr	r3, [pc, #208]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006266:	4b31      	ldr	r3, [pc, #196]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	061b      	lsls	r3, r3, #24
 8006274:	492d      	ldr	r1, [pc, #180]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006276:	4313      	orrs	r3, r2
 8006278:	604b      	str	r3, [r1, #4]
 800627a:	e01a      	b.n	80062b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800627c:	4b2b      	ldr	r3, [pc, #172]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2a      	ldr	r2, [pc, #168]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006282:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006288:	f7fd fbde 	bl	8003a48 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006290:	f7fd fbda 	bl	8003a48 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e20e      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062a2:	4b22      	ldr	r3, [pc, #136]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x1e0>
 80062ae:	e000      	b.n	80062b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d041      	beq.n	8006342 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01c      	beq.n	8006300 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c6:	4b19      	ldr	r3, [pc, #100]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80062c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062cc:	4a17      	ldr	r2, [pc, #92]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d6:	f7fd fbb7 	bl	8003a48 <HAL_GetTick>
 80062da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062de:	f7fd fbb3 	bl	8003a48 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e1e7      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062f0:	4b0e      	ldr	r3, [pc, #56]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 80062f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0ef      	beq.n	80062de <HAL_RCC_OscConfig+0x22e>
 80062fe:	e020      	b.n	8006342 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006300:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006306:	4a09      	ldr	r2, [pc, #36]	@ (800632c <HAL_RCC_OscConfig+0x27c>)
 8006308:	f023 0301 	bic.w	r3, r3, #1
 800630c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006310:	f7fd fb9a 	bl	8003a48 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006316:	e00d      	b.n	8006334 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006318:	f7fd fb96 	bl	8003a48 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d906      	bls.n	8006334 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e1ca      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000
 8006330:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006334:	4b8c      	ldr	r3, [pc, #560]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ea      	bne.n	8006318 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 80a6 	beq.w	800649c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006350:	2300      	movs	r3, #0
 8006352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006354:	4b84      	ldr	r3, [pc, #528]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_RCC_OscConfig+0x2b4>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <HAL_RCC_OscConfig+0x2b6>
 8006364:	2300      	movs	r3, #0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800636a:	4b7f      	ldr	r3, [pc, #508]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 800636c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636e:	4a7e      	ldr	r2, [pc, #504]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006374:	6593      	str	r3, [r2, #88]	@ 0x58
 8006376:	4b7c      	ldr	r3, [pc, #496]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006382:	2301      	movs	r3, #1
 8006384:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006386:	4b79      	ldr	r3, [pc, #484]	@ (800656c <HAL_RCC_OscConfig+0x4bc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638e:	2b00      	cmp	r3, #0
 8006390:	d118      	bne.n	80063c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006392:	4b76      	ldr	r3, [pc, #472]	@ (800656c <HAL_RCC_OscConfig+0x4bc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a75      	ldr	r2, [pc, #468]	@ (800656c <HAL_RCC_OscConfig+0x4bc>)
 8006398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800639c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800639e:	f7fd fb53 	bl	8003a48 <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a6:	f7fd fb4f 	bl	8003a48 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e183      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063b8:	4b6c      	ldr	r3, [pc, #432]	@ (800656c <HAL_RCC_OscConfig+0x4bc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f0      	beq.n	80063a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d108      	bne.n	80063de <HAL_RCC_OscConfig+0x32e>
 80063cc:	4b66      	ldr	r3, [pc, #408]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	4a65      	ldr	r2, [pc, #404]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063dc:	e024      	b.n	8006428 <HAL_RCC_OscConfig+0x378>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d110      	bne.n	8006408 <HAL_RCC_OscConfig+0x358>
 80063e6:	4b60      	ldr	r3, [pc, #384]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80063ee:	f043 0304 	orr.w	r3, r3, #4
 80063f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063f6:	4b5c      	ldr	r3, [pc, #368]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80063f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006406:	e00f      	b.n	8006428 <HAL_RCC_OscConfig+0x378>
 8006408:	4b57      	ldr	r3, [pc, #348]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640e:	4a56      	ldr	r2, [pc, #344]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006418:	4b53      	ldr	r3, [pc, #332]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641e:	4a52      	ldr	r2, [pc, #328]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006420:	f023 0304 	bic.w	r3, r3, #4
 8006424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d016      	beq.n	800645e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006430:	f7fd fb0a 	bl	8003a48 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006436:	e00a      	b.n	800644e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006438:	f7fd fb06 	bl	8003a48 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006446:	4293      	cmp	r3, r2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e138      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800644e:	4b46      	ldr	r3, [pc, #280]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0ed      	beq.n	8006438 <HAL_RCC_OscConfig+0x388>
 800645c:	e015      	b.n	800648a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645e:	f7fd faf3 	bl	8003a48 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006464:	e00a      	b.n	800647c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006466:	f7fd faef 	bl	8003a48 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006474:	4293      	cmp	r3, r2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e121      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800647c:	4b3a      	ldr	r3, [pc, #232]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1ed      	bne.n	8006466 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800648a:	7ffb      	ldrb	r3, [r7, #31]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d105      	bne.n	800649c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006490:	4b35      	ldr	r3, [pc, #212]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006494:	4a34      	ldr	r2, [pc, #208]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800649a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d03c      	beq.n	8006522 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01c      	beq.n	80064ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80064b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80064b8:	f043 0301 	orr.w	r3, r3, #1
 80064bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c0:	f7fd fac2 	bl	8003a48 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064c8:	f7fd fabe 	bl	8003a48 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e0f2      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064da:	4b23      	ldr	r3, [pc, #140]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80064dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0ef      	beq.n	80064c8 <HAL_RCC_OscConfig+0x418>
 80064e8:	e01b      	b.n	8006522 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80064ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fa:	f7fd faa5 	bl	8003a48 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006502:	f7fd faa1 	bl	8003a48 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e0d5      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006514:	4b14      	ldr	r3, [pc, #80]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006516:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1ef      	bne.n	8006502 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 80c9 	beq.w	80066be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800652c:	4b0e      	ldr	r3, [pc, #56]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 030c 	and.w	r3, r3, #12
 8006534:	2b0c      	cmp	r3, #12
 8006536:	f000 8083 	beq.w	8006640 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d15e      	bne.n	8006600 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006542:	4b09      	ldr	r3, [pc, #36]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a08      	ldr	r2, [pc, #32]	@ (8006568 <HAL_RCC_OscConfig+0x4b8>)
 8006548:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800654c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654e:	f7fd fa7b 	bl	8003a48 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006554:	e00c      	b.n	8006570 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006556:	f7fd fa77 	bl	8003a48 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d905      	bls.n	8006570 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e0ab      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
 8006568:	40021000 	.word	0x40021000
 800656c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006570:	4b55      	ldr	r3, [pc, #340]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1ec      	bne.n	8006556 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800657c:	4b52      	ldr	r3, [pc, #328]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	4b52      	ldr	r3, [pc, #328]	@ (80066cc <HAL_RCC_OscConfig+0x61c>)
 8006582:	4013      	ands	r3, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6a11      	ldr	r1, [r2, #32]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800658c:	3a01      	subs	r2, #1
 800658e:	0112      	lsls	r2, r2, #4
 8006590:	4311      	orrs	r1, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006596:	0212      	lsls	r2, r2, #8
 8006598:	4311      	orrs	r1, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800659e:	0852      	lsrs	r2, r2, #1
 80065a0:	3a01      	subs	r2, #1
 80065a2:	0552      	lsls	r2, r2, #21
 80065a4:	4311      	orrs	r1, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065aa:	0852      	lsrs	r2, r2, #1
 80065ac:	3a01      	subs	r2, #1
 80065ae:	0652      	lsls	r2, r2, #25
 80065b0:	4311      	orrs	r1, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065b6:	06d2      	lsls	r2, r2, #27
 80065b8:	430a      	orrs	r2, r1
 80065ba:	4943      	ldr	r1, [pc, #268]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c0:	4b41      	ldr	r3, [pc, #260]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a40      	ldr	r2, [pc, #256]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 80065c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065cc:	4b3e      	ldr	r3, [pc, #248]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4a3d      	ldr	r2, [pc, #244]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 80065d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7fd fa36 	bl	8003a48 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e0:	f7fd fa32 	bl	8003a48 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e066      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065f2:	4b35      	ldr	r3, [pc, #212]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f0      	beq.n	80065e0 <HAL_RCC_OscConfig+0x530>
 80065fe:	e05e      	b.n	80066be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006600:	4b31      	ldr	r3, [pc, #196]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a30      	ldr	r2, [pc, #192]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 8006606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800660a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fd fa1c 	bl	8003a48 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fd fa18 	bl	8003a48 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e04c      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006626:	4b28      	ldr	r3, [pc, #160]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006632:	4b25      	ldr	r3, [pc, #148]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	4924      	ldr	r1, [pc, #144]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 8006638:	4b25      	ldr	r3, [pc, #148]	@ (80066d0 <HAL_RCC_OscConfig+0x620>)
 800663a:	4013      	ands	r3, r2
 800663c:	60cb      	str	r3, [r1, #12]
 800663e:	e03e      	b.n	80066be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e039      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800664c:	4b1e      	ldr	r3, [pc, #120]	@ (80066c8 <HAL_RCC_OscConfig+0x618>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f003 0203 	and.w	r2, r3, #3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	429a      	cmp	r2, r3
 800665e:	d12c      	bne.n	80066ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	3b01      	subs	r3, #1
 800666c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800666e:	429a      	cmp	r2, r3
 8006670:	d123      	bne.n	80066ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800667e:	429a      	cmp	r2, r3
 8006680:	d11b      	bne.n	80066ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800668e:	429a      	cmp	r2, r3
 8006690:	d113      	bne.n	80066ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	3b01      	subs	r3, #1
 80066a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d109      	bne.n	80066ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b0:	085b      	lsrs	r3, r3, #1
 80066b2:	3b01      	subs	r3, #1
 80066b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d001      	beq.n	80066be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40021000 	.word	0x40021000
 80066cc:	019f800c 	.word	0x019f800c
 80066d0:	feeefffc 	.word	0xfeeefffc

080066d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e11e      	b.n	800692a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4b91      	ldr	r3, [pc, #580]	@ (8006934 <HAL_RCC_ClockConfig+0x260>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d910      	bls.n	800671c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b8e      	ldr	r3, [pc, #568]	@ (8006934 <HAL_RCC_ClockConfig+0x260>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	498c      	ldr	r1, [pc, #560]	@ (8006934 <HAL_RCC_ClockConfig+0x260>)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b8a      	ldr	r3, [pc, #552]	@ (8006934 <HAL_RCC_ClockConfig+0x260>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e106      	b.n	800692a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d073      	beq.n	8006810 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b03      	cmp	r3, #3
 800672e:	d129      	bne.n	8006784 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006730:	4b81      	ldr	r3, [pc, #516]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0f4      	b.n	800692a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006740:	f000 f99e 	bl	8006a80 <RCC_GetSysClockFreqFromPLLSource>
 8006744:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	4a7c      	ldr	r2, [pc, #496]	@ (800693c <HAL_RCC_ClockConfig+0x268>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d93f      	bls.n	80067ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800674e:	4b7a      	ldr	r3, [pc, #488]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d009      	beq.n	800676e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006762:	2b00      	cmp	r3, #0
 8006764:	d033      	beq.n	80067ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800676a:	2b00      	cmp	r3, #0
 800676c:	d12f      	bne.n	80067ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800676e:	4b72      	ldr	r3, [pc, #456]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006776:	4a70      	ldr	r2, [pc, #448]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 8006778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800677e:	2380      	movs	r3, #128	@ 0x80
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	e024      	b.n	80067ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d107      	bne.n	800679c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800678c:	4b6a      	ldr	r3, [pc, #424]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e0c6      	b.n	800692a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800679c:	4b66      	ldr	r3, [pc, #408]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0be      	b.n	800692a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80067ac:	f000 f8ce 	bl	800694c <HAL_RCC_GetSysClockFreq>
 80067b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4a61      	ldr	r2, [pc, #388]	@ (800693c <HAL_RCC_ClockConfig+0x268>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d909      	bls.n	80067ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067ba:	4b5f      	ldr	r3, [pc, #380]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067c2:	4a5d      	ldr	r2, [pc, #372]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 80067c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80067ca:	2380      	movs	r3, #128	@ 0x80
 80067cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067ce:	4b5a      	ldr	r3, [pc, #360]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4957      	ldr	r1, [pc, #348]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e0:	f7fd f932 	bl	8003a48 <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fd f92e 	bl	8003a48 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e095      	b.n	800692a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	4b4e      	ldr	r3, [pc, #312]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 020c 	and.w	r2, r3, #12
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	429a      	cmp	r2, r3
 800680e:	d1eb      	bne.n	80067e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d023      	beq.n	8006864 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006828:	4b43      	ldr	r3, [pc, #268]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4a42      	ldr	r2, [pc, #264]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 800682e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006832:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006840:	4b3d      	ldr	r3, [pc, #244]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006848:	4a3b      	ldr	r2, [pc, #236]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 800684a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800684e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006850:	4b39      	ldr	r3, [pc, #228]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	4936      	ldr	r1, [pc, #216]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 800685e:	4313      	orrs	r3, r2
 8006860:	608b      	str	r3, [r1, #8]
 8006862:	e008      	b.n	8006876 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b80      	cmp	r3, #128	@ 0x80
 8006868:	d105      	bne.n	8006876 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800686a:	4b33      	ldr	r3, [pc, #204]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	4a32      	ldr	r2, [pc, #200]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 8006870:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006874:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006876:	4b2f      	ldr	r3, [pc, #188]	@ (8006934 <HAL_RCC_ClockConfig+0x260>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d21d      	bcs.n	80068c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006884:	4b2b      	ldr	r3, [pc, #172]	@ (8006934 <HAL_RCC_ClockConfig+0x260>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f023 020f 	bic.w	r2, r3, #15
 800688c:	4929      	ldr	r1, [pc, #164]	@ (8006934 <HAL_RCC_ClockConfig+0x260>)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	4313      	orrs	r3, r2
 8006892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006894:	f7fd f8d8 	bl	8003a48 <HAL_GetTick>
 8006898:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800689a:	e00a      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800689c:	f7fd f8d4 	bl	8003a48 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e03b      	b.n	800692a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b20      	ldr	r3, [pc, #128]	@ (8006934 <HAL_RCC_ClockConfig+0x260>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d1ed      	bne.n	800689c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d008      	beq.n	80068de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	4917      	ldr	r1, [pc, #92]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ea:	4b13      	ldr	r3, [pc, #76]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	490f      	ldr	r1, [pc, #60]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068fe:	f000 f825 	bl	800694c <HAL_RCC_GetSysClockFreq>
 8006902:	4602      	mov	r2, r0
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <HAL_RCC_ClockConfig+0x264>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	490c      	ldr	r1, [pc, #48]	@ (8006940 <HAL_RCC_ClockConfig+0x26c>)
 8006910:	5ccb      	ldrb	r3, [r1, r3]
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	fa22 f303 	lsr.w	r3, r2, r3
 800691a:	4a0a      	ldr	r2, [pc, #40]	@ (8006944 <HAL_RCC_ClockConfig+0x270>)
 800691c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800691e:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <HAL_RCC_ClockConfig+0x274>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fd f844 	bl	80039b0 <HAL_InitTick>
 8006928:	4603      	mov	r3, r0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40022000 	.word	0x40022000
 8006938:	40021000 	.word	0x40021000
 800693c:	04c4b400 	.word	0x04c4b400
 8006940:	0800c1a8 	.word	0x0800c1a8
 8006944:	2000004c 	.word	0x2000004c
 8006948:	20000050 	.word	0x20000050

0800694c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006952:	4b2c      	ldr	r3, [pc, #176]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	2b04      	cmp	r3, #4
 800695c:	d102      	bne.n	8006964 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800695e:	4b2a      	ldr	r3, [pc, #168]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	e047      	b.n	80069f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006964:	4b27      	ldr	r3, [pc, #156]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 030c 	and.w	r3, r3, #12
 800696c:	2b08      	cmp	r3, #8
 800696e:	d102      	bne.n	8006976 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006970:	4b26      	ldr	r3, [pc, #152]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	e03e      	b.n	80069f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006976:	4b23      	ldr	r3, [pc, #140]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 030c 	and.w	r3, r3, #12
 800697e:	2b0c      	cmp	r3, #12
 8006980:	d136      	bne.n	80069f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006982:	4b20      	ldr	r3, [pc, #128]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800698c:	4b1d      	ldr	r3, [pc, #116]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	3301      	adds	r3, #1
 8006998:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b03      	cmp	r3, #3
 800699e:	d10c      	bne.n	80069ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069a0:	4a1a      	ldr	r2, [pc, #104]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a8:	4a16      	ldr	r2, [pc, #88]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069aa:	68d2      	ldr	r2, [r2, #12]
 80069ac:	0a12      	lsrs	r2, r2, #8
 80069ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069b2:	fb02 f303 	mul.w	r3, r2, r3
 80069b6:	617b      	str	r3, [r7, #20]
      break;
 80069b8:	e00c      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069ba:	4a13      	ldr	r2, [pc, #76]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c2:	4a10      	ldr	r2, [pc, #64]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069c4:	68d2      	ldr	r2, [r2, #12]
 80069c6:	0a12      	lsrs	r2, r2, #8
 80069c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069cc:	fb02 f303 	mul.w	r3, r2, r3
 80069d0:	617b      	str	r3, [r7, #20]
      break;
 80069d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	0e5b      	lsrs	r3, r3, #25
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	3301      	adds	r3, #1
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	e001      	b.n	80069f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80069f4:	693b      	ldr	r3, [r7, #16]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40021000 	.word	0x40021000
 8006a08:	00f42400 	.word	0x00f42400
 8006a0c:	007a1200 	.word	0x007a1200

08006a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a14:	4b03      	ldr	r3, [pc, #12]	@ (8006a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a16:	681b      	ldr	r3, [r3, #0]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	2000004c 	.word	0x2000004c

08006a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a2c:	f7ff fff0 	bl	8006a10 <HAL_RCC_GetHCLKFreq>
 8006a30:	4602      	mov	r2, r0
 8006a32:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	0a1b      	lsrs	r3, r3, #8
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	4904      	ldr	r1, [pc, #16]	@ (8006a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a3e:	5ccb      	ldrb	r3, [r1, r3]
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	0800c1b8 	.word	0x0800c1b8

08006a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a58:	f7ff ffda 	bl	8006a10 <HAL_RCC_GetHCLKFreq>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4b06      	ldr	r3, [pc, #24]	@ (8006a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	0adb      	lsrs	r3, r3, #11
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	4904      	ldr	r1, [pc, #16]	@ (8006a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a6a:	5ccb      	ldrb	r3, [r1, r3]
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	0800c1b8 	.word	0x0800c1b8

08006a80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a86:	4b1e      	ldr	r3, [pc, #120]	@ (8006b00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a90:	4b1b      	ldr	r3, [pc, #108]	@ (8006b00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	091b      	lsrs	r3, r3, #4
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d10c      	bne.n	8006abe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006aa4:	4a17      	ldr	r2, [pc, #92]	@ (8006b04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	4a14      	ldr	r2, [pc, #80]	@ (8006b00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aae:	68d2      	ldr	r2, [r2, #12]
 8006ab0:	0a12      	lsrs	r2, r2, #8
 8006ab2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	617b      	str	r3, [r7, #20]
    break;
 8006abc:	e00c      	b.n	8006ad8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006abe:	4a12      	ldr	r2, [pc, #72]	@ (8006b08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8006b00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ac8:	68d2      	ldr	r2, [r2, #12]
 8006aca:	0a12      	lsrs	r2, r2, #8
 8006acc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ad0:	fb02 f303 	mul.w	r3, r2, r3
 8006ad4:	617b      	str	r3, [r7, #20]
    break;
 8006ad6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ad8:	4b09      	ldr	r3, [pc, #36]	@ (8006b00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	0e5b      	lsrs	r3, r3, #25
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006af2:	687b      	ldr	r3, [r7, #4]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40021000 	.word	0x40021000
 8006b04:	007a1200 	.word	0x007a1200
 8006b08:	00f42400 	.word	0x00f42400

08006b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b14:	2300      	movs	r3, #0
 8006b16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b18:	2300      	movs	r3, #0
 8006b1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8098 	beq.w	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b2e:	4b43      	ldr	r3, [pc, #268]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b3a:	4b40      	ldr	r3, [pc, #256]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b46:	4b3d      	ldr	r3, [pc, #244]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4e:	60bb      	str	r3, [r7, #8]
 8006b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b52:	2301      	movs	r3, #1
 8006b54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b56:	4b3a      	ldr	r3, [pc, #232]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a39      	ldr	r2, [pc, #228]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b62:	f7fc ff71 	bl	8003a48 <HAL_GetTick>
 8006b66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b68:	e009      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b6a:	f7fc ff6d 	bl	8003a48 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d902      	bls.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	74fb      	strb	r3, [r7, #19]
        break;
 8006b7c:	e005      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b7e:	4b30      	ldr	r3, [pc, #192]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0ef      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006b8a:	7cfb      	ldrb	r3, [r7, #19]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d159      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b90:	4b2a      	ldr	r3, [pc, #168]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01e      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d019      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bac:	4b23      	ldr	r3, [pc, #140]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bb8:	4b20      	ldr	r3, [pc, #128]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bce:	4a1b      	ldr	r2, [pc, #108]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bd8:	4a18      	ldr	r2, [pc, #96]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d016      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bea:	f7fc ff2d 	bl	8003a48 <HAL_GetTick>
 8006bee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bf0:	e00b      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf2:	f7fc ff29 	bl	8003a48 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d902      	bls.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	74fb      	strb	r3, [r7, #19]
            break;
 8006c08:	e006      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0ec      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006c18:	7cfb      	ldrb	r3, [r7, #19]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c1e:	4b07      	ldr	r3, [pc, #28]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	4903      	ldr	r1, [pc, #12]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c34:	e008      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c36:	7cfb      	ldrb	r3, [r7, #19]
 8006c38:	74bb      	strb	r3, [r7, #18]
 8006c3a:	e005      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c44:	7cfb      	ldrb	r3, [r7, #19]
 8006c46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c48:	7c7b      	ldrb	r3, [r7, #17]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d105      	bne.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c4e:	4ba6      	ldr	r3, [pc, #664]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c52:	4aa5      	ldr	r2, [pc, #660]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c66:	4ba0      	ldr	r3, [pc, #640]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6c:	f023 0203 	bic.w	r2, r3, #3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	499c      	ldr	r1, [pc, #624]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00a      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c88:	4b97      	ldr	r3, [pc, #604]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8e:	f023 020c 	bic.w	r2, r3, #12
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	4994      	ldr	r1, [pc, #592]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006caa:	4b8f      	ldr	r3, [pc, #572]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	498b      	ldr	r1, [pc, #556]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0308 	and.w	r3, r3, #8
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ccc:	4b86      	ldr	r3, [pc, #536]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	4983      	ldr	r1, [pc, #524]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cee:	4b7e      	ldr	r3, [pc, #504]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	497a      	ldr	r1, [pc, #488]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d10:	4b75      	ldr	r3, [pc, #468]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d16:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	4972      	ldr	r1, [pc, #456]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d32:	4b6d      	ldr	r3, [pc, #436]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	4969      	ldr	r1, [pc, #420]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d54:	4b64      	ldr	r3, [pc, #400]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	4961      	ldr	r1, [pc, #388]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d76:	4b5c      	ldr	r3, [pc, #368]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d84:	4958      	ldr	r1, [pc, #352]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d015      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d98:	4b53      	ldr	r3, [pc, #332]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	4950      	ldr	r1, [pc, #320]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006db6:	d105      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006db8:	4b4b      	ldr	r3, [pc, #300]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d015      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dd0:	4b45      	ldr	r3, [pc, #276]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dde:	4942      	ldr	r1, [pc, #264]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dee:	d105      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006df0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dfa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d015      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e08:	4b37      	ldr	r3, [pc, #220]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e16:	4934      	ldr	r1, [pc, #208]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e26:	d105      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e28:	4b2f      	ldr	r3, [pc, #188]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d015      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e40:	4b29      	ldr	r3, [pc, #164]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4e:	4926      	ldr	r1, [pc, #152]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e5e:	d105      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e60:	4b21      	ldr	r3, [pc, #132]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4a20      	ldr	r2, [pc, #128]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d015      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e78:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e86:	4918      	ldr	r1, [pc, #96]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e96:	d105      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e98:	4b13      	ldr	r3, [pc, #76]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	4a12      	ldr	r2, [pc, #72]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ea2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d015      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ebe:	490a      	ldr	r1, [pc, #40]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ece:	d105      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ed0:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	4a04      	ldr	r2, [pc, #16]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006edc:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40021000 	.word	0x40021000

08006eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e09d      	b.n	800703a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d108      	bne.n	8006f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f0e:	d009      	beq.n	8006f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	61da      	str	r2, [r3, #28]
 8006f16:	e005      	b.n	8006f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fc fa3c 	bl	80033bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f64:	d902      	bls.n	8006f6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	e002      	b.n	8006f72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006f7a:	d007      	beq.n	8006f8c <HAL_SPI_Init+0xa0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f84:	d002      	beq.n	8006f8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fce:	ea42 0103 	orr.w	r1, r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	0c1b      	lsrs	r3, r3, #16
 8006fe8:	f003 0204 	and.w	r2, r3, #4
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007008:	ea42 0103 	orr.w	r1, r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b088      	sub	sp, #32
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	603b      	str	r3, [r7, #0]
 800704e:	4613      	mov	r3, r2
 8007050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_SPI_Transmit+0x22>
 8007060:	2302      	movs	r3, #2
 8007062:	e15f      	b.n	8007324 <HAL_SPI_Transmit+0x2e2>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800706c:	f7fc fcec 	bl	8003a48 <HAL_GetTick>
 8007070:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b01      	cmp	r3, #1
 8007080:	d002      	beq.n	8007088 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007082:	2302      	movs	r3, #2
 8007084:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007086:	e148      	b.n	800731a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_SPI_Transmit+0x52>
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007098:	e13f      	b.n	800731a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2203      	movs	r2, #3
 800709e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	88fa      	ldrh	r2, [r7, #6]
 80070b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070e4:	d10f      	bne.n	8007106 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007104:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007110:	2b40      	cmp	r3, #64	@ 0x40
 8007112:	d007      	beq.n	8007124 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800712c:	d94f      	bls.n	80071ce <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_SPI_Transmit+0xfa>
 8007136:	8afb      	ldrh	r3, [r7, #22]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d142      	bne.n	80071c2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007140:	881a      	ldrh	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714c:	1c9a      	adds	r2, r3, #2
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007160:	e02f      	b.n	80071c2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b02      	cmp	r3, #2
 800716e:	d112      	bne.n	8007196 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	881a      	ldrh	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007180:	1c9a      	adds	r2, r3, #2
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007194:	e015      	b.n	80071c2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007196:	f7fc fc57 	bl	8003a48 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d803      	bhi.n	80071ae <HAL_SPI_Transmit+0x16c>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d102      	bne.n	80071b4 <HAL_SPI_Transmit+0x172>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80071c0:	e0ab      	b.n	800731a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1ca      	bne.n	8007162 <HAL_SPI_Transmit+0x120>
 80071cc:	e080      	b.n	80072d0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_SPI_Transmit+0x19a>
 80071d6:	8afb      	ldrh	r3, [r7, #22]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d174      	bne.n	80072c6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d912      	bls.n	800720c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	1c9a      	adds	r2, r3, #2
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b02      	subs	r3, #2
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800720a:	e05c      	b.n	80072c6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	330c      	adds	r3, #12
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007232:	e048      	b.n	80072c6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b02      	cmp	r3, #2
 8007240:	d12b      	bne.n	800729a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007246:	b29b      	uxth	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d912      	bls.n	8007272 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007250:	881a      	ldrh	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725c:	1c9a      	adds	r2, r3, #2
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b02      	subs	r3, #2
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007270:	e029      	b.n	80072c6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	330c      	adds	r3, #12
 800727c:	7812      	ldrb	r2, [r2, #0]
 800727e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007298:	e015      	b.n	80072c6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800729a:	f7fc fbd5 	bl	8003a48 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d803      	bhi.n	80072b2 <HAL_SPI_Transmit+0x270>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b0:	d102      	bne.n	80072b8 <HAL_SPI_Transmit+0x276>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d106      	bne.n	80072c6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80072c4:	e029      	b.n	800731a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1b1      	bne.n	8007234 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fcf9 	bl	8007ccc <SPI_EndRxTxTransaction>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072ee:	2300      	movs	r3, #0
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	77fb      	strb	r3, [r7, #31]
 8007310:	e003      	b.n	800731a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007322:	7ffb      	ldrb	r3, [r7, #31]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	4613      	mov	r3, r2
 800733a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b01      	cmp	r3, #1
 800734a:	d002      	beq.n	8007352 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800734c:	2302      	movs	r3, #2
 800734e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007350:	e11a      	b.n	8007588 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800735a:	d112      	bne.n	8007382 <HAL_SPI_Receive+0x56>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10e      	bne.n	8007382 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2204      	movs	r2, #4
 8007368:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800736c:	88fa      	ldrh	r2, [r7, #6]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	4613      	mov	r3, r2
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f90e 	bl	800759a <HAL_SPI_TransmitReceive>
 800737e:	4603      	mov	r3, r0
 8007380:	e107      	b.n	8007592 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007388:	2b01      	cmp	r3, #1
 800738a:	d101      	bne.n	8007390 <HAL_SPI_Receive+0x64>
 800738c:	2302      	movs	r3, #2
 800738e:	e100      	b.n	8007592 <HAL_SPI_Receive+0x266>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007398:	f7fc fb56 	bl	8003a48 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <HAL_SPI_Receive+0x7e>
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073ae:	e0eb      	b.n	8007588 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2204      	movs	r2, #4
 80073b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073fa:	d908      	bls.n	800740e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800740a:	605a      	str	r2, [r3, #4]
 800740c:	e007      	b.n	800741e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800741c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007426:	d10f      	bne.n	8007448 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007436:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007446:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007452:	2b40      	cmp	r3, #64	@ 0x40
 8007454:	d007      	beq.n	8007466 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007464:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800746e:	d86f      	bhi.n	8007550 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007470:	e034      	b.n	80074dc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b01      	cmp	r3, #1
 800747e:	d117      	bne.n	80074b0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f103 020c 	add.w	r2, r3, #12
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748c:	7812      	ldrb	r2, [r2, #0]
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80074ae:	e015      	b.n	80074dc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074b0:	f7fc faca 	bl	8003a48 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d803      	bhi.n	80074c8 <HAL_SPI_Receive+0x19c>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d102      	bne.n	80074ce <HAL_SPI_Receive+0x1a2>
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80074da:	e055      	b.n	8007588 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1c4      	bne.n	8007472 <HAL_SPI_Receive+0x146>
 80074e8:	e038      	b.n	800755c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d115      	bne.n	8007524 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	b292      	uxth	r2, r2
 8007504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750a:	1c9a      	adds	r2, r3, #2
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007522:	e015      	b.n	8007550 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007524:	f7fc fa90 	bl	8003a48 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d803      	bhi.n	800753c <HAL_SPI_Receive+0x210>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753a:	d102      	bne.n	8007542 <HAL_SPI_Receive+0x216>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d106      	bne.n	8007550 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800754e:	e01b      	b.n	8007588 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1c6      	bne.n	80074ea <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fb5b 	bl	8007c1c <SPI_EndRxTransaction>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2220      	movs	r2, #32
 8007570:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	75fb      	strb	r3, [r7, #23]
 800757e:	e003      	b.n	8007588 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b08a      	sub	sp, #40	@ 0x28
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
 80075a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075a8:	2301      	movs	r3, #1
 80075aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_SPI_TransmitReceive+0x26>
 80075bc:	2302      	movs	r3, #2
 80075be:	e20a      	b.n	80079d6 <HAL_SPI_TransmitReceive+0x43c>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075c8:	f7fc fa3e 	bl	8003a48 <HAL_GetTick>
 80075cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80075d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80075dc:	887b      	ldrh	r3, [r7, #2]
 80075de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80075e0:	887b      	ldrh	r3, [r7, #2]
 80075e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075e4:	7efb      	ldrb	r3, [r7, #27]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d00e      	beq.n	8007608 <HAL_SPI_TransmitReceive+0x6e>
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075f0:	d106      	bne.n	8007600 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d102      	bne.n	8007600 <HAL_SPI_TransmitReceive+0x66>
 80075fa:	7efb      	ldrb	r3, [r7, #27]
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d003      	beq.n	8007608 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007600:	2302      	movs	r3, #2
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007606:	e1e0      	b.n	80079ca <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_SPI_TransmitReceive+0x80>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_SPI_TransmitReceive+0x80>
 8007614:	887b      	ldrh	r3, [r7, #2]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d103      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007620:	e1d3      	b.n	80079ca <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b04      	cmp	r3, #4
 800762c:	d003      	beq.n	8007636 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2205      	movs	r2, #5
 8007632:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	887a      	ldrh	r2, [r7, #2]
 8007646:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	887a      	ldrh	r2, [r7, #2]
 800764e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	887a      	ldrh	r2, [r7, #2]
 8007662:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007678:	d802      	bhi.n	8007680 <HAL_SPI_TransmitReceive+0xe6>
 800767a:	8a3b      	ldrh	r3, [r7, #16]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d908      	bls.n	8007692 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800768e:	605a      	str	r2, [r3, #4]
 8007690:	e007      	b.n	80076a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ac:	2b40      	cmp	r3, #64	@ 0x40
 80076ae:	d007      	beq.n	80076c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076c8:	f240 8081 	bls.w	80077ce <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_SPI_TransmitReceive+0x140>
 80076d4:	8a7b      	ldrh	r3, [r7, #18]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d16d      	bne.n	80077b6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076de:	881a      	ldrh	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ea:	1c9a      	adds	r2, r3, #2
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076fe:	e05a      	b.n	80077b6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b02      	cmp	r3, #2
 800770c:	d11b      	bne.n	8007746 <HAL_SPI_TransmitReceive+0x1ac>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d016      	beq.n	8007746 <HAL_SPI_TransmitReceive+0x1ac>
 8007718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771a:	2b01      	cmp	r3, #1
 800771c:	d113      	bne.n	8007746 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007722:	881a      	ldrh	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772e:	1c9a      	adds	r2, r3, #2
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d11c      	bne.n	800778e <HAL_SPI_TransmitReceive+0x1f4>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d016      	beq.n	800778e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	b292      	uxth	r2, r2
 800776c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007772:	1c9a      	adds	r2, r3, #2
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800778a:	2301      	movs	r3, #1
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800778e:	f7fc f95b 	bl	8003a48 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800779a:	429a      	cmp	r2, r3
 800779c:	d80b      	bhi.n	80077b6 <HAL_SPI_TransmitReceive+0x21c>
 800779e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a4:	d007      	beq.n	80077b6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80077b4:	e109      	b.n	80079ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d19f      	bne.n	8007700 <HAL_SPI_TransmitReceive+0x166>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d199      	bne.n	8007700 <HAL_SPI_TransmitReceive+0x166>
 80077cc:	e0e3      	b.n	8007996 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_SPI_TransmitReceive+0x244>
 80077d6:	8a7b      	ldrh	r3, [r7, #18]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	f040 80cf 	bne.w	800797c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d912      	bls.n	800780e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ec:	881a      	ldrh	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	1c9a      	adds	r2, r3, #2
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b02      	subs	r3, #2
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800780c:	e0b6      	b.n	800797c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	330c      	adds	r3, #12
 8007818:	7812      	ldrb	r2, [r2, #0]
 800781a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007834:	e0a2      	b.n	800797c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b02      	cmp	r3, #2
 8007842:	d134      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x314>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d02f      	beq.n	80078ae <HAL_SPI_TransmitReceive+0x314>
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	2b01      	cmp	r3, #1
 8007852:	d12c      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b01      	cmp	r3, #1
 800785c:	d912      	bls.n	8007884 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007862:	881a      	ldrh	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786e:	1c9a      	adds	r2, r3, #2
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007878:	b29b      	uxth	r3, r3
 800787a:	3b02      	subs	r3, #2
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007882:	e012      	b.n	80078aa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	330c      	adds	r3, #12
 800788e:	7812      	ldrb	r2, [r2, #0]
 8007890:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d148      	bne.n	800794e <HAL_SPI_TransmitReceive+0x3b4>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d042      	beq.n	800794e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d923      	bls.n	800791c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	b292      	uxth	r2, r2
 80078e0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e6:	1c9a      	adds	r2, r3, #2
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b02      	subs	r3, #2
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b01      	cmp	r3, #1
 8007908:	d81f      	bhi.n	800794a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007918:	605a      	str	r2, [r3, #4]
 800791a:	e016      	b.n	800794a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f103 020c 	add.w	r2, r3, #12
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007928:	7812      	ldrb	r2, [r2, #0]
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800794a:	2301      	movs	r3, #1
 800794c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800794e:	f7fc f87b 	bl	8003a48 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800795a:	429a      	cmp	r2, r3
 800795c:	d803      	bhi.n	8007966 <HAL_SPI_TransmitReceive+0x3cc>
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d102      	bne.n	800796c <HAL_SPI_TransmitReceive+0x3d2>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	2b00      	cmp	r3, #0
 800796a:	d107      	bne.n	800797c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800797a:	e026      	b.n	80079ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	f47f af57 	bne.w	8007836 <HAL_SPI_TransmitReceive+0x29c>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800798e:	b29b      	uxth	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	f47f af50 	bne.w	8007836 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f996 	bl	8007ccc <SPI_EndRxTxTransaction>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079c0:	e003      	b.n	80079ca <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80079d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3728      	adds	r7, #40	@ 0x28
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079f0:	f7fc f82a 	bl	8003a48 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	4413      	add	r3, r2
 80079fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a00:	f7fc f822 	bl	8003a48 <HAL_GetTick>
 8007a04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a06:	4b39      	ldr	r3, [pc, #228]	@ (8007aec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	015b      	lsls	r3, r3, #5
 8007a0c:	0d1b      	lsrs	r3, r3, #20
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	fb02 f303 	mul.w	r3, r2, r3
 8007a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a16:	e054      	b.n	8007ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	d050      	beq.n	8007ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a20:	f7fc f812 	bl	8003a48 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d902      	bls.n	8007a36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d13d      	bne.n	8007ab2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a4e:	d111      	bne.n	8007a74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a58:	d004      	beq.n	8007a64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a62:	d107      	bne.n	8007a74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a7c:	d10f      	bne.n	8007a9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e017      	b.n	8007ae2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	4013      	ands	r3, r2
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	bf0c      	ite	eq
 8007ad2:	2301      	moveq	r3, #1
 8007ad4:	2300      	movne	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d19b      	bne.n	8007a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3720      	adds	r7, #32
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	2000004c 	.word	0x2000004c

08007af0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08a      	sub	sp, #40	@ 0x28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b02:	f7fb ffa1 	bl	8003a48 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0a:	1a9b      	subs	r3, r3, r2
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	4413      	add	r3, r2
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007b12:	f7fb ff99 	bl	8003a48 <HAL_GetTick>
 8007b16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b20:	4b3d      	ldr	r3, [pc, #244]	@ (8007c18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	00da      	lsls	r2, r3, #3
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	0d1b      	lsrs	r3, r3, #20
 8007b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b38:	e060      	b.n	8007bfc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b40:	d107      	bne.n	8007b52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d050      	beq.n	8007bfc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b5a:	f7fb ff75 	bl	8003a48 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d902      	bls.n	8007b70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d13d      	bne.n	8007bec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b88:	d111      	bne.n	8007bae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b92:	d004      	beq.n	8007b9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b9c:	d107      	bne.n	8007bae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bb6:	d10f      	bne.n	8007bd8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e010      	b.n	8007c0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689a      	ldr	r2, [r3, #8]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4013      	ands	r3, r2
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d196      	bne.n	8007b3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3728      	adds	r7, #40	@ 0x28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	2000004c 	.word	0x2000004c

08007c1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c30:	d111      	bne.n	8007c56 <SPI_EndRxTransaction+0x3a>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c3a:	d004      	beq.n	8007c46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c44:	d107      	bne.n	8007c56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c54:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2180      	movs	r1, #128	@ 0x80
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff febd 	bl	80079e0 <SPI_WaitFlagStateUntilTimeout>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c70:	f043 0220 	orr.w	r2, r3, #32
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e023      	b.n	8007cc4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c84:	d11d      	bne.n	8007cc2 <SPI_EndRxTransaction+0xa6>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c8e:	d004      	beq.n	8007c9a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c98:	d113      	bne.n	8007cc2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f7ff ff22 	bl	8007af0 <SPI_WaitFifoStateUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cb6:	f043 0220 	orr.w	r2, r3, #32
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e000      	b.n	8007cc4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff ff03 	bl	8007af0 <SPI_WaitFifoStateUntilTimeout>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d007      	beq.n	8007d00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf4:	f043 0220 	orr.w	r2, r3, #32
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e027      	b.n	8007d50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2200      	movs	r2, #0
 8007d08:	2180      	movs	r1, #128	@ 0x80
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff fe68 	bl	80079e0 <SPI_WaitFlagStateUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d1a:	f043 0220 	orr.w	r2, r3, #32
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e014      	b.n	8007d50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff fedc 	bl	8007af0 <SPI_WaitFifoStateUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d007      	beq.n	8007d4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d42:	f043 0220 	orr.w	r2, r3, #32
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e000      	b.n	8007d50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e049      	b.n	8007dfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7fb fbcc 	bl	800351c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f000 fde0 	bl	800895c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d001      	beq.n	8007e20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e042      	b.n	8007ea6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a21      	ldr	r2, [pc, #132]	@ (8007eb4 <HAL_TIM_Base_Start+0xac>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d018      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e3a:	d013      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb8 <HAL_TIM_Base_Start+0xb0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00e      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007ebc <HAL_TIM_Base_Start+0xb4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d009      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1a      	ldr	r2, [pc, #104]	@ (8007ec0 <HAL_TIM_Base_Start+0xb8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d004      	beq.n	8007e64 <HAL_TIM_Base_Start+0x5c>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a19      	ldr	r2, [pc, #100]	@ (8007ec4 <HAL_TIM_Base_Start+0xbc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d115      	bne.n	8007e90 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	4b17      	ldr	r3, [pc, #92]	@ (8007ec8 <HAL_TIM_Base_Start+0xc0>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b06      	cmp	r3, #6
 8007e74:	d015      	beq.n	8007ea2 <HAL_TIM_Base_Start+0x9a>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e7c:	d011      	beq.n	8007ea2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 0201 	orr.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	e008      	b.n	8007ea2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	e000      	b.n	8007ea4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	40012c00 	.word	0x40012c00
 8007eb8:	40000400 	.word	0x40000400
 8007ebc:	40000800 	.word	0x40000800
 8007ec0:	40013400 	.word	0x40013400
 8007ec4:	40014000 	.word	0x40014000
 8007ec8:	00010007 	.word	0x00010007

08007ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d001      	beq.n	8007ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e04a      	b.n	8007f7a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a21      	ldr	r2, [pc, #132]	@ (8007f88 <HAL_TIM_Base_Start_IT+0xbc>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d018      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x6c>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0e:	d013      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x6c>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a1d      	ldr	r2, [pc, #116]	@ (8007f8c <HAL_TIM_Base_Start_IT+0xc0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d00e      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x6c>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007f90 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d009      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x6c>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1a      	ldr	r2, [pc, #104]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d004      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x6c>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a19      	ldr	r2, [pc, #100]	@ (8007f98 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d115      	bne.n	8007f64 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	4b17      	ldr	r3, [pc, #92]	@ (8007f9c <HAL_TIM_Base_Start_IT+0xd0>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b06      	cmp	r3, #6
 8007f48:	d015      	beq.n	8007f76 <HAL_TIM_Base_Start_IT+0xaa>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f50:	d011      	beq.n	8007f76 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0201 	orr.w	r2, r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f62:	e008      	b.n	8007f76 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e000      	b.n	8007f78 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40012c00 	.word	0x40012c00
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40013400 	.word	0x40013400
 8007f98:	40014000 	.word	0x40014000
 8007f9c:	00010007 	.word	0x00010007

08007fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e049      	b.n	8008046 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7fb fb1a 	bl	8003600 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f000 fcbc 	bl	800895c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d109      	bne.n	8008074 <HAL_TIM_PWM_Start+0x24>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b01      	cmp	r3, #1
 800806a:	bf14      	ite	ne
 800806c:	2301      	movne	r3, #1
 800806e:	2300      	moveq	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	e03c      	b.n	80080ee <HAL_TIM_PWM_Start+0x9e>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b04      	cmp	r3, #4
 8008078:	d109      	bne.n	800808e <HAL_TIM_PWM_Start+0x3e>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b01      	cmp	r3, #1
 8008084:	bf14      	ite	ne
 8008086:	2301      	movne	r3, #1
 8008088:	2300      	moveq	r3, #0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	e02f      	b.n	80080ee <HAL_TIM_PWM_Start+0x9e>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b08      	cmp	r3, #8
 8008092:	d109      	bne.n	80080a8 <HAL_TIM_PWM_Start+0x58>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	bf14      	ite	ne
 80080a0:	2301      	movne	r3, #1
 80080a2:	2300      	moveq	r3, #0
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	e022      	b.n	80080ee <HAL_TIM_PWM_Start+0x9e>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b0c      	cmp	r3, #12
 80080ac:	d109      	bne.n	80080c2 <HAL_TIM_PWM_Start+0x72>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	bf14      	ite	ne
 80080ba:	2301      	movne	r3, #1
 80080bc:	2300      	moveq	r3, #0
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	e015      	b.n	80080ee <HAL_TIM_PWM_Start+0x9e>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	d109      	bne.n	80080dc <HAL_TIM_PWM_Start+0x8c>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	bf14      	ite	ne
 80080d4:	2301      	movne	r3, #1
 80080d6:	2300      	moveq	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	e008      	b.n	80080ee <HAL_TIM_PWM_Start+0x9e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e097      	b.n	8008226 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <HAL_TIM_PWM_Start+0xb6>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008104:	e023      	b.n	800814e <HAL_TIM_PWM_Start+0xfe>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b04      	cmp	r3, #4
 800810a:	d104      	bne.n	8008116 <HAL_TIM_PWM_Start+0xc6>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008114:	e01b      	b.n	800814e <HAL_TIM_PWM_Start+0xfe>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b08      	cmp	r3, #8
 800811a:	d104      	bne.n	8008126 <HAL_TIM_PWM_Start+0xd6>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008124:	e013      	b.n	800814e <HAL_TIM_PWM_Start+0xfe>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b0c      	cmp	r3, #12
 800812a:	d104      	bne.n	8008136 <HAL_TIM_PWM_Start+0xe6>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008134:	e00b      	b.n	800814e <HAL_TIM_PWM_Start+0xfe>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b10      	cmp	r3, #16
 800813a:	d104      	bne.n	8008146 <HAL_TIM_PWM_Start+0xf6>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008144:	e003      	b.n	800814e <HAL_TIM_PWM_Start+0xfe>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2202      	movs	r2, #2
 800814a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2201      	movs	r2, #1
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f001 f82e 	bl	80091b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a33      	ldr	r2, [pc, #204]	@ (8008230 <HAL_TIM_PWM_Start+0x1e0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d013      	beq.n	800818e <HAL_TIM_PWM_Start+0x13e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a32      	ldr	r2, [pc, #200]	@ (8008234 <HAL_TIM_PWM_Start+0x1e4>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d00e      	beq.n	800818e <HAL_TIM_PWM_Start+0x13e>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a30      	ldr	r2, [pc, #192]	@ (8008238 <HAL_TIM_PWM_Start+0x1e8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d009      	beq.n	800818e <HAL_TIM_PWM_Start+0x13e>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a2f      	ldr	r2, [pc, #188]	@ (800823c <HAL_TIM_PWM_Start+0x1ec>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d004      	beq.n	800818e <HAL_TIM_PWM_Start+0x13e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a2d      	ldr	r2, [pc, #180]	@ (8008240 <HAL_TIM_PWM_Start+0x1f0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d101      	bne.n	8008192 <HAL_TIM_PWM_Start+0x142>
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <HAL_TIM_PWM_Start+0x144>
 8008192:	2300      	movs	r3, #0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a20      	ldr	r2, [pc, #128]	@ (8008230 <HAL_TIM_PWM_Start+0x1e0>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d018      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x194>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ba:	d013      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x194>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a20      	ldr	r2, [pc, #128]	@ (8008244 <HAL_TIM_PWM_Start+0x1f4>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00e      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x194>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008248 <HAL_TIM_PWM_Start+0x1f8>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d009      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x194>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a17      	ldr	r2, [pc, #92]	@ (8008234 <HAL_TIM_PWM_Start+0x1e4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d004      	beq.n	80081e4 <HAL_TIM_PWM_Start+0x194>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a16      	ldr	r2, [pc, #88]	@ (8008238 <HAL_TIM_PWM_Start+0x1e8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d115      	bne.n	8008210 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	4b18      	ldr	r3, [pc, #96]	@ (800824c <HAL_TIM_PWM_Start+0x1fc>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b06      	cmp	r3, #6
 80081f4:	d015      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1d2>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081fc:	d011      	beq.n	8008222 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0201 	orr.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820e:	e008      	b.n	8008222 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0201 	orr.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e000      	b.n	8008224 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008222:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40012c00 	.word	0x40012c00
 8008234:	40013400 	.word	0x40013400
 8008238:	40014000 	.word	0x40014000
 800823c:	40014400 	.word	0x40014400
 8008240:	40014800 	.word	0x40014800
 8008244:	40000400 	.word	0x40000400
 8008248:	40000800 	.word	0x40000800
 800824c:	00010007 	.word	0x00010007

08008250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d020      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f003 0302 	and.w	r3, r3, #2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d01b      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f06f 0202 	mvn.w	r2, #2
 8008284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fb40 	bl	8008920 <HAL_TIM_IC_CaptureCallback>
 80082a0:	e005      	b.n	80082ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fb32 	bl	800890c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fb43 	bl	8008934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d020      	beq.n	8008300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01b      	beq.n	8008300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0204 	mvn.w	r2, #4
 80082d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fb1a 	bl	8008920 <HAL_TIM_IC_CaptureCallback>
 80082ec:	e005      	b.n	80082fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fb0c 	bl	800890c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fb1d 	bl	8008934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d020      	beq.n	800834c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f003 0308 	and.w	r3, r3, #8
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01b      	beq.n	800834c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0208 	mvn.w	r2, #8
 800831c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2204      	movs	r2, #4
 8008322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 faf4 	bl	8008920 <HAL_TIM_IC_CaptureCallback>
 8008338:	e005      	b.n	8008346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fae6 	bl	800890c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 faf7 	bl	8008934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f003 0310 	and.w	r3, r3, #16
 8008352:	2b00      	cmp	r3, #0
 8008354:	d020      	beq.n	8008398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f003 0310 	and.w	r3, r3, #16
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01b      	beq.n	8008398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f06f 0210 	mvn.w	r2, #16
 8008368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2208      	movs	r2, #8
 800836e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 face 	bl	8008920 <HAL_TIM_IC_CaptureCallback>
 8008384:	e005      	b.n	8008392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fac0 	bl	800890c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fad1 	bl	8008934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00c      	beq.n	80083bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d007      	beq.n	80083bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f06f 0201 	mvn.w	r2, #1
 80083b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7f8 fd42 	bl	8000e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d104      	bne.n	80083d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00c      	beq.n	80083ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80083e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 f825 	bl	8009434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00c      	beq.n	800840e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 f81d 	bl	8009448 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00c      	beq.n	8008432 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800842a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fa8b 	bl	8008948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00c      	beq.n	8008456 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f06f 0220 	mvn.w	r2, #32
 800844e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 ffe5 	bl	8009420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00c      	beq.n	800847a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fff1 	bl	800945c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00c      	beq.n	800849e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 ffe9 	bl	8009470 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80084ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 ffe1 	bl	8009484 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00c      	beq.n	80084e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80084de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 ffd9 	bl	8009498 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084e6:	bf00      	nop
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800850a:	2302      	movs	r3, #2
 800850c:	e0ff      	b.n	800870e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b14      	cmp	r3, #20
 800851a:	f200 80f0 	bhi.w	80086fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800851e:	a201      	add	r2, pc, #4	@ (adr r2, 8008524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	08008579 	.word	0x08008579
 8008528:	080086ff 	.word	0x080086ff
 800852c:	080086ff 	.word	0x080086ff
 8008530:	080086ff 	.word	0x080086ff
 8008534:	080085b9 	.word	0x080085b9
 8008538:	080086ff 	.word	0x080086ff
 800853c:	080086ff 	.word	0x080086ff
 8008540:	080086ff 	.word	0x080086ff
 8008544:	080085fb 	.word	0x080085fb
 8008548:	080086ff 	.word	0x080086ff
 800854c:	080086ff 	.word	0x080086ff
 8008550:	080086ff 	.word	0x080086ff
 8008554:	0800863b 	.word	0x0800863b
 8008558:	080086ff 	.word	0x080086ff
 800855c:	080086ff 	.word	0x080086ff
 8008560:	080086ff 	.word	0x080086ff
 8008564:	0800867d 	.word	0x0800867d
 8008568:	080086ff 	.word	0x080086ff
 800856c:	080086ff 	.word	0x080086ff
 8008570:	080086ff 	.word	0x080086ff
 8008574:	080086bd 	.word	0x080086bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fa88 	bl	8008a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0208 	orr.w	r2, r2, #8
 8008592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0204 	bic.w	r2, r2, #4
 80085a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6999      	ldr	r1, [r3, #24]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	691a      	ldr	r2, [r3, #16]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	619a      	str	r2, [r3, #24]
      break;
 80085b6:	e0a5      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 faf8 	bl	8008bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6999      	ldr	r1, [r3, #24]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	021a      	lsls	r2, r3, #8
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	619a      	str	r2, [r3, #24]
      break;
 80085f8:	e084      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fb61 	bl	8008cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f042 0208 	orr.w	r2, r2, #8
 8008614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69da      	ldr	r2, [r3, #28]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f022 0204 	bic.w	r2, r2, #4
 8008624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69d9      	ldr	r1, [r3, #28]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	691a      	ldr	r2, [r3, #16]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	61da      	str	r2, [r3, #28]
      break;
 8008638:	e064      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fbc9 	bl	8008dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69d9      	ldr	r1, [r3, #28]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	021a      	lsls	r2, r3, #8
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	61da      	str	r2, [r3, #28]
      break;
 800867a:	e043      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68b9      	ldr	r1, [r7, #8]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fc32 	bl	8008eec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0208 	orr.w	r2, r2, #8
 8008696:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0204 	bic.w	r2, r2, #4
 80086a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80086ba:	e023      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fc76 	bl	8008fb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	021a      	lsls	r2, r3, #8
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80086fc:	e002      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	75fb      	strb	r3, [r7, #23]
      break;
 8008702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop

08008718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_TIM_ConfigClockSource+0x1c>
 8008730:	2302      	movs	r3, #2
 8008732:	e0de      	b.n	80088f2 <HAL_TIM_ConfigClockSource+0x1da>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008752:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800875e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a63      	ldr	r2, [pc, #396]	@ (80088fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	f000 80a9 	beq.w	80088c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008774:	4a61      	ldr	r2, [pc, #388]	@ (80088fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	f200 80ae 	bhi.w	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800877c:	4a60      	ldr	r2, [pc, #384]	@ (8008900 <HAL_TIM_ConfigClockSource+0x1e8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	f000 80a1 	beq.w	80088c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008784:	4a5e      	ldr	r2, [pc, #376]	@ (8008900 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008786:	4293      	cmp	r3, r2
 8008788:	f200 80a6 	bhi.w	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800878c:	4a5d      	ldr	r2, [pc, #372]	@ (8008904 <HAL_TIM_ConfigClockSource+0x1ec>)
 800878e:	4293      	cmp	r3, r2
 8008790:	f000 8099 	beq.w	80088c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008794:	4a5b      	ldr	r2, [pc, #364]	@ (8008904 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008796:	4293      	cmp	r3, r2
 8008798:	f200 809e 	bhi.w	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800879c:	4a5a      	ldr	r2, [pc, #360]	@ (8008908 <HAL_TIM_ConfigClockSource+0x1f0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	f000 8091 	beq.w	80088c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80087a4:	4a58      	ldr	r2, [pc, #352]	@ (8008908 <HAL_TIM_ConfigClockSource+0x1f0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	f200 8096 	bhi.w	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087b0:	f000 8089 	beq.w	80088c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80087b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087b8:	f200 808e 	bhi.w	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c0:	d03e      	beq.n	8008840 <HAL_TIM_ConfigClockSource+0x128>
 80087c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c6:	f200 8087 	bhi.w	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ce:	f000 8086 	beq.w	80088de <HAL_TIM_ConfigClockSource+0x1c6>
 80087d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d6:	d87f      	bhi.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087d8:	2b70      	cmp	r3, #112	@ 0x70
 80087da:	d01a      	beq.n	8008812 <HAL_TIM_ConfigClockSource+0xfa>
 80087dc:	2b70      	cmp	r3, #112	@ 0x70
 80087de:	d87b      	bhi.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087e0:	2b60      	cmp	r3, #96	@ 0x60
 80087e2:	d050      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x16e>
 80087e4:	2b60      	cmp	r3, #96	@ 0x60
 80087e6:	d877      	bhi.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087e8:	2b50      	cmp	r3, #80	@ 0x50
 80087ea:	d03c      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x14e>
 80087ec:	2b50      	cmp	r3, #80	@ 0x50
 80087ee:	d873      	bhi.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f0:	2b40      	cmp	r3, #64	@ 0x40
 80087f2:	d058      	beq.n	80088a6 <HAL_TIM_ConfigClockSource+0x18e>
 80087f4:	2b40      	cmp	r3, #64	@ 0x40
 80087f6:	d86f      	bhi.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f8:	2b30      	cmp	r3, #48	@ 0x30
 80087fa:	d064      	beq.n	80088c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80087fc:	2b30      	cmp	r3, #48	@ 0x30
 80087fe:	d86b      	bhi.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008800:	2b20      	cmp	r3, #32
 8008802:	d060      	beq.n	80088c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008804:	2b20      	cmp	r3, #32
 8008806:	d867      	bhi.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d05c      	beq.n	80088c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800880c:	2b10      	cmp	r3, #16
 800880e:	d05a      	beq.n	80088c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008810:	e062      	b.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008822:	f000 fca9 	bl	8009178 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	609a      	str	r2, [r3, #8]
      break;
 800883e:	e04f      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008850:	f000 fc92 	bl	8009178 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008862:	609a      	str	r2, [r3, #8]
      break;
 8008864:	e03c      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008872:	461a      	mov	r2, r3
 8008874:	f000 fc04 	bl	8009080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2150      	movs	r1, #80	@ 0x50
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fc5d 	bl	800913e <TIM_ITRx_SetConfig>
      break;
 8008884:	e02c      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008892:	461a      	mov	r2, r3
 8008894:	f000 fc23 	bl	80090de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2160      	movs	r1, #96	@ 0x60
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fc4d 	bl	800913e <TIM_ITRx_SetConfig>
      break;
 80088a4:	e01c      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b2:	461a      	mov	r2, r3
 80088b4:	f000 fbe4 	bl	8009080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2140      	movs	r1, #64	@ 0x40
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fc3d 	bl	800913e <TIM_ITRx_SetConfig>
      break;
 80088c4:	e00c      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4619      	mov	r1, r3
 80088d0:	4610      	mov	r0, r2
 80088d2:	f000 fc34 	bl	800913e <TIM_ITRx_SetConfig>
      break;
 80088d6:	e003      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	73fb      	strb	r3, [r7, #15]
      break;
 80088dc:	e000      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80088de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	00100070 	.word	0x00100070
 8008900:	00100040 	.word	0x00100040
 8008904:	00100030 	.word	0x00100030
 8008908:	00100020 	.word	0x00100020

0800890c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a42      	ldr	r2, [pc, #264]	@ (8008a78 <TIM_Base_SetConfig+0x11c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00f      	beq.n	8008994 <TIM_Base_SetConfig+0x38>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800897a:	d00b      	beq.n	8008994 <TIM_Base_SetConfig+0x38>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a3f      	ldr	r2, [pc, #252]	@ (8008a7c <TIM_Base_SetConfig+0x120>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d007      	beq.n	8008994 <TIM_Base_SetConfig+0x38>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a3e      	ldr	r2, [pc, #248]	@ (8008a80 <TIM_Base_SetConfig+0x124>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d003      	beq.n	8008994 <TIM_Base_SetConfig+0x38>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a3d      	ldr	r2, [pc, #244]	@ (8008a84 <TIM_Base_SetConfig+0x128>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d108      	bne.n	80089a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800899a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a33      	ldr	r2, [pc, #204]	@ (8008a78 <TIM_Base_SetConfig+0x11c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d01b      	beq.n	80089e6 <TIM_Base_SetConfig+0x8a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089b4:	d017      	beq.n	80089e6 <TIM_Base_SetConfig+0x8a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a30      	ldr	r2, [pc, #192]	@ (8008a7c <TIM_Base_SetConfig+0x120>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d013      	beq.n	80089e6 <TIM_Base_SetConfig+0x8a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a2f      	ldr	r2, [pc, #188]	@ (8008a80 <TIM_Base_SetConfig+0x124>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00f      	beq.n	80089e6 <TIM_Base_SetConfig+0x8a>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a2e      	ldr	r2, [pc, #184]	@ (8008a84 <TIM_Base_SetConfig+0x128>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d00b      	beq.n	80089e6 <TIM_Base_SetConfig+0x8a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a88 <TIM_Base_SetConfig+0x12c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d007      	beq.n	80089e6 <TIM_Base_SetConfig+0x8a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a2c      	ldr	r2, [pc, #176]	@ (8008a8c <TIM_Base_SetConfig+0x130>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d003      	beq.n	80089e6 <TIM_Base_SetConfig+0x8a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008a90 <TIM_Base_SetConfig+0x134>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d108      	bne.n	80089f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a16      	ldr	r2, [pc, #88]	@ (8008a78 <TIM_Base_SetConfig+0x11c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00f      	beq.n	8008a44 <TIM_Base_SetConfig+0xe8>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a17      	ldr	r2, [pc, #92]	@ (8008a84 <TIM_Base_SetConfig+0x128>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00b      	beq.n	8008a44 <TIM_Base_SetConfig+0xe8>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a16      	ldr	r2, [pc, #88]	@ (8008a88 <TIM_Base_SetConfig+0x12c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d007      	beq.n	8008a44 <TIM_Base_SetConfig+0xe8>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a15      	ldr	r2, [pc, #84]	@ (8008a8c <TIM_Base_SetConfig+0x130>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d003      	beq.n	8008a44 <TIM_Base_SetConfig+0xe8>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a14      	ldr	r2, [pc, #80]	@ (8008a90 <TIM_Base_SetConfig+0x134>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d103      	bne.n	8008a4c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	691a      	ldr	r2, [r3, #16]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d105      	bne.n	8008a6a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f023 0201 	bic.w	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	611a      	str	r2, [r3, #16]
  }
}
 8008a6a:	bf00      	nop
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40000400 	.word	0x40000400
 8008a80:	40000800 	.word	0x40000800
 8008a84:	40013400 	.word	0x40013400
 8008a88:	40014000 	.word	0x40014000
 8008a8c:	40014400 	.word	0x40014400
 8008a90:	40014800 	.word	0x40014800

08008a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	f023 0201 	bic.w	r2, r3, #1
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f023 0302 	bic.w	r3, r3, #2
 8008ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a2c      	ldr	r2, [pc, #176]	@ (8008ba0 <TIM_OC1_SetConfig+0x10c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00f      	beq.n	8008b14 <TIM_OC1_SetConfig+0x80>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a2b      	ldr	r2, [pc, #172]	@ (8008ba4 <TIM_OC1_SetConfig+0x110>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00b      	beq.n	8008b14 <TIM_OC1_SetConfig+0x80>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a2a      	ldr	r2, [pc, #168]	@ (8008ba8 <TIM_OC1_SetConfig+0x114>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d007      	beq.n	8008b14 <TIM_OC1_SetConfig+0x80>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a29      	ldr	r2, [pc, #164]	@ (8008bac <TIM_OC1_SetConfig+0x118>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d003      	beq.n	8008b14 <TIM_OC1_SetConfig+0x80>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a28      	ldr	r2, [pc, #160]	@ (8008bb0 <TIM_OC1_SetConfig+0x11c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d10c      	bne.n	8008b2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f023 0308 	bic.w	r3, r3, #8
 8008b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f023 0304 	bic.w	r3, r3, #4
 8008b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba0 <TIM_OC1_SetConfig+0x10c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00f      	beq.n	8008b56 <TIM_OC1_SetConfig+0xc2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba4 <TIM_OC1_SetConfig+0x110>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d00b      	beq.n	8008b56 <TIM_OC1_SetConfig+0xc2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a19      	ldr	r2, [pc, #100]	@ (8008ba8 <TIM_OC1_SetConfig+0x114>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d007      	beq.n	8008b56 <TIM_OC1_SetConfig+0xc2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a18      	ldr	r2, [pc, #96]	@ (8008bac <TIM_OC1_SetConfig+0x118>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d003      	beq.n	8008b56 <TIM_OC1_SetConfig+0xc2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a17      	ldr	r2, [pc, #92]	@ (8008bb0 <TIM_OC1_SetConfig+0x11c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d111      	bne.n	8008b7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	621a      	str	r2, [r3, #32]
}
 8008b94:	bf00      	nop
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	40012c00 	.word	0x40012c00
 8008ba4:	40013400 	.word	0x40013400
 8008ba8:	40014000 	.word	0x40014000
 8008bac:	40014400 	.word	0x40014400
 8008bb0:	40014800 	.word	0x40014800

08008bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f023 0210 	bic.w	r2, r3, #16
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f023 0320 	bic.w	r3, r3, #32
 8008c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a28      	ldr	r2, [pc, #160]	@ (8008cb4 <TIM_OC2_SetConfig+0x100>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_OC2_SetConfig+0x6c>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a27      	ldr	r2, [pc, #156]	@ (8008cb8 <TIM_OC2_SetConfig+0x104>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d10d      	bne.n	8008c3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb4 <TIM_OC2_SetConfig+0x100>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00f      	beq.n	8008c64 <TIM_OC2_SetConfig+0xb0>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb8 <TIM_OC2_SetConfig+0x104>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00b      	beq.n	8008c64 <TIM_OC2_SetConfig+0xb0>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8008cbc <TIM_OC2_SetConfig+0x108>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d007      	beq.n	8008c64 <TIM_OC2_SetConfig+0xb0>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a1a      	ldr	r2, [pc, #104]	@ (8008cc0 <TIM_OC2_SetConfig+0x10c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_OC2_SetConfig+0xb0>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a19      	ldr	r2, [pc, #100]	@ (8008cc4 <TIM_OC2_SetConfig+0x110>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d113      	bne.n	8008c8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	621a      	str	r2, [r3, #32]
}
 8008ca6:	bf00      	nop
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	40012c00 	.word	0x40012c00
 8008cb8:	40013400 	.word	0x40013400
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	40014400 	.word	0x40014400
 8008cc4:	40014800 	.word	0x40014800

08008cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 0303 	bic.w	r3, r3, #3
 8008d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a27      	ldr	r2, [pc, #156]	@ (8008dc4 <TIM_OC3_SetConfig+0xfc>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d003      	beq.n	8008d32 <TIM_OC3_SetConfig+0x6a>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a26      	ldr	r2, [pc, #152]	@ (8008dc8 <TIM_OC3_SetConfig+0x100>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d10d      	bne.n	8008d4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc4 <TIM_OC3_SetConfig+0xfc>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00f      	beq.n	8008d76 <TIM_OC3_SetConfig+0xae>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc8 <TIM_OC3_SetConfig+0x100>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d00b      	beq.n	8008d76 <TIM_OC3_SetConfig+0xae>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1a      	ldr	r2, [pc, #104]	@ (8008dcc <TIM_OC3_SetConfig+0x104>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d007      	beq.n	8008d76 <TIM_OC3_SetConfig+0xae>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a19      	ldr	r2, [pc, #100]	@ (8008dd0 <TIM_OC3_SetConfig+0x108>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d003      	beq.n	8008d76 <TIM_OC3_SetConfig+0xae>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a18      	ldr	r2, [pc, #96]	@ (8008dd4 <TIM_OC3_SetConfig+0x10c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d113      	bne.n	8008d9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	011b      	lsls	r3, r3, #4
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	621a      	str	r2, [r3, #32]
}
 8008db8:	bf00      	nop
 8008dba:	371c      	adds	r7, #28
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	40012c00 	.word	0x40012c00
 8008dc8:	40013400 	.word	0x40013400
 8008dcc:	40014000 	.word	0x40014000
 8008dd0:	40014400 	.word	0x40014400
 8008dd4:	40014800 	.word	0x40014800

08008dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	031b      	lsls	r3, r3, #12
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a28      	ldr	r2, [pc, #160]	@ (8008ed8 <TIM_OC4_SetConfig+0x100>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d003      	beq.n	8008e44 <TIM_OC4_SetConfig+0x6c>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a27      	ldr	r2, [pc, #156]	@ (8008edc <TIM_OC4_SetConfig+0x104>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d10d      	bne.n	8008e60 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	031b      	lsls	r3, r3, #12
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a1d      	ldr	r2, [pc, #116]	@ (8008ed8 <TIM_OC4_SetConfig+0x100>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00f      	beq.n	8008e88 <TIM_OC4_SetConfig+0xb0>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008edc <TIM_OC4_SetConfig+0x104>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00b      	beq.n	8008e88 <TIM_OC4_SetConfig+0xb0>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a1b      	ldr	r2, [pc, #108]	@ (8008ee0 <TIM_OC4_SetConfig+0x108>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d007      	beq.n	8008e88 <TIM_OC4_SetConfig+0xb0>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee4 <TIM_OC4_SetConfig+0x10c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d003      	beq.n	8008e88 <TIM_OC4_SetConfig+0xb0>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a19      	ldr	r2, [pc, #100]	@ (8008ee8 <TIM_OC4_SetConfig+0x110>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d113      	bne.n	8008eb0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	019b      	lsls	r3, r3, #6
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	019b      	lsls	r3, r3, #6
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	621a      	str	r2, [r3, #32]
}
 8008eca:	bf00      	nop
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	40012c00 	.word	0x40012c00
 8008edc:	40013400 	.word	0x40013400
 8008ee0:	40014000 	.word	0x40014000
 8008ee4:	40014400 	.word	0x40014400
 8008ee8:	40014800 	.word	0x40014800

08008eec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008f30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	041b      	lsls	r3, r3, #16
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a17      	ldr	r2, [pc, #92]	@ (8008fa0 <TIM_OC5_SetConfig+0xb4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d00f      	beq.n	8008f66 <TIM_OC5_SetConfig+0x7a>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a16      	ldr	r2, [pc, #88]	@ (8008fa4 <TIM_OC5_SetConfig+0xb8>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00b      	beq.n	8008f66 <TIM_OC5_SetConfig+0x7a>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a15      	ldr	r2, [pc, #84]	@ (8008fa8 <TIM_OC5_SetConfig+0xbc>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d007      	beq.n	8008f66 <TIM_OC5_SetConfig+0x7a>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a14      	ldr	r2, [pc, #80]	@ (8008fac <TIM_OC5_SetConfig+0xc0>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d003      	beq.n	8008f66 <TIM_OC5_SetConfig+0x7a>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a13      	ldr	r2, [pc, #76]	@ (8008fb0 <TIM_OC5_SetConfig+0xc4>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d109      	bne.n	8008f7a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	021b      	lsls	r3, r3, #8
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	621a      	str	r2, [r3, #32]
}
 8008f94:	bf00      	nop
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	40012c00 	.word	0x40012c00
 8008fa4:	40013400 	.word	0x40013400
 8008fa8:	40014000 	.word	0x40014000
 8008fac:	40014400 	.word	0x40014400
 8008fb0:	40014800 	.word	0x40014800

08008fb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	051b      	lsls	r3, r3, #20
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	4313      	orrs	r3, r2
 8009006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a18      	ldr	r2, [pc, #96]	@ (800906c <TIM_OC6_SetConfig+0xb8>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d00f      	beq.n	8009030 <TIM_OC6_SetConfig+0x7c>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a17      	ldr	r2, [pc, #92]	@ (8009070 <TIM_OC6_SetConfig+0xbc>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d00b      	beq.n	8009030 <TIM_OC6_SetConfig+0x7c>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a16      	ldr	r2, [pc, #88]	@ (8009074 <TIM_OC6_SetConfig+0xc0>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d007      	beq.n	8009030 <TIM_OC6_SetConfig+0x7c>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a15      	ldr	r2, [pc, #84]	@ (8009078 <TIM_OC6_SetConfig+0xc4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d003      	beq.n	8009030 <TIM_OC6_SetConfig+0x7c>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a14      	ldr	r2, [pc, #80]	@ (800907c <TIM_OC6_SetConfig+0xc8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d109      	bne.n	8009044 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009036:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	029b      	lsls	r3, r3, #10
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	621a      	str	r2, [r3, #32]
}
 800905e:	bf00      	nop
 8009060:	371c      	adds	r7, #28
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	40012c00 	.word	0x40012c00
 8009070:	40013400 	.word	0x40013400
 8009074:	40014000 	.word	0x40014000
 8009078:	40014400 	.word	0x40014400
 800907c:	40014800 	.word	0x40014800

08009080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	f023 0201 	bic.w	r2, r3, #1
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f023 030a 	bic.w	r3, r3, #10
 80090bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	621a      	str	r2, [r3, #32]
}
 80090d2:	bf00      	nop
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090de:	b480      	push	{r7}
 80090e0:	b087      	sub	sp, #28
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	f023 0210 	bic.w	r2, r3, #16
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	031b      	lsls	r3, r3, #12
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	4313      	orrs	r3, r2
 8009112:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800911a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	4313      	orrs	r3, r2
 8009124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	621a      	str	r2, [r3, #32]
}
 8009132:	bf00      	nop
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800913e:	b480      	push	{r7}
 8009140:	b085      	sub	sp, #20
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4313      	orrs	r3, r2
 8009160:	f043 0307 	orr.w	r3, r3, #7
 8009164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	609a      	str	r2, [r3, #8]
}
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	021a      	lsls	r2, r3, #8
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	431a      	orrs	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4313      	orrs	r3, r2
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	609a      	str	r2, [r3, #8]
}
 80091ac:	bf00      	nop
 80091ae:	371c      	adds	r7, #28
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f003 031f 	and.w	r3, r3, #31
 80091ca:	2201      	movs	r2, #1
 80091cc:	fa02 f303 	lsl.w	r3, r2, r3
 80091d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a1a      	ldr	r2, [r3, #32]
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	43db      	mvns	r3, r3
 80091da:	401a      	ands	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6a1a      	ldr	r2, [r3, #32]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f003 031f 	and.w	r3, r3, #31
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	fa01 f303 	lsl.w	r3, r1, r3
 80091f0:	431a      	orrs	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	621a      	str	r2, [r3, #32]
}
 80091f6:	bf00      	nop
 80091f8:	371c      	adds	r7, #28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
	...

08009204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009214:	2b01      	cmp	r3, #1
 8009216:	d101      	bne.n	800921c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009218:	2302      	movs	r3, #2
 800921a:	e065      	b.n	80092e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a2c      	ldr	r2, [pc, #176]	@ (80092f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d004      	beq.n	8009250 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a2b      	ldr	r2, [pc, #172]	@ (80092f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d108      	bne.n	8009262 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009256:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800926c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4313      	orrs	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a1b      	ldr	r2, [pc, #108]	@ (80092f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d018      	beq.n	80092bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009292:	d013      	beq.n	80092bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a18      	ldr	r2, [pc, #96]	@ (80092fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d00e      	beq.n	80092bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a17      	ldr	r2, [pc, #92]	@ (8009300 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d009      	beq.n	80092bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a12      	ldr	r2, [pc, #72]	@ (80092f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d004      	beq.n	80092bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a13      	ldr	r2, [pc, #76]	@ (8009304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d10c      	bne.n	80092d6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	40012c00 	.word	0x40012c00
 80092f8:	40013400 	.word	0x40013400
 80092fc:	40000400 	.word	0x40000400
 8009300:	40000800 	.word	0x40000800
 8009304:	40014000 	.word	0x40014000

08009308 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009320:	2302      	movs	r3, #2
 8009322:	e073      	b.n	800940c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	4313      	orrs	r3, r2
 8009338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	4313      	orrs	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4313      	orrs	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	4313      	orrs	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	041b      	lsls	r3, r3, #16
 800939a:	4313      	orrs	r3, r2
 800939c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a19      	ldr	r2, [pc, #100]	@ (8009418 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d004      	beq.n	80093c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a18      	ldr	r2, [pc, #96]	@ (800941c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d11c      	bne.n	80093fa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ca:	051b      	lsls	r3, r3, #20
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	40012c00 	.word	0x40012c00
 800941c:	40013400 	.word	0x40013400

08009420 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e042      	b.n	8009544 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d106      	bne.n	80094d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7fa f94f 	bl	8003774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2224      	movs	r2, #36	@ 0x24
 80094da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0201 	bic.w	r2, r2, #1
 80094ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 faf4 	bl	8009ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f825 	bl	800954c <UART_SetConfig>
 8009502:	4603      	mov	r3, r0
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e01b      	b.n	8009544 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800951a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800952a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fb73 	bl	8009c28 <UART_CheckIdleState>
 8009542:	4603      	mov	r3, r0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800954c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009550:	b08c      	sub	sp, #48	@ 0x30
 8009552:	af00      	add	r7, sp, #0
 8009554:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	431a      	orrs	r2, r3
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	431a      	orrs	r2, r3
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	4313      	orrs	r3, r2
 8009572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4bab      	ldr	r3, [pc, #684]	@ (8009828 <UART_SetConfig+0x2dc>)
 800957c:	4013      	ands	r3, r2
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	6812      	ldr	r2, [r2, #0]
 8009582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009584:	430b      	orrs	r3, r1
 8009586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4aa0      	ldr	r2, [pc, #640]	@ (800982c <UART_SetConfig+0x2e0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d004      	beq.n	80095b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095b4:	4313      	orrs	r3, r2
 80095b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80095c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	6812      	ldr	r2, [r2, #0]
 80095ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d6:	f023 010f 	bic.w	r1, r3, #15
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a91      	ldr	r2, [pc, #580]	@ (8009830 <UART_SetConfig+0x2e4>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d125      	bne.n	800963c <UART_SetConfig+0xf0>
 80095f0:	4b90      	ldr	r3, [pc, #576]	@ (8009834 <UART_SetConfig+0x2e8>)
 80095f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f6:	f003 0303 	and.w	r3, r3, #3
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d81a      	bhi.n	8009634 <UART_SetConfig+0xe8>
 80095fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009604 <UART_SetConfig+0xb8>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009615 	.word	0x08009615
 8009608:	08009625 	.word	0x08009625
 800960c:	0800961d 	.word	0x0800961d
 8009610:	0800962d 	.word	0x0800962d
 8009614:	2301      	movs	r3, #1
 8009616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800961a:	e0d6      	b.n	80097ca <UART_SetConfig+0x27e>
 800961c:	2302      	movs	r3, #2
 800961e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009622:	e0d2      	b.n	80097ca <UART_SetConfig+0x27e>
 8009624:	2304      	movs	r3, #4
 8009626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800962a:	e0ce      	b.n	80097ca <UART_SetConfig+0x27e>
 800962c:	2308      	movs	r3, #8
 800962e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009632:	e0ca      	b.n	80097ca <UART_SetConfig+0x27e>
 8009634:	2310      	movs	r3, #16
 8009636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800963a:	e0c6      	b.n	80097ca <UART_SetConfig+0x27e>
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a7d      	ldr	r2, [pc, #500]	@ (8009838 <UART_SetConfig+0x2ec>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d138      	bne.n	80096b8 <UART_SetConfig+0x16c>
 8009646:	4b7b      	ldr	r3, [pc, #492]	@ (8009834 <UART_SetConfig+0x2e8>)
 8009648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800964c:	f003 030c 	and.w	r3, r3, #12
 8009650:	2b0c      	cmp	r3, #12
 8009652:	d82d      	bhi.n	80096b0 <UART_SetConfig+0x164>
 8009654:	a201      	add	r2, pc, #4	@ (adr r2, 800965c <UART_SetConfig+0x110>)
 8009656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965a:	bf00      	nop
 800965c:	08009691 	.word	0x08009691
 8009660:	080096b1 	.word	0x080096b1
 8009664:	080096b1 	.word	0x080096b1
 8009668:	080096b1 	.word	0x080096b1
 800966c:	080096a1 	.word	0x080096a1
 8009670:	080096b1 	.word	0x080096b1
 8009674:	080096b1 	.word	0x080096b1
 8009678:	080096b1 	.word	0x080096b1
 800967c:	08009699 	.word	0x08009699
 8009680:	080096b1 	.word	0x080096b1
 8009684:	080096b1 	.word	0x080096b1
 8009688:	080096b1 	.word	0x080096b1
 800968c:	080096a9 	.word	0x080096a9
 8009690:	2300      	movs	r3, #0
 8009692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009696:	e098      	b.n	80097ca <UART_SetConfig+0x27e>
 8009698:	2302      	movs	r3, #2
 800969a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800969e:	e094      	b.n	80097ca <UART_SetConfig+0x27e>
 80096a0:	2304      	movs	r3, #4
 80096a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096a6:	e090      	b.n	80097ca <UART_SetConfig+0x27e>
 80096a8:	2308      	movs	r3, #8
 80096aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ae:	e08c      	b.n	80097ca <UART_SetConfig+0x27e>
 80096b0:	2310      	movs	r3, #16
 80096b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096b6:	e088      	b.n	80097ca <UART_SetConfig+0x27e>
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a5f      	ldr	r2, [pc, #380]	@ (800983c <UART_SetConfig+0x2f0>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d125      	bne.n	800970e <UART_SetConfig+0x1c2>
 80096c2:	4b5c      	ldr	r3, [pc, #368]	@ (8009834 <UART_SetConfig+0x2e8>)
 80096c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80096cc:	2b30      	cmp	r3, #48	@ 0x30
 80096ce:	d016      	beq.n	80096fe <UART_SetConfig+0x1b2>
 80096d0:	2b30      	cmp	r3, #48	@ 0x30
 80096d2:	d818      	bhi.n	8009706 <UART_SetConfig+0x1ba>
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d00a      	beq.n	80096ee <UART_SetConfig+0x1a2>
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d814      	bhi.n	8009706 <UART_SetConfig+0x1ba>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <UART_SetConfig+0x19a>
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d008      	beq.n	80096f6 <UART_SetConfig+0x1aa>
 80096e4:	e00f      	b.n	8009706 <UART_SetConfig+0x1ba>
 80096e6:	2300      	movs	r3, #0
 80096e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ec:	e06d      	b.n	80097ca <UART_SetConfig+0x27e>
 80096ee:	2302      	movs	r3, #2
 80096f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096f4:	e069      	b.n	80097ca <UART_SetConfig+0x27e>
 80096f6:	2304      	movs	r3, #4
 80096f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096fc:	e065      	b.n	80097ca <UART_SetConfig+0x27e>
 80096fe:	2308      	movs	r3, #8
 8009700:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009704:	e061      	b.n	80097ca <UART_SetConfig+0x27e>
 8009706:	2310      	movs	r3, #16
 8009708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800970c:	e05d      	b.n	80097ca <UART_SetConfig+0x27e>
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a4b      	ldr	r2, [pc, #300]	@ (8009840 <UART_SetConfig+0x2f4>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d125      	bne.n	8009764 <UART_SetConfig+0x218>
 8009718:	4b46      	ldr	r3, [pc, #280]	@ (8009834 <UART_SetConfig+0x2e8>)
 800971a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800971e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009722:	2bc0      	cmp	r3, #192	@ 0xc0
 8009724:	d016      	beq.n	8009754 <UART_SetConfig+0x208>
 8009726:	2bc0      	cmp	r3, #192	@ 0xc0
 8009728:	d818      	bhi.n	800975c <UART_SetConfig+0x210>
 800972a:	2b80      	cmp	r3, #128	@ 0x80
 800972c:	d00a      	beq.n	8009744 <UART_SetConfig+0x1f8>
 800972e:	2b80      	cmp	r3, #128	@ 0x80
 8009730:	d814      	bhi.n	800975c <UART_SetConfig+0x210>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <UART_SetConfig+0x1f0>
 8009736:	2b40      	cmp	r3, #64	@ 0x40
 8009738:	d008      	beq.n	800974c <UART_SetConfig+0x200>
 800973a:	e00f      	b.n	800975c <UART_SetConfig+0x210>
 800973c:	2300      	movs	r3, #0
 800973e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009742:	e042      	b.n	80097ca <UART_SetConfig+0x27e>
 8009744:	2302      	movs	r3, #2
 8009746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800974a:	e03e      	b.n	80097ca <UART_SetConfig+0x27e>
 800974c:	2304      	movs	r3, #4
 800974e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009752:	e03a      	b.n	80097ca <UART_SetConfig+0x27e>
 8009754:	2308      	movs	r3, #8
 8009756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800975a:	e036      	b.n	80097ca <UART_SetConfig+0x27e>
 800975c:	2310      	movs	r3, #16
 800975e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009762:	e032      	b.n	80097ca <UART_SetConfig+0x27e>
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a30      	ldr	r2, [pc, #192]	@ (800982c <UART_SetConfig+0x2e0>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d12a      	bne.n	80097c4 <UART_SetConfig+0x278>
 800976e:	4b31      	ldr	r3, [pc, #196]	@ (8009834 <UART_SetConfig+0x2e8>)
 8009770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009774:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009778:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800977c:	d01a      	beq.n	80097b4 <UART_SetConfig+0x268>
 800977e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009782:	d81b      	bhi.n	80097bc <UART_SetConfig+0x270>
 8009784:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009788:	d00c      	beq.n	80097a4 <UART_SetConfig+0x258>
 800978a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800978e:	d815      	bhi.n	80097bc <UART_SetConfig+0x270>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <UART_SetConfig+0x250>
 8009794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009798:	d008      	beq.n	80097ac <UART_SetConfig+0x260>
 800979a:	e00f      	b.n	80097bc <UART_SetConfig+0x270>
 800979c:	2300      	movs	r3, #0
 800979e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097a2:	e012      	b.n	80097ca <UART_SetConfig+0x27e>
 80097a4:	2302      	movs	r3, #2
 80097a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097aa:	e00e      	b.n	80097ca <UART_SetConfig+0x27e>
 80097ac:	2304      	movs	r3, #4
 80097ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097b2:	e00a      	b.n	80097ca <UART_SetConfig+0x27e>
 80097b4:	2308      	movs	r3, #8
 80097b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ba:	e006      	b.n	80097ca <UART_SetConfig+0x27e>
 80097bc:	2310      	movs	r3, #16
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097c2:	e002      	b.n	80097ca <UART_SetConfig+0x27e>
 80097c4:	2310      	movs	r3, #16
 80097c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a17      	ldr	r2, [pc, #92]	@ (800982c <UART_SetConfig+0x2e0>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	f040 80a8 	bne.w	8009926 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80097da:	2b08      	cmp	r3, #8
 80097dc:	d834      	bhi.n	8009848 <UART_SetConfig+0x2fc>
 80097de:	a201      	add	r2, pc, #4	@ (adr r2, 80097e4 <UART_SetConfig+0x298>)
 80097e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e4:	08009809 	.word	0x08009809
 80097e8:	08009849 	.word	0x08009849
 80097ec:	08009811 	.word	0x08009811
 80097f0:	08009849 	.word	0x08009849
 80097f4:	08009817 	.word	0x08009817
 80097f8:	08009849 	.word	0x08009849
 80097fc:	08009849 	.word	0x08009849
 8009800:	08009849 	.word	0x08009849
 8009804:	0800981f 	.word	0x0800981f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009808:	f7fd f90e 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 800980c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800980e:	e021      	b.n	8009854 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009810:	4b0c      	ldr	r3, [pc, #48]	@ (8009844 <UART_SetConfig+0x2f8>)
 8009812:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009814:	e01e      	b.n	8009854 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009816:	f7fd f899 	bl	800694c <HAL_RCC_GetSysClockFreq>
 800981a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800981c:	e01a      	b.n	8009854 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800981e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009822:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009824:	e016      	b.n	8009854 <UART_SetConfig+0x308>
 8009826:	bf00      	nop
 8009828:	cfff69f3 	.word	0xcfff69f3
 800982c:	40008000 	.word	0x40008000
 8009830:	40013800 	.word	0x40013800
 8009834:	40021000 	.word	0x40021000
 8009838:	40004400 	.word	0x40004400
 800983c:	40004800 	.word	0x40004800
 8009840:	40004c00 	.word	0x40004c00
 8009844:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009852:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 812a 	beq.w	8009ab0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009860:	4a9e      	ldr	r2, [pc, #632]	@ (8009adc <UART_SetConfig+0x590>)
 8009862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009866:	461a      	mov	r2, r3
 8009868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986a:	fbb3 f3f2 	udiv	r3, r3, r2
 800986e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	685a      	ldr	r2, [r3, #4]
 8009874:	4613      	mov	r3, r2
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	4413      	add	r3, r2
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	429a      	cmp	r2, r3
 800987e:	d305      	bcc.n	800988c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	429a      	cmp	r2, r3
 800988a:	d903      	bls.n	8009894 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009892:	e10d      	b.n	8009ab0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009896:	2200      	movs	r2, #0
 8009898:	60bb      	str	r3, [r7, #8]
 800989a:	60fa      	str	r2, [r7, #12]
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a0:	4a8e      	ldr	r2, [pc, #568]	@ (8009adc <UART_SetConfig+0x590>)
 80098a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	2200      	movs	r2, #0
 80098aa:	603b      	str	r3, [r7, #0]
 80098ac:	607a      	str	r2, [r7, #4]
 80098ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098b6:	f7f7 f8b5 	bl	8000a24 <__aeabi_uldivmod>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4610      	mov	r0, r2
 80098c0:	4619      	mov	r1, r3
 80098c2:	f04f 0200 	mov.w	r2, #0
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	020b      	lsls	r3, r1, #8
 80098cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098d0:	0202      	lsls	r2, r0, #8
 80098d2:	6979      	ldr	r1, [r7, #20]
 80098d4:	6849      	ldr	r1, [r1, #4]
 80098d6:	0849      	lsrs	r1, r1, #1
 80098d8:	2000      	movs	r0, #0
 80098da:	460c      	mov	r4, r1
 80098dc:	4605      	mov	r5, r0
 80098de:	eb12 0804 	adds.w	r8, r2, r4
 80098e2:	eb43 0905 	adc.w	r9, r3, r5
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	469a      	mov	sl, r3
 80098ee:	4693      	mov	fp, r2
 80098f0:	4652      	mov	r2, sl
 80098f2:	465b      	mov	r3, fp
 80098f4:	4640      	mov	r0, r8
 80098f6:	4649      	mov	r1, r9
 80098f8:	f7f7 f894 	bl	8000a24 <__aeabi_uldivmod>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4613      	mov	r3, r2
 8009902:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800990a:	d308      	bcc.n	800991e <UART_SetConfig+0x3d2>
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009912:	d204      	bcs.n	800991e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6a3a      	ldr	r2, [r7, #32]
 800991a:	60da      	str	r2, [r3, #12]
 800991c:	e0c8      	b.n	8009ab0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009924:	e0c4      	b.n	8009ab0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800992e:	d167      	bne.n	8009a00 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009930:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009934:	2b08      	cmp	r3, #8
 8009936:	d828      	bhi.n	800998a <UART_SetConfig+0x43e>
 8009938:	a201      	add	r2, pc, #4	@ (adr r2, 8009940 <UART_SetConfig+0x3f4>)
 800993a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993e:	bf00      	nop
 8009940:	08009965 	.word	0x08009965
 8009944:	0800996d 	.word	0x0800996d
 8009948:	08009975 	.word	0x08009975
 800994c:	0800998b 	.word	0x0800998b
 8009950:	0800997b 	.word	0x0800997b
 8009954:	0800998b 	.word	0x0800998b
 8009958:	0800998b 	.word	0x0800998b
 800995c:	0800998b 	.word	0x0800998b
 8009960:	08009983 	.word	0x08009983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009964:	f7fd f860 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 8009968:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800996a:	e014      	b.n	8009996 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800996c:	f7fd f872 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
 8009970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009972:	e010      	b.n	8009996 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009974:	4b5a      	ldr	r3, [pc, #360]	@ (8009ae0 <UART_SetConfig+0x594>)
 8009976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009978:	e00d      	b.n	8009996 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800997a:	f7fc ffe7 	bl	800694c <HAL_RCC_GetSysClockFreq>
 800997e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009980:	e009      	b.n	8009996 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009988:	e005      	b.n	8009996 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 8089 	beq.w	8009ab0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a2:	4a4e      	ldr	r2, [pc, #312]	@ (8009adc <UART_SetConfig+0x590>)
 80099a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a8:	461a      	mov	r2, r3
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80099b0:	005a      	lsls	r2, r3, #1
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	441a      	add	r2, r3
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	2b0f      	cmp	r3, #15
 80099c8:	d916      	bls.n	80099f8 <UART_SetConfig+0x4ac>
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099d0:	d212      	bcs.n	80099f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f023 030f 	bic.w	r3, r3, #15
 80099da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	085b      	lsrs	r3, r3, #1
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	8bfb      	ldrh	r3, [r7, #30]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	8bfa      	ldrh	r2, [r7, #30]
 80099f4:	60da      	str	r2, [r3, #12]
 80099f6:	e05b      	b.n	8009ab0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80099fe:	e057      	b.n	8009ab0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d828      	bhi.n	8009a5a <UART_SetConfig+0x50e>
 8009a08:	a201      	add	r2, pc, #4	@ (adr r2, 8009a10 <UART_SetConfig+0x4c4>)
 8009a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0e:	bf00      	nop
 8009a10:	08009a35 	.word	0x08009a35
 8009a14:	08009a3d 	.word	0x08009a3d
 8009a18:	08009a45 	.word	0x08009a45
 8009a1c:	08009a5b 	.word	0x08009a5b
 8009a20:	08009a4b 	.word	0x08009a4b
 8009a24:	08009a5b 	.word	0x08009a5b
 8009a28:	08009a5b 	.word	0x08009a5b
 8009a2c:	08009a5b 	.word	0x08009a5b
 8009a30:	08009a53 	.word	0x08009a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a34:	f7fc fff8 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 8009a38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a3a:	e014      	b.n	8009a66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a3c:	f7fd f80a 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
 8009a40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a42:	e010      	b.n	8009a66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a44:	4b26      	ldr	r3, [pc, #152]	@ (8009ae0 <UART_SetConfig+0x594>)
 8009a46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a48:	e00d      	b.n	8009a66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a4a:	f7fc ff7f 	bl	800694c <HAL_RCC_GetSysClockFreq>
 8009a4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a50:	e009      	b.n	8009a66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a58:	e005      	b.n	8009a66 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a64:	bf00      	nop
    }

    if (pclk != 0U)
 8009a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d021      	beq.n	8009ab0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a70:	4a1a      	ldr	r2, [pc, #104]	@ (8009adc <UART_SetConfig+0x590>)
 8009a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a76:	461a      	mov	r2, r3
 8009a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	085b      	lsrs	r3, r3, #1
 8009a84:	441a      	add	r2, r3
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	2b0f      	cmp	r3, #15
 8009a94:	d909      	bls.n	8009aaa <UART_SetConfig+0x55e>
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a9c:	d205      	bcs.n	8009aaa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60da      	str	r2, [r3, #12]
 8009aa8:	e002      	b.n	8009ab0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009acc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3730      	adds	r7, #48	@ 0x30
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ada:	bf00      	nop
 8009adc:	0800c1c0 	.word	0x0800c1c0
 8009ae0:	00f42400 	.word	0x00f42400

08009ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af0:	f003 0308 	and.w	r3, r3, #8
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00a      	beq.n	8009b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b78:	f003 0310 	and.w	r3, r3, #16
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00a      	beq.n	8009b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9a:	f003 0320 	and.w	r3, r3, #32
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d01a      	beq.n	8009bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009be2:	d10a      	bne.n	8009bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	605a      	str	r2, [r3, #4]
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b098      	sub	sp, #96	@ 0x60
 8009c2c:	af02      	add	r7, sp, #8
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c38:	f7f9 ff06 	bl	8003a48 <HAL_GetTick>
 8009c3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0308 	and.w	r3, r3, #8
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d12f      	bne.n	8009cac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c54:	2200      	movs	r2, #0
 8009c56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f88e 	bl	8009d7c <UART_WaitOnFlagUntilTimeout>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d022      	beq.n	8009cac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6e:	e853 3f00 	ldrex	r3, [r3]
 8009c72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e6      	bne.n	8009c66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e063      	b.n	8009d74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 0304 	and.w	r3, r3, #4
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d149      	bne.n	8009d4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f857 	bl	8009d7c <UART_WaitOnFlagUntilTimeout>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d03c      	beq.n	8009d4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cfa:	e841 2300 	strex	r3, r2, [r1]
 8009cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e6      	bne.n	8009cd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f023 0301 	bic.w	r3, r3, #1
 8009d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3308      	adds	r3, #8
 8009d24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d26:	61fa      	str	r2, [r7, #28]
 8009d28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	69b9      	ldr	r1, [r7, #24]
 8009d2c:	69fa      	ldr	r2, [r7, #28]
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	617b      	str	r3, [r7, #20]
   return(result);
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e5      	bne.n	8009d06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e012      	b.n	8009d74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3758      	adds	r7, #88	@ 0x58
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d8c:	e04f      	b.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d94:	d04b      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d96:	f7f9 fe57 	bl	8003a48 <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	69ba      	ldr	r2, [r7, #24]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d302      	bcc.n	8009dac <UART_WaitOnFlagUntilTimeout+0x30>
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e04e      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d037      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2b80      	cmp	r3, #128	@ 0x80
 8009dc2:	d034      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2b40      	cmp	r3, #64	@ 0x40
 8009dc8:	d031      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	f003 0308 	and.w	r3, r3, #8
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d110      	bne.n	8009dfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2208      	movs	r2, #8
 8009dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 f838 	bl	8009e56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2208      	movs	r2, #8
 8009dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e029      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e08:	d111      	bne.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 f81e 	bl	8009e56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e00f      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69da      	ldr	r2, [r3, #28]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4013      	ands	r3, r2
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	bf0c      	ite	eq
 8009e3e:	2301      	moveq	r3, #1
 8009e40:	2300      	movne	r3, #0
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d0a0      	beq.n	8009d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b095      	sub	sp, #84	@ 0x54
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e6      	bne.n	8009e5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3308      	adds	r3, #8
 8009e96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	e853 3f00 	ldrex	r3, [r3]
 8009e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ebc:	e841 2300 	strex	r3, r2, [r1]
 8009ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e3      	bne.n	8009e90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d118      	bne.n	8009f02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f023 0310 	bic.w	r3, r3, #16
 8009ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eee:	61bb      	str	r3, [r7, #24]
 8009ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	6979      	ldr	r1, [r7, #20]
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	613b      	str	r3, [r7, #16]
   return(result);
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e6      	bne.n	8009ed0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f16:	bf00      	nop
 8009f18:	3754      	adds	r7, #84	@ 0x54
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b085      	sub	sp, #20
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d101      	bne.n	8009f38 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f34:	2302      	movs	r3, #2
 8009f36:	e027      	b.n	8009f88 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2224      	movs	r2, #36	@ 0x24
 8009f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f022 0201 	bic.w	r2, r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d101      	bne.n	8009fac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	e02d      	b.n	800a008 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2224      	movs	r2, #36	@ 0x24
 8009fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0201 	bic.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f84f 	bl	800a08c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a024:	2302      	movs	r3, #2
 800a026:	e02d      	b.n	800a084 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2224      	movs	r2, #36	@ 0x24
 800a034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 0201 	bic.w	r2, r2, #1
 800a04e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f811 	bl	800a08c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2220      	movs	r2, #32
 800a076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d108      	bne.n	800a0ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0ac:	e031      	b.n	800a112 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0ae:	2308      	movs	r3, #8
 800a0b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0b2:	2308      	movs	r3, #8
 800a0b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	0e5b      	lsrs	r3, r3, #25
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	f003 0307 	and.w	r3, r3, #7
 800a0c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	0f5b      	lsrs	r3, r3, #29
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	f003 0307 	and.w	r3, r3, #7
 800a0d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	7b3a      	ldrb	r2, [r7, #12]
 800a0da:	4911      	ldr	r1, [pc, #68]	@ (800a120 <UARTEx_SetNbDataToProcess+0x94>)
 800a0dc:	5c8a      	ldrb	r2, [r1, r2]
 800a0de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0e2:	7b3a      	ldrb	r2, [r7, #12]
 800a0e4:	490f      	ldr	r1, [pc, #60]	@ (800a124 <UARTEx_SetNbDataToProcess+0x98>)
 800a0e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	7b7a      	ldrb	r2, [r7, #13]
 800a0f8:	4909      	ldr	r1, [pc, #36]	@ (800a120 <UARTEx_SetNbDataToProcess+0x94>)
 800a0fa:	5c8a      	ldrb	r2, [r1, r2]
 800a0fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a100:	7b7a      	ldrb	r2, [r7, #13]
 800a102:	4908      	ldr	r1, [pc, #32]	@ (800a124 <UARTEx_SetNbDataToProcess+0x98>)
 800a104:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a106:	fb93 f3f2 	sdiv	r3, r3, r2
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a112:	bf00      	nop
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	0800c1d8 	.word	0x0800c1d8
 800a124:	0800c1e0 	.word	0x0800c1e0

0800a128 <memset>:
 800a128:	4402      	add	r2, r0
 800a12a:	4603      	mov	r3, r0
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d100      	bne.n	800a132 <memset+0xa>
 800a130:	4770      	bx	lr
 800a132:	f803 1b01 	strb.w	r1, [r3], #1
 800a136:	e7f9      	b.n	800a12c <memset+0x4>

0800a138 <__errno>:
 800a138:	4b01      	ldr	r3, [pc, #4]	@ (800a140 <__errno+0x8>)
 800a13a:	6818      	ldr	r0, [r3, #0]
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	20000058 	.word	0x20000058

0800a144 <__libc_init_array>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	4d0d      	ldr	r5, [pc, #52]	@ (800a17c <__libc_init_array+0x38>)
 800a148:	4c0d      	ldr	r4, [pc, #52]	@ (800a180 <__libc_init_array+0x3c>)
 800a14a:	1b64      	subs	r4, r4, r5
 800a14c:	10a4      	asrs	r4, r4, #2
 800a14e:	2600      	movs	r6, #0
 800a150:	42a6      	cmp	r6, r4
 800a152:	d109      	bne.n	800a168 <__libc_init_array+0x24>
 800a154:	4d0b      	ldr	r5, [pc, #44]	@ (800a184 <__libc_init_array+0x40>)
 800a156:	4c0c      	ldr	r4, [pc, #48]	@ (800a188 <__libc_init_array+0x44>)
 800a158:	f002 f80a 	bl	800c170 <_init>
 800a15c:	1b64      	subs	r4, r4, r5
 800a15e:	10a4      	asrs	r4, r4, #2
 800a160:	2600      	movs	r6, #0
 800a162:	42a6      	cmp	r6, r4
 800a164:	d105      	bne.n	800a172 <__libc_init_array+0x2e>
 800a166:	bd70      	pop	{r4, r5, r6, pc}
 800a168:	f855 3b04 	ldr.w	r3, [r5], #4
 800a16c:	4798      	blx	r3
 800a16e:	3601      	adds	r6, #1
 800a170:	e7ee      	b.n	800a150 <__libc_init_array+0xc>
 800a172:	f855 3b04 	ldr.w	r3, [r5], #4
 800a176:	4798      	blx	r3
 800a178:	3601      	adds	r6, #1
 800a17a:	e7f2      	b.n	800a162 <__libc_init_array+0x1e>
 800a17c:	0800c7d0 	.word	0x0800c7d0
 800a180:	0800c7d0 	.word	0x0800c7d0
 800a184:	0800c7d0 	.word	0x0800c7d0
 800a188:	0800c7d4 	.word	0x0800c7d4
 800a18c:	00000000 	.word	0x00000000

0800a190 <cos>:
 800a190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a192:	ec53 2b10 	vmov	r2, r3, d0
 800a196:	4826      	ldr	r0, [pc, #152]	@ (800a230 <cos+0xa0>)
 800a198:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a19c:	4281      	cmp	r1, r0
 800a19e:	d806      	bhi.n	800a1ae <cos+0x1e>
 800a1a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a228 <cos+0x98>
 800a1a4:	b005      	add	sp, #20
 800a1a6:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1aa:	f000 b99d 	b.w	800a4e8 <__kernel_cos>
 800a1ae:	4821      	ldr	r0, [pc, #132]	@ (800a234 <cos+0xa4>)
 800a1b0:	4281      	cmp	r1, r0
 800a1b2:	d908      	bls.n	800a1c6 <cos+0x36>
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f7f6 f95c 	bl	8000474 <__aeabi_dsub>
 800a1bc:	ec41 0b10 	vmov	d0, r0, r1
 800a1c0:	b005      	add	sp, #20
 800a1c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1c6:	4668      	mov	r0, sp
 800a1c8:	f000 fb12 	bl	800a7f0 <__ieee754_rem_pio2>
 800a1cc:	f000 0003 	and.w	r0, r0, #3
 800a1d0:	2801      	cmp	r0, #1
 800a1d2:	d00b      	beq.n	800a1ec <cos+0x5c>
 800a1d4:	2802      	cmp	r0, #2
 800a1d6:	d015      	beq.n	800a204 <cos+0x74>
 800a1d8:	b9d8      	cbnz	r0, 800a212 <cos+0x82>
 800a1da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1de:	ed9d 0b00 	vldr	d0, [sp]
 800a1e2:	f000 f981 	bl	800a4e8 <__kernel_cos>
 800a1e6:	ec51 0b10 	vmov	r0, r1, d0
 800a1ea:	e7e7      	b.n	800a1bc <cos+0x2c>
 800a1ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1f0:	ed9d 0b00 	vldr	d0, [sp]
 800a1f4:	f000 fa40 	bl	800a678 <__kernel_sin>
 800a1f8:	ec53 2b10 	vmov	r2, r3, d0
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a202:	e7db      	b.n	800a1bc <cos+0x2c>
 800a204:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a208:	ed9d 0b00 	vldr	d0, [sp]
 800a20c:	f000 f96c 	bl	800a4e8 <__kernel_cos>
 800a210:	e7f2      	b.n	800a1f8 <cos+0x68>
 800a212:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a216:	ed9d 0b00 	vldr	d0, [sp]
 800a21a:	2001      	movs	r0, #1
 800a21c:	f000 fa2c 	bl	800a678 <__kernel_sin>
 800a220:	e7e1      	b.n	800a1e6 <cos+0x56>
 800a222:	bf00      	nop
 800a224:	f3af 8000 	nop.w
	...
 800a230:	3fe921fb 	.word	0x3fe921fb
 800a234:	7fefffff 	.word	0x7fefffff

0800a238 <sin>:
 800a238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a23a:	ec53 2b10 	vmov	r2, r3, d0
 800a23e:	4826      	ldr	r0, [pc, #152]	@ (800a2d8 <sin+0xa0>)
 800a240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a244:	4281      	cmp	r1, r0
 800a246:	d807      	bhi.n	800a258 <sin+0x20>
 800a248:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a2d0 <sin+0x98>
 800a24c:	2000      	movs	r0, #0
 800a24e:	b005      	add	sp, #20
 800a250:	f85d eb04 	ldr.w	lr, [sp], #4
 800a254:	f000 ba10 	b.w	800a678 <__kernel_sin>
 800a258:	4820      	ldr	r0, [pc, #128]	@ (800a2dc <sin+0xa4>)
 800a25a:	4281      	cmp	r1, r0
 800a25c:	d908      	bls.n	800a270 <sin+0x38>
 800a25e:	4610      	mov	r0, r2
 800a260:	4619      	mov	r1, r3
 800a262:	f7f6 f907 	bl	8000474 <__aeabi_dsub>
 800a266:	ec41 0b10 	vmov	d0, r0, r1
 800a26a:	b005      	add	sp, #20
 800a26c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a270:	4668      	mov	r0, sp
 800a272:	f000 fabd 	bl	800a7f0 <__ieee754_rem_pio2>
 800a276:	f000 0003 	and.w	r0, r0, #3
 800a27a:	2801      	cmp	r0, #1
 800a27c:	d00c      	beq.n	800a298 <sin+0x60>
 800a27e:	2802      	cmp	r0, #2
 800a280:	d011      	beq.n	800a2a6 <sin+0x6e>
 800a282:	b9e8      	cbnz	r0, 800a2c0 <sin+0x88>
 800a284:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a288:	ed9d 0b00 	vldr	d0, [sp]
 800a28c:	2001      	movs	r0, #1
 800a28e:	f000 f9f3 	bl	800a678 <__kernel_sin>
 800a292:	ec51 0b10 	vmov	r0, r1, d0
 800a296:	e7e6      	b.n	800a266 <sin+0x2e>
 800a298:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a29c:	ed9d 0b00 	vldr	d0, [sp]
 800a2a0:	f000 f922 	bl	800a4e8 <__kernel_cos>
 800a2a4:	e7f5      	b.n	800a292 <sin+0x5a>
 800a2a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2aa:	ed9d 0b00 	vldr	d0, [sp]
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	f000 f9e2 	bl	800a678 <__kernel_sin>
 800a2b4:	ec53 2b10 	vmov	r2, r3, d0
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a2be:	e7d2      	b.n	800a266 <sin+0x2e>
 800a2c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2c4:	ed9d 0b00 	vldr	d0, [sp]
 800a2c8:	f000 f90e 	bl	800a4e8 <__kernel_cos>
 800a2cc:	e7f2      	b.n	800a2b4 <sin+0x7c>
 800a2ce:	bf00      	nop
	...
 800a2d8:	3fe921fb 	.word	0x3fe921fb
 800a2dc:	7fefffff 	.word	0x7fefffff

0800a2e0 <atan2f>:
 800a2e0:	f000 bd2a 	b.w	800ad38 <__ieee754_atan2f>

0800a2e4 <sqrtf>:
 800a2e4:	b508      	push	{r3, lr}
 800a2e6:	ed2d 8b02 	vpush	{d8}
 800a2ea:	eeb0 8a40 	vmov.f32	s16, s0
 800a2ee:	f000 f8b1 	bl	800a454 <__ieee754_sqrtf>
 800a2f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800a2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2fa:	d60c      	bvs.n	800a316 <sqrtf+0x32>
 800a2fc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a31c <sqrtf+0x38>
 800a300:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a308:	d505      	bpl.n	800a316 <sqrtf+0x32>
 800a30a:	f7ff ff15 	bl	800a138 <__errno>
 800a30e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a312:	2321      	movs	r3, #33	@ 0x21
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	ecbd 8b02 	vpop	{d8}
 800a31a:	bd08      	pop	{r3, pc}
 800a31c:	00000000 	.word	0x00000000

0800a320 <cosf>:
 800a320:	ee10 3a10 	vmov	r3, s0
 800a324:	b507      	push	{r0, r1, r2, lr}
 800a326:	4a1e      	ldr	r2, [pc, #120]	@ (800a3a0 <cosf+0x80>)
 800a328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d806      	bhi.n	800a33e <cosf+0x1e>
 800a330:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a3a4 <cosf+0x84>
 800a334:	b003      	add	sp, #12
 800a336:	f85d eb04 	ldr.w	lr, [sp], #4
 800a33a:	f000 bc5d 	b.w	800abf8 <__kernel_cosf>
 800a33e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a342:	d304      	bcc.n	800a34e <cosf+0x2e>
 800a344:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a348:	b003      	add	sp, #12
 800a34a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a34e:	4668      	mov	r0, sp
 800a350:	f000 fd92 	bl	800ae78 <__ieee754_rem_pio2f>
 800a354:	f000 0003 	and.w	r0, r0, #3
 800a358:	2801      	cmp	r0, #1
 800a35a:	d009      	beq.n	800a370 <cosf+0x50>
 800a35c:	2802      	cmp	r0, #2
 800a35e:	d010      	beq.n	800a382 <cosf+0x62>
 800a360:	b9b0      	cbnz	r0, 800a390 <cosf+0x70>
 800a362:	eddd 0a01 	vldr	s1, [sp, #4]
 800a366:	ed9d 0a00 	vldr	s0, [sp]
 800a36a:	f000 fc45 	bl	800abf8 <__kernel_cosf>
 800a36e:	e7eb      	b.n	800a348 <cosf+0x28>
 800a370:	eddd 0a01 	vldr	s1, [sp, #4]
 800a374:	ed9d 0a00 	vldr	s0, [sp]
 800a378:	f000 fc96 	bl	800aca8 <__kernel_sinf>
 800a37c:	eeb1 0a40 	vneg.f32	s0, s0
 800a380:	e7e2      	b.n	800a348 <cosf+0x28>
 800a382:	eddd 0a01 	vldr	s1, [sp, #4]
 800a386:	ed9d 0a00 	vldr	s0, [sp]
 800a38a:	f000 fc35 	bl	800abf8 <__kernel_cosf>
 800a38e:	e7f5      	b.n	800a37c <cosf+0x5c>
 800a390:	eddd 0a01 	vldr	s1, [sp, #4]
 800a394:	ed9d 0a00 	vldr	s0, [sp]
 800a398:	2001      	movs	r0, #1
 800a39a:	f000 fc85 	bl	800aca8 <__kernel_sinf>
 800a39e:	e7d3      	b.n	800a348 <cosf+0x28>
 800a3a0:	3f490fd8 	.word	0x3f490fd8
 800a3a4:	00000000 	.word	0x00000000

0800a3a8 <fmaxf>:
 800a3a8:	b508      	push	{r3, lr}
 800a3aa:	ed2d 8b02 	vpush	{d8}
 800a3ae:	eeb0 8a40 	vmov.f32	s16, s0
 800a3b2:	eef0 8a60 	vmov.f32	s17, s1
 800a3b6:	f000 f831 	bl	800a41c <__fpclassifyf>
 800a3ba:	b930      	cbnz	r0, 800a3ca <fmaxf+0x22>
 800a3bc:	eeb0 8a68 	vmov.f32	s16, s17
 800a3c0:	eeb0 0a48 	vmov.f32	s0, s16
 800a3c4:	ecbd 8b02 	vpop	{d8}
 800a3c8:	bd08      	pop	{r3, pc}
 800a3ca:	eeb0 0a68 	vmov.f32	s0, s17
 800a3ce:	f000 f825 	bl	800a41c <__fpclassifyf>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d0f4      	beq.n	800a3c0 <fmaxf+0x18>
 800a3d6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3de:	dded      	ble.n	800a3bc <fmaxf+0x14>
 800a3e0:	e7ee      	b.n	800a3c0 <fmaxf+0x18>

0800a3e2 <fminf>:
 800a3e2:	b508      	push	{r3, lr}
 800a3e4:	ed2d 8b02 	vpush	{d8}
 800a3e8:	eeb0 8a40 	vmov.f32	s16, s0
 800a3ec:	eef0 8a60 	vmov.f32	s17, s1
 800a3f0:	f000 f814 	bl	800a41c <__fpclassifyf>
 800a3f4:	b930      	cbnz	r0, 800a404 <fminf+0x22>
 800a3f6:	eeb0 8a68 	vmov.f32	s16, s17
 800a3fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a3fe:	ecbd 8b02 	vpop	{d8}
 800a402:	bd08      	pop	{r3, pc}
 800a404:	eeb0 0a68 	vmov.f32	s0, s17
 800a408:	f000 f808 	bl	800a41c <__fpclassifyf>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d0f4      	beq.n	800a3fa <fminf+0x18>
 800a410:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a418:	d5ed      	bpl.n	800a3f6 <fminf+0x14>
 800a41a:	e7ee      	b.n	800a3fa <fminf+0x18>

0800a41c <__fpclassifyf>:
 800a41c:	ee10 3a10 	vmov	r3, s0
 800a420:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a424:	d00d      	beq.n	800a442 <__fpclassifyf+0x26>
 800a426:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a42a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a42e:	d30a      	bcc.n	800a446 <__fpclassifyf+0x2a>
 800a430:	4b07      	ldr	r3, [pc, #28]	@ (800a450 <__fpclassifyf+0x34>)
 800a432:	1e42      	subs	r2, r0, #1
 800a434:	429a      	cmp	r2, r3
 800a436:	d908      	bls.n	800a44a <__fpclassifyf+0x2e>
 800a438:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a43c:	4258      	negs	r0, r3
 800a43e:	4158      	adcs	r0, r3
 800a440:	4770      	bx	lr
 800a442:	2002      	movs	r0, #2
 800a444:	4770      	bx	lr
 800a446:	2004      	movs	r0, #4
 800a448:	4770      	bx	lr
 800a44a:	2003      	movs	r0, #3
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	007ffffe 	.word	0x007ffffe

0800a454 <__ieee754_sqrtf>:
 800a454:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a458:	4770      	bx	lr
	...

0800a45c <round>:
 800a45c:	ec51 0b10 	vmov	r0, r1, d0
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a466:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a46a:	2a13      	cmp	r2, #19
 800a46c:	460b      	mov	r3, r1
 800a46e:	4605      	mov	r5, r0
 800a470:	dc1b      	bgt.n	800a4aa <round+0x4e>
 800a472:	2a00      	cmp	r2, #0
 800a474:	da0b      	bge.n	800a48e <round+0x32>
 800a476:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a47a:	3201      	adds	r2, #1
 800a47c:	bf04      	itt	eq
 800a47e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a482:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a486:	2200      	movs	r2, #0
 800a488:	4619      	mov	r1, r3
 800a48a:	4610      	mov	r0, r2
 800a48c:	e015      	b.n	800a4ba <round+0x5e>
 800a48e:	4c15      	ldr	r4, [pc, #84]	@ (800a4e4 <round+0x88>)
 800a490:	4114      	asrs	r4, r2
 800a492:	ea04 0601 	and.w	r6, r4, r1
 800a496:	4306      	orrs	r6, r0
 800a498:	d00f      	beq.n	800a4ba <round+0x5e>
 800a49a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a49e:	fa41 f202 	asr.w	r2, r1, r2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	ea23 0304 	bic.w	r3, r3, r4
 800a4a8:	e7ed      	b.n	800a486 <round+0x2a>
 800a4aa:	2a33      	cmp	r2, #51	@ 0x33
 800a4ac:	dd08      	ble.n	800a4c0 <round+0x64>
 800a4ae:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a4b2:	d102      	bne.n	800a4ba <round+0x5e>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	f7f5 ffdf 	bl	8000478 <__adddf3>
 800a4ba:	ec41 0b10 	vmov	d0, r0, r1
 800a4be:	bd70      	pop	{r4, r5, r6, pc}
 800a4c0:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a4c4:	f04f 34ff 	mov.w	r4, #4294967295
 800a4c8:	40f4      	lsrs	r4, r6
 800a4ca:	4204      	tst	r4, r0
 800a4cc:	d0f5      	beq.n	800a4ba <round+0x5e>
 800a4ce:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	408a      	lsls	r2, r1
 800a4d6:	1952      	adds	r2, r2, r5
 800a4d8:	bf28      	it	cs
 800a4da:	3301      	addcs	r3, #1
 800a4dc:	ea22 0204 	bic.w	r2, r2, r4
 800a4e0:	e7d2      	b.n	800a488 <round+0x2c>
 800a4e2:	bf00      	nop
 800a4e4:	000fffff 	.word	0x000fffff

0800a4e8 <__kernel_cos>:
 800a4e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	ec57 6b10 	vmov	r6, r7, d0
 800a4f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a4f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a4f8:	ed8d 1b00 	vstr	d1, [sp]
 800a4fc:	d206      	bcs.n	800a50c <__kernel_cos+0x24>
 800a4fe:	4630      	mov	r0, r6
 800a500:	4639      	mov	r1, r7
 800a502:	f7f6 f9f7 	bl	80008f4 <__aeabi_d2iz>
 800a506:	2800      	cmp	r0, #0
 800a508:	f000 8088 	beq.w	800a61c <__kernel_cos+0x134>
 800a50c:	4632      	mov	r2, r6
 800a50e:	463b      	mov	r3, r7
 800a510:	4630      	mov	r0, r6
 800a512:	4639      	mov	r1, r7
 800a514:	f7f5 fe80 	bl	8000218 <__aeabi_dmul>
 800a518:	4b51      	ldr	r3, [pc, #324]	@ (800a660 <__kernel_cos+0x178>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	4604      	mov	r4, r0
 800a51e:	460d      	mov	r5, r1
 800a520:	f7f5 fe7a 	bl	8000218 <__aeabi_dmul>
 800a524:	a340      	add	r3, pc, #256	@ (adr r3, 800a628 <__kernel_cos+0x140>)
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	4682      	mov	sl, r0
 800a52c:	468b      	mov	fp, r1
 800a52e:	4620      	mov	r0, r4
 800a530:	4629      	mov	r1, r5
 800a532:	f7f5 fe71 	bl	8000218 <__aeabi_dmul>
 800a536:	a33e      	add	r3, pc, #248	@ (adr r3, 800a630 <__kernel_cos+0x148>)
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	f7f5 ff9c 	bl	8000478 <__adddf3>
 800a540:	4622      	mov	r2, r4
 800a542:	462b      	mov	r3, r5
 800a544:	f7f5 fe68 	bl	8000218 <__aeabi_dmul>
 800a548:	a33b      	add	r3, pc, #236	@ (adr r3, 800a638 <__kernel_cos+0x150>)
 800a54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54e:	f7f5 ff91 	bl	8000474 <__aeabi_dsub>
 800a552:	4622      	mov	r2, r4
 800a554:	462b      	mov	r3, r5
 800a556:	f7f5 fe5f 	bl	8000218 <__aeabi_dmul>
 800a55a:	a339      	add	r3, pc, #228	@ (adr r3, 800a640 <__kernel_cos+0x158>)
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	f7f5 ff8a 	bl	8000478 <__adddf3>
 800a564:	4622      	mov	r2, r4
 800a566:	462b      	mov	r3, r5
 800a568:	f7f5 fe56 	bl	8000218 <__aeabi_dmul>
 800a56c:	a336      	add	r3, pc, #216	@ (adr r3, 800a648 <__kernel_cos+0x160>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f7f5 ff7f 	bl	8000474 <__aeabi_dsub>
 800a576:	4622      	mov	r2, r4
 800a578:	462b      	mov	r3, r5
 800a57a:	f7f5 fe4d 	bl	8000218 <__aeabi_dmul>
 800a57e:	a334      	add	r3, pc, #208	@ (adr r3, 800a650 <__kernel_cos+0x168>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f7f5 ff78 	bl	8000478 <__adddf3>
 800a588:	4622      	mov	r2, r4
 800a58a:	462b      	mov	r3, r5
 800a58c:	f7f5 fe44 	bl	8000218 <__aeabi_dmul>
 800a590:	4622      	mov	r2, r4
 800a592:	462b      	mov	r3, r5
 800a594:	f7f5 fe40 	bl	8000218 <__aeabi_dmul>
 800a598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a59c:	4604      	mov	r4, r0
 800a59e:	460d      	mov	r5, r1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f5 fe38 	bl	8000218 <__aeabi_dmul>
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f7f5 ff60 	bl	8000474 <__aeabi_dsub>
 800a5b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a664 <__kernel_cos+0x17c>)
 800a5b6:	4598      	cmp	r8, r3
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	460f      	mov	r7, r1
 800a5bc:	d810      	bhi.n	800a5e0 <__kernel_cos+0xf8>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	4650      	mov	r0, sl
 800a5c4:	4659      	mov	r1, fp
 800a5c6:	f7f5 ff55 	bl	8000474 <__aeabi_dsub>
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4926      	ldr	r1, [pc, #152]	@ (800a668 <__kernel_cos+0x180>)
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	f7f5 ff4f 	bl	8000474 <__aeabi_dsub>
 800a5d6:	ec41 0b10 	vmov	d0, r0, r1
 800a5da:	b003      	add	sp, #12
 800a5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e0:	4b22      	ldr	r3, [pc, #136]	@ (800a66c <__kernel_cos+0x184>)
 800a5e2:	4921      	ldr	r1, [pc, #132]	@ (800a668 <__kernel_cos+0x180>)
 800a5e4:	4598      	cmp	r8, r3
 800a5e6:	bf8c      	ite	hi
 800a5e8:	4d21      	ldrhi	r5, [pc, #132]	@ (800a670 <__kernel_cos+0x188>)
 800a5ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a5ee:	2400      	movs	r4, #0
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	462b      	mov	r3, r5
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f7f5 ff3d 	bl	8000474 <__aeabi_dsub>
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	4680      	mov	r8, r0
 800a5fe:	4689      	mov	r9, r1
 800a600:	462b      	mov	r3, r5
 800a602:	4650      	mov	r0, sl
 800a604:	4659      	mov	r1, fp
 800a606:	f7f5 ff35 	bl	8000474 <__aeabi_dsub>
 800a60a:	4632      	mov	r2, r6
 800a60c:	463b      	mov	r3, r7
 800a60e:	f7f5 ff31 	bl	8000474 <__aeabi_dsub>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4640      	mov	r0, r8
 800a618:	4649      	mov	r1, r9
 800a61a:	e7da      	b.n	800a5d2 <__kernel_cos+0xea>
 800a61c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a658 <__kernel_cos+0x170>
 800a620:	e7db      	b.n	800a5da <__kernel_cos+0xf2>
 800a622:	bf00      	nop
 800a624:	f3af 8000 	nop.w
 800a628:	be8838d4 	.word	0xbe8838d4
 800a62c:	bda8fae9 	.word	0xbda8fae9
 800a630:	bdb4b1c4 	.word	0xbdb4b1c4
 800a634:	3e21ee9e 	.word	0x3e21ee9e
 800a638:	809c52ad 	.word	0x809c52ad
 800a63c:	3e927e4f 	.word	0x3e927e4f
 800a640:	19cb1590 	.word	0x19cb1590
 800a644:	3efa01a0 	.word	0x3efa01a0
 800a648:	16c15177 	.word	0x16c15177
 800a64c:	3f56c16c 	.word	0x3f56c16c
 800a650:	5555554c 	.word	0x5555554c
 800a654:	3fa55555 	.word	0x3fa55555
 800a658:	00000000 	.word	0x00000000
 800a65c:	3ff00000 	.word	0x3ff00000
 800a660:	3fe00000 	.word	0x3fe00000
 800a664:	3fd33332 	.word	0x3fd33332
 800a668:	3ff00000 	.word	0x3ff00000
 800a66c:	3fe90000 	.word	0x3fe90000
 800a670:	3fd20000 	.word	0x3fd20000
 800a674:	00000000 	.word	0x00000000

0800a678 <__kernel_sin>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	ec55 4b10 	vmov	r4, r5, d0
 800a680:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a684:	b085      	sub	sp, #20
 800a686:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a68a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a68e:	4680      	mov	r8, r0
 800a690:	d205      	bcs.n	800a69e <__kernel_sin+0x26>
 800a692:	4620      	mov	r0, r4
 800a694:	4629      	mov	r1, r5
 800a696:	f7f6 f92d 	bl	80008f4 <__aeabi_d2iz>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d052      	beq.n	800a744 <__kernel_sin+0xcc>
 800a69e:	4622      	mov	r2, r4
 800a6a0:	462b      	mov	r3, r5
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f5 fdb7 	bl	8000218 <__aeabi_dmul>
 800a6aa:	4682      	mov	sl, r0
 800a6ac:	468b      	mov	fp, r1
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	f7f5 fdaf 	bl	8000218 <__aeabi_dmul>
 800a6ba:	a342      	add	r3, pc, #264	@ (adr r3, 800a7c4 <__kernel_sin+0x14c>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a6c4:	4650      	mov	r0, sl
 800a6c6:	4659      	mov	r1, fp
 800a6c8:	f7f5 fda6 	bl	8000218 <__aeabi_dmul>
 800a6cc:	a33f      	add	r3, pc, #252	@ (adr r3, 800a7cc <__kernel_sin+0x154>)
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	f7f5 fecf 	bl	8000474 <__aeabi_dsub>
 800a6d6:	4652      	mov	r2, sl
 800a6d8:	465b      	mov	r3, fp
 800a6da:	f7f5 fd9d 	bl	8000218 <__aeabi_dmul>
 800a6de:	a33d      	add	r3, pc, #244	@ (adr r3, 800a7d4 <__kernel_sin+0x15c>)
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f7f5 fec8 	bl	8000478 <__adddf3>
 800a6e8:	4652      	mov	r2, sl
 800a6ea:	465b      	mov	r3, fp
 800a6ec:	f7f5 fd94 	bl	8000218 <__aeabi_dmul>
 800a6f0:	a33a      	add	r3, pc, #232	@ (adr r3, 800a7dc <__kernel_sin+0x164>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f5 febd 	bl	8000474 <__aeabi_dsub>
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	465b      	mov	r3, fp
 800a6fe:	f7f5 fd8b 	bl	8000218 <__aeabi_dmul>
 800a702:	a338      	add	r3, pc, #224	@ (adr r3, 800a7e4 <__kernel_sin+0x16c>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f5 feb6 	bl	8000478 <__adddf3>
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	f1b8 0f00 	cmp.w	r8, #0
 800a714:	d11b      	bne.n	800a74e <__kernel_sin+0xd6>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4650      	mov	r0, sl
 800a71c:	4659      	mov	r1, fp
 800a71e:	f7f5 fd7b 	bl	8000218 <__aeabi_dmul>
 800a722:	a325      	add	r3, pc, #148	@ (adr r3, 800a7b8 <__kernel_sin+0x140>)
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	f7f5 fea4 	bl	8000474 <__aeabi_dsub>
 800a72c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a730:	f7f5 fd72 	bl	8000218 <__aeabi_dmul>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4620      	mov	r0, r4
 800a73a:	4629      	mov	r1, r5
 800a73c:	f7f5 fe9c 	bl	8000478 <__adddf3>
 800a740:	4604      	mov	r4, r0
 800a742:	460d      	mov	r5, r1
 800a744:	ec45 4b10 	vmov	d0, r4, r5
 800a748:	b005      	add	sp, #20
 800a74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a752:	4b1b      	ldr	r3, [pc, #108]	@ (800a7c0 <__kernel_sin+0x148>)
 800a754:	2200      	movs	r2, #0
 800a756:	f7f5 fd5f 	bl	8000218 <__aeabi_dmul>
 800a75a:	4632      	mov	r2, r6
 800a75c:	4680      	mov	r8, r0
 800a75e:	4689      	mov	r9, r1
 800a760:	463b      	mov	r3, r7
 800a762:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a766:	f7f5 fd57 	bl	8000218 <__aeabi_dmul>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4640      	mov	r0, r8
 800a770:	4649      	mov	r1, r9
 800a772:	f7f5 fe7f 	bl	8000474 <__aeabi_dsub>
 800a776:	4652      	mov	r2, sl
 800a778:	465b      	mov	r3, fp
 800a77a:	f7f5 fd4d 	bl	8000218 <__aeabi_dmul>
 800a77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a782:	f7f5 fe77 	bl	8000474 <__aeabi_dsub>
 800a786:	a30c      	add	r3, pc, #48	@ (adr r3, 800a7b8 <__kernel_sin+0x140>)
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	4606      	mov	r6, r0
 800a78e:	460f      	mov	r7, r1
 800a790:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a794:	f7f5 fd40 	bl	8000218 <__aeabi_dmul>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f7f5 fe6a 	bl	8000478 <__adddf3>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	f7f5 fe62 	bl	8000474 <__aeabi_dsub>
 800a7b0:	e7c6      	b.n	800a740 <__kernel_sin+0xc8>
 800a7b2:	bf00      	nop
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	55555549 	.word	0x55555549
 800a7bc:	3fc55555 	.word	0x3fc55555
 800a7c0:	3fe00000 	.word	0x3fe00000
 800a7c4:	5acfd57c 	.word	0x5acfd57c
 800a7c8:	3de5d93a 	.word	0x3de5d93a
 800a7cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800a7d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800a7d4:	57b1fe7d 	.word	0x57b1fe7d
 800a7d8:	3ec71de3 	.word	0x3ec71de3
 800a7dc:	19c161d5 	.word	0x19c161d5
 800a7e0:	3f2a01a0 	.word	0x3f2a01a0
 800a7e4:	1110f8a6 	.word	0x1110f8a6
 800a7e8:	3f811111 	.word	0x3f811111
 800a7ec:	00000000 	.word	0x00000000

0800a7f0 <__ieee754_rem_pio2>:
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	ec57 6b10 	vmov	r6, r7, d0
 800a7f8:	4bc5      	ldr	r3, [pc, #788]	@ (800ab10 <__ieee754_rem_pio2+0x320>)
 800a7fa:	b08d      	sub	sp, #52	@ 0x34
 800a7fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a800:	4598      	cmp	r8, r3
 800a802:	4604      	mov	r4, r0
 800a804:	9704      	str	r7, [sp, #16]
 800a806:	d807      	bhi.n	800a818 <__ieee754_rem_pio2+0x28>
 800a808:	2200      	movs	r2, #0
 800a80a:	2300      	movs	r3, #0
 800a80c:	ed80 0b00 	vstr	d0, [r0]
 800a810:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a814:	2500      	movs	r5, #0
 800a816:	e028      	b.n	800a86a <__ieee754_rem_pio2+0x7a>
 800a818:	4bbe      	ldr	r3, [pc, #760]	@ (800ab14 <__ieee754_rem_pio2+0x324>)
 800a81a:	4598      	cmp	r8, r3
 800a81c:	d878      	bhi.n	800a910 <__ieee754_rem_pio2+0x120>
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	4dbd      	ldr	r5, [pc, #756]	@ (800ab18 <__ieee754_rem_pio2+0x328>)
 800a822:	2b00      	cmp	r3, #0
 800a824:	4630      	mov	r0, r6
 800a826:	a3ac      	add	r3, pc, #688	@ (adr r3, 800aad8 <__ieee754_rem_pio2+0x2e8>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	4639      	mov	r1, r7
 800a82e:	dd38      	ble.n	800a8a2 <__ieee754_rem_pio2+0xb2>
 800a830:	f7f5 fe20 	bl	8000474 <__aeabi_dsub>
 800a834:	45a8      	cmp	r8, r5
 800a836:	4606      	mov	r6, r0
 800a838:	460f      	mov	r7, r1
 800a83a:	d01a      	beq.n	800a872 <__ieee754_rem_pio2+0x82>
 800a83c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800aae0 <__ieee754_rem_pio2+0x2f0>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fe17 	bl	8000474 <__aeabi_dsub>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4680      	mov	r8, r0
 800a84c:	4689      	mov	r9, r1
 800a84e:	4630      	mov	r0, r6
 800a850:	4639      	mov	r1, r7
 800a852:	f7f5 fe0f 	bl	8000474 <__aeabi_dsub>
 800a856:	a3a2      	add	r3, pc, #648	@ (adr r3, 800aae0 <__ieee754_rem_pio2+0x2f0>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f5 fe0a 	bl	8000474 <__aeabi_dsub>
 800a860:	e9c4 8900 	strd	r8, r9, [r4]
 800a864:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a868:	2501      	movs	r5, #1
 800a86a:	4628      	mov	r0, r5
 800a86c:	b00d      	add	sp, #52	@ 0x34
 800a86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a872:	a39d      	add	r3, pc, #628	@ (adr r3, 800aae8 <__ieee754_rem_pio2+0x2f8>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f7f5 fdfc 	bl	8000474 <__aeabi_dsub>
 800a87c:	a39c      	add	r3, pc, #624	@ (adr r3, 800aaf0 <__ieee754_rem_pio2+0x300>)
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	4606      	mov	r6, r0
 800a884:	460f      	mov	r7, r1
 800a886:	f7f5 fdf5 	bl	8000474 <__aeabi_dsub>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	4680      	mov	r8, r0
 800a890:	4689      	mov	r9, r1
 800a892:	4630      	mov	r0, r6
 800a894:	4639      	mov	r1, r7
 800a896:	f7f5 fded 	bl	8000474 <__aeabi_dsub>
 800a89a:	a395      	add	r3, pc, #596	@ (adr r3, 800aaf0 <__ieee754_rem_pio2+0x300>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	e7dc      	b.n	800a85c <__ieee754_rem_pio2+0x6c>
 800a8a2:	f7f5 fde9 	bl	8000478 <__adddf3>
 800a8a6:	45a8      	cmp	r8, r5
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	460f      	mov	r7, r1
 800a8ac:	d018      	beq.n	800a8e0 <__ieee754_rem_pio2+0xf0>
 800a8ae:	a38c      	add	r3, pc, #560	@ (adr r3, 800aae0 <__ieee754_rem_pio2+0x2f0>)
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	f7f5 fde0 	bl	8000478 <__adddf3>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4680      	mov	r8, r0
 800a8be:	4689      	mov	r9, r1
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	4639      	mov	r1, r7
 800a8c4:	f7f5 fdd6 	bl	8000474 <__aeabi_dsub>
 800a8c8:	a385      	add	r3, pc, #532	@ (adr r3, 800aae0 <__ieee754_rem_pio2+0x2f0>)
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	f7f5 fdd3 	bl	8000478 <__adddf3>
 800a8d2:	f04f 35ff 	mov.w	r5, #4294967295
 800a8d6:	e9c4 8900 	strd	r8, r9, [r4]
 800a8da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a8de:	e7c4      	b.n	800a86a <__ieee754_rem_pio2+0x7a>
 800a8e0:	a381      	add	r3, pc, #516	@ (adr r3, 800aae8 <__ieee754_rem_pio2+0x2f8>)
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	f7f5 fdc7 	bl	8000478 <__adddf3>
 800a8ea:	a381      	add	r3, pc, #516	@ (adr r3, 800aaf0 <__ieee754_rem_pio2+0x300>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	460f      	mov	r7, r1
 800a8f4:	f7f5 fdc0 	bl	8000478 <__adddf3>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	4689      	mov	r9, r1
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f5 fdb6 	bl	8000474 <__aeabi_dsub>
 800a908:	a379      	add	r3, pc, #484	@ (adr r3, 800aaf0 <__ieee754_rem_pio2+0x300>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	e7de      	b.n	800a8ce <__ieee754_rem_pio2+0xde>
 800a910:	4b82      	ldr	r3, [pc, #520]	@ (800ab1c <__ieee754_rem_pio2+0x32c>)
 800a912:	4598      	cmp	r8, r3
 800a914:	f200 80d1 	bhi.w	800aaba <__ieee754_rem_pio2+0x2ca>
 800a918:	f000 f966 	bl	800abe8 <fabs>
 800a91c:	ec57 6b10 	vmov	r6, r7, d0
 800a920:	a375      	add	r3, pc, #468	@ (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	4630      	mov	r0, r6
 800a928:	4639      	mov	r1, r7
 800a92a:	f7f5 fc75 	bl	8000218 <__aeabi_dmul>
 800a92e:	4b7c      	ldr	r3, [pc, #496]	@ (800ab20 <__ieee754_rem_pio2+0x330>)
 800a930:	2200      	movs	r2, #0
 800a932:	f7f5 fda1 	bl	8000478 <__adddf3>
 800a936:	f7f5 ffdd 	bl	80008f4 <__aeabi_d2iz>
 800a93a:	4605      	mov	r5, r0
 800a93c:	f7f5 fee8 	bl	8000710 <__aeabi_i2d>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a948:	a363      	add	r3, pc, #396	@ (adr r3, 800aad8 <__ieee754_rem_pio2+0x2e8>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f7f5 fc63 	bl	8000218 <__aeabi_dmul>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4630      	mov	r0, r6
 800a958:	4639      	mov	r1, r7
 800a95a:	f7f5 fd8b 	bl	8000474 <__aeabi_dsub>
 800a95e:	a360      	add	r3, pc, #384	@ (adr r3, 800aae0 <__ieee754_rem_pio2+0x2f0>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	4682      	mov	sl, r0
 800a966:	468b      	mov	fp, r1
 800a968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a96c:	f7f5 fc54 	bl	8000218 <__aeabi_dmul>
 800a970:	2d1f      	cmp	r5, #31
 800a972:	4606      	mov	r6, r0
 800a974:	460f      	mov	r7, r1
 800a976:	dc0c      	bgt.n	800a992 <__ieee754_rem_pio2+0x1a2>
 800a978:	4b6a      	ldr	r3, [pc, #424]	@ (800ab24 <__ieee754_rem_pio2+0x334>)
 800a97a:	1e6a      	subs	r2, r5, #1
 800a97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a980:	4543      	cmp	r3, r8
 800a982:	d006      	beq.n	800a992 <__ieee754_rem_pio2+0x1a2>
 800a984:	4632      	mov	r2, r6
 800a986:	463b      	mov	r3, r7
 800a988:	4650      	mov	r0, sl
 800a98a:	4659      	mov	r1, fp
 800a98c:	f7f5 fd72 	bl	8000474 <__aeabi_dsub>
 800a990:	e00e      	b.n	800a9b0 <__ieee754_rem_pio2+0x1c0>
 800a992:	463b      	mov	r3, r7
 800a994:	4632      	mov	r2, r6
 800a996:	4650      	mov	r0, sl
 800a998:	4659      	mov	r1, fp
 800a99a:	f7f5 fd6b 	bl	8000474 <__aeabi_dsub>
 800a99e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a9a2:	9305      	str	r3, [sp, #20]
 800a9a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a9ac:	2b10      	cmp	r3, #16
 800a9ae:	dc02      	bgt.n	800a9b6 <__ieee754_rem_pio2+0x1c6>
 800a9b0:	e9c4 0100 	strd	r0, r1, [r4]
 800a9b4:	e039      	b.n	800aa2a <__ieee754_rem_pio2+0x23a>
 800a9b6:	a34c      	add	r3, pc, #304	@ (adr r3, 800aae8 <__ieee754_rem_pio2+0x2f8>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c0:	f7f5 fc2a 	bl	8000218 <__aeabi_dmul>
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	460f      	mov	r7, r1
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	4659      	mov	r1, fp
 800a9d0:	f7f5 fd50 	bl	8000474 <__aeabi_dsub>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4680      	mov	r8, r0
 800a9da:	4689      	mov	r9, r1
 800a9dc:	4650      	mov	r0, sl
 800a9de:	4659      	mov	r1, fp
 800a9e0:	f7f5 fd48 	bl	8000474 <__aeabi_dsub>
 800a9e4:	4632      	mov	r2, r6
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	f7f5 fd44 	bl	8000474 <__aeabi_dsub>
 800a9ec:	a340      	add	r3, pc, #256	@ (adr r3, 800aaf0 <__ieee754_rem_pio2+0x300>)
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	460f      	mov	r7, r1
 800a9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9fa:	f7f5 fc0d 	bl	8000218 <__aeabi_dmul>
 800a9fe:	4632      	mov	r2, r6
 800aa00:	463b      	mov	r3, r7
 800aa02:	f7f5 fd37 	bl	8000474 <__aeabi_dsub>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	460f      	mov	r7, r1
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	f7f5 fd2f 	bl	8000474 <__aeabi_dsub>
 800aa16:	9a05      	ldr	r2, [sp, #20]
 800aa18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	2b31      	cmp	r3, #49	@ 0x31
 800aa20:	dc20      	bgt.n	800aa64 <__ieee754_rem_pio2+0x274>
 800aa22:	e9c4 0100 	strd	r0, r1, [r4]
 800aa26:	46c2      	mov	sl, r8
 800aa28:	46cb      	mov	fp, r9
 800aa2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aa2e:	4650      	mov	r0, sl
 800aa30:	4642      	mov	r2, r8
 800aa32:	464b      	mov	r3, r9
 800aa34:	4659      	mov	r1, fp
 800aa36:	f7f5 fd1d 	bl	8000474 <__aeabi_dsub>
 800aa3a:	463b      	mov	r3, r7
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	f7f5 fd19 	bl	8000474 <__aeabi_dsub>
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa4a:	f6bf af0e 	bge.w	800a86a <__ieee754_rem_pio2+0x7a>
 800aa4e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800aa52:	6063      	str	r3, [r4, #4]
 800aa54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa58:	f8c4 8000 	str.w	r8, [r4]
 800aa5c:	60a0      	str	r0, [r4, #8]
 800aa5e:	60e3      	str	r3, [r4, #12]
 800aa60:	426d      	negs	r5, r5
 800aa62:	e702      	b.n	800a86a <__ieee754_rem_pio2+0x7a>
 800aa64:	a326      	add	r3, pc, #152	@ (adr r3, 800ab00 <__ieee754_rem_pio2+0x310>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa6e:	f7f5 fbd3 	bl	8000218 <__aeabi_dmul>
 800aa72:	4606      	mov	r6, r0
 800aa74:	460f      	mov	r7, r1
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	f7f5 fcf9 	bl	8000474 <__aeabi_dsub>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4682      	mov	sl, r0
 800aa88:	468b      	mov	fp, r1
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	f7f5 fcf1 	bl	8000474 <__aeabi_dsub>
 800aa92:	4632      	mov	r2, r6
 800aa94:	463b      	mov	r3, r7
 800aa96:	f7f5 fced 	bl	8000474 <__aeabi_dsub>
 800aa9a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	460f      	mov	r7, r1
 800aaa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaa8:	f7f5 fbb6 	bl	8000218 <__aeabi_dmul>
 800aaac:	4632      	mov	r2, r6
 800aaae:	463b      	mov	r3, r7
 800aab0:	f7f5 fce0 	bl	8000474 <__aeabi_dsub>
 800aab4:	4606      	mov	r6, r0
 800aab6:	460f      	mov	r7, r1
 800aab8:	e764      	b.n	800a984 <__ieee754_rem_pio2+0x194>
 800aaba:	4b1b      	ldr	r3, [pc, #108]	@ (800ab28 <__ieee754_rem_pio2+0x338>)
 800aabc:	4598      	cmp	r8, r3
 800aabe:	d935      	bls.n	800ab2c <__ieee754_rem_pio2+0x33c>
 800aac0:	4632      	mov	r2, r6
 800aac2:	463b      	mov	r3, r7
 800aac4:	4630      	mov	r0, r6
 800aac6:	4639      	mov	r1, r7
 800aac8:	f7f5 fcd4 	bl	8000474 <__aeabi_dsub>
 800aacc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aad0:	e9c4 0100 	strd	r0, r1, [r4]
 800aad4:	e69e      	b.n	800a814 <__ieee754_rem_pio2+0x24>
 800aad6:	bf00      	nop
 800aad8:	54400000 	.word	0x54400000
 800aadc:	3ff921fb 	.word	0x3ff921fb
 800aae0:	1a626331 	.word	0x1a626331
 800aae4:	3dd0b461 	.word	0x3dd0b461
 800aae8:	1a600000 	.word	0x1a600000
 800aaec:	3dd0b461 	.word	0x3dd0b461
 800aaf0:	2e037073 	.word	0x2e037073
 800aaf4:	3ba3198a 	.word	0x3ba3198a
 800aaf8:	6dc9c883 	.word	0x6dc9c883
 800aafc:	3fe45f30 	.word	0x3fe45f30
 800ab00:	2e000000 	.word	0x2e000000
 800ab04:	3ba3198a 	.word	0x3ba3198a
 800ab08:	252049c1 	.word	0x252049c1
 800ab0c:	397b839a 	.word	0x397b839a
 800ab10:	3fe921fb 	.word	0x3fe921fb
 800ab14:	4002d97b 	.word	0x4002d97b
 800ab18:	3ff921fb 	.word	0x3ff921fb
 800ab1c:	413921fb 	.word	0x413921fb
 800ab20:	3fe00000 	.word	0x3fe00000
 800ab24:	0800c1e8 	.word	0x0800c1e8
 800ab28:	7fefffff 	.word	0x7fefffff
 800ab2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ab30:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ab34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ab38:	4630      	mov	r0, r6
 800ab3a:	460f      	mov	r7, r1
 800ab3c:	f7f5 feda 	bl	80008f4 <__aeabi_d2iz>
 800ab40:	f7f5 fde6 	bl	8000710 <__aeabi_i2d>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4630      	mov	r0, r6
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab50:	f7f5 fc90 	bl	8000474 <__aeabi_dsub>
 800ab54:	4b22      	ldr	r3, [pc, #136]	@ (800abe0 <__ieee754_rem_pio2+0x3f0>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	f7f5 fb5e 	bl	8000218 <__aeabi_dmul>
 800ab5c:	460f      	mov	r7, r1
 800ab5e:	4606      	mov	r6, r0
 800ab60:	f7f5 fec8 	bl	80008f4 <__aeabi_d2iz>
 800ab64:	f7f5 fdd4 	bl	8000710 <__aeabi_i2d>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	4639      	mov	r1, r7
 800ab70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab74:	f7f5 fc7e 	bl	8000474 <__aeabi_dsub>
 800ab78:	4b19      	ldr	r3, [pc, #100]	@ (800abe0 <__ieee754_rem_pio2+0x3f0>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f7f5 fb4c 	bl	8000218 <__aeabi_dmul>
 800ab80:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ab84:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ab88:	f04f 0803 	mov.w	r8, #3
 800ab8c:	2600      	movs	r6, #0
 800ab8e:	2700      	movs	r7, #0
 800ab90:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ab94:	4632      	mov	r2, r6
 800ab96:	463b      	mov	r3, r7
 800ab98:	46c2      	mov	sl, r8
 800ab9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab9e:	f7f5 fe77 	bl	8000890 <__aeabi_dcmpeq>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d1f4      	bne.n	800ab90 <__ieee754_rem_pio2+0x3a0>
 800aba6:	4b0f      	ldr	r3, [pc, #60]	@ (800abe4 <__ieee754_rem_pio2+0x3f4>)
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	2302      	movs	r3, #2
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	462a      	mov	r2, r5
 800abb0:	4653      	mov	r3, sl
 800abb2:	4621      	mov	r1, r4
 800abb4:	a806      	add	r0, sp, #24
 800abb6:	f000 fb6b 	bl	800b290 <__kernel_rem_pio2>
 800abba:	9b04      	ldr	r3, [sp, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	4605      	mov	r5, r0
 800abc0:	f6bf ae53 	bge.w	800a86a <__ieee754_rem_pio2+0x7a>
 800abc4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800abc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abcc:	e9c4 2300 	strd	r2, r3, [r4]
 800abd0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800abd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abd8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800abdc:	e740      	b.n	800aa60 <__ieee754_rem_pio2+0x270>
 800abde:	bf00      	nop
 800abe0:	41700000 	.word	0x41700000
 800abe4:	0800c268 	.word	0x0800c268

0800abe8 <fabs>:
 800abe8:	ec51 0b10 	vmov	r0, r1, d0
 800abec:	4602      	mov	r2, r0
 800abee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800abf2:	ec43 2b10 	vmov	d0, r2, r3
 800abf6:	4770      	bx	lr

0800abf8 <__kernel_cosf>:
 800abf8:	ee10 3a10 	vmov	r3, s0
 800abfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac00:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ac04:	eef0 6a40 	vmov.f32	s13, s0
 800ac08:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ac0c:	d204      	bcs.n	800ac18 <__kernel_cosf+0x20>
 800ac0e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ac12:	ee17 2a90 	vmov	r2, s15
 800ac16:	b342      	cbz	r2, 800ac6a <__kernel_cosf+0x72>
 800ac18:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ac1c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ac88 <__kernel_cosf+0x90>
 800ac20:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ac8c <__kernel_cosf+0x94>
 800ac24:	4a1a      	ldr	r2, [pc, #104]	@ (800ac90 <__kernel_cosf+0x98>)
 800ac26:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ac94 <__kernel_cosf+0x9c>
 800ac30:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac34:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ac98 <__kernel_cosf+0xa0>
 800ac38:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ac3c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ac9c <__kernel_cosf+0xa4>
 800ac40:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac44:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800aca0 <__kernel_cosf+0xa8>
 800ac48:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ac4c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ac50:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ac54:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ac58:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ac5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac60:	d804      	bhi.n	800ac6c <__kernel_cosf+0x74>
 800ac62:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ac66:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ac6a:	4770      	bx	lr
 800ac6c:	4a0d      	ldr	r2, [pc, #52]	@ (800aca4 <__kernel_cosf+0xac>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	bf9a      	itte	ls
 800ac72:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ac76:	ee07 3a10 	vmovls	s14, r3
 800ac7a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ac7e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ac82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac86:	e7ec      	b.n	800ac62 <__kernel_cosf+0x6a>
 800ac88:	ad47d74e 	.word	0xad47d74e
 800ac8c:	310f74f6 	.word	0x310f74f6
 800ac90:	3e999999 	.word	0x3e999999
 800ac94:	b493f27c 	.word	0xb493f27c
 800ac98:	37d00d01 	.word	0x37d00d01
 800ac9c:	bab60b61 	.word	0xbab60b61
 800aca0:	3d2aaaab 	.word	0x3d2aaaab
 800aca4:	3f480000 	.word	0x3f480000

0800aca8 <__kernel_sinf>:
 800aca8:	ee10 3a10 	vmov	r3, s0
 800acac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800acb0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800acb4:	d204      	bcs.n	800acc0 <__kernel_sinf+0x18>
 800acb6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800acba:	ee17 3a90 	vmov	r3, s15
 800acbe:	b35b      	cbz	r3, 800ad18 <__kernel_sinf+0x70>
 800acc0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800acc4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ad1c <__kernel_sinf+0x74>
 800acc8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ad20 <__kernel_sinf+0x78>
 800accc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800acd0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ad24 <__kernel_sinf+0x7c>
 800acd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800acd8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ad28 <__kernel_sinf+0x80>
 800acdc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ace0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ad2c <__kernel_sinf+0x84>
 800ace4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ace8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800acec:	b930      	cbnz	r0, 800acfc <__kernel_sinf+0x54>
 800acee:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ad30 <__kernel_sinf+0x88>
 800acf2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800acf6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800acfa:	4770      	bx	lr
 800acfc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ad00:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ad04:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ad08:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ad0c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ad34 <__kernel_sinf+0x8c>
 800ad10:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ad14:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	2f2ec9d3 	.word	0x2f2ec9d3
 800ad20:	b2d72f34 	.word	0xb2d72f34
 800ad24:	3638ef1b 	.word	0x3638ef1b
 800ad28:	b9500d01 	.word	0xb9500d01
 800ad2c:	3c088889 	.word	0x3c088889
 800ad30:	be2aaaab 	.word	0xbe2aaaab
 800ad34:	3e2aaaab 	.word	0x3e2aaaab

0800ad38 <__ieee754_atan2f>:
 800ad38:	ee10 2a90 	vmov	r2, s1
 800ad3c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ad40:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ad44:	b510      	push	{r4, lr}
 800ad46:	eef0 7a40 	vmov.f32	s15, s0
 800ad4a:	d806      	bhi.n	800ad5a <__ieee754_atan2f+0x22>
 800ad4c:	ee10 0a10 	vmov	r0, s0
 800ad50:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ad54:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ad58:	d904      	bls.n	800ad64 <__ieee754_atan2f+0x2c>
 800ad5a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ad5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad62:	bd10      	pop	{r4, pc}
 800ad64:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ad68:	d103      	bne.n	800ad72 <__ieee754_atan2f+0x3a>
 800ad6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad6e:	f000 b9b3 	b.w	800b0d8 <atanf>
 800ad72:	1794      	asrs	r4, r2, #30
 800ad74:	f004 0402 	and.w	r4, r4, #2
 800ad78:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ad7c:	b943      	cbnz	r3, 800ad90 <__ieee754_atan2f+0x58>
 800ad7e:	2c02      	cmp	r4, #2
 800ad80:	d05e      	beq.n	800ae40 <__ieee754_atan2f+0x108>
 800ad82:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ae54 <__ieee754_atan2f+0x11c>
 800ad86:	2c03      	cmp	r4, #3
 800ad88:	bf08      	it	eq
 800ad8a:	eef0 7a47 	vmoveq.f32	s15, s14
 800ad8e:	e7e6      	b.n	800ad5e <__ieee754_atan2f+0x26>
 800ad90:	b941      	cbnz	r1, 800ada4 <__ieee754_atan2f+0x6c>
 800ad92:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ae58 <__ieee754_atan2f+0x120>
 800ad96:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ae5c <__ieee754_atan2f+0x124>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	bfb8      	it	lt
 800ad9e:	eef0 7a47 	vmovlt.f32	s15, s14
 800ada2:	e7dc      	b.n	800ad5e <__ieee754_atan2f+0x26>
 800ada4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ada8:	d110      	bne.n	800adcc <__ieee754_atan2f+0x94>
 800adaa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800adae:	f104 34ff 	add.w	r4, r4, #4294967295
 800adb2:	d107      	bne.n	800adc4 <__ieee754_atan2f+0x8c>
 800adb4:	2c02      	cmp	r4, #2
 800adb6:	d846      	bhi.n	800ae46 <__ieee754_atan2f+0x10e>
 800adb8:	4b29      	ldr	r3, [pc, #164]	@ (800ae60 <__ieee754_atan2f+0x128>)
 800adba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800adbe:	edd3 7a00 	vldr	s15, [r3]
 800adc2:	e7cc      	b.n	800ad5e <__ieee754_atan2f+0x26>
 800adc4:	2c02      	cmp	r4, #2
 800adc6:	d841      	bhi.n	800ae4c <__ieee754_atan2f+0x114>
 800adc8:	4b26      	ldr	r3, [pc, #152]	@ (800ae64 <__ieee754_atan2f+0x12c>)
 800adca:	e7f6      	b.n	800adba <__ieee754_atan2f+0x82>
 800adcc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800add0:	d0df      	beq.n	800ad92 <__ieee754_atan2f+0x5a>
 800add2:	1a5b      	subs	r3, r3, r1
 800add4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800add8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800addc:	da1a      	bge.n	800ae14 <__ieee754_atan2f+0xdc>
 800adde:	2a00      	cmp	r2, #0
 800ade0:	da01      	bge.n	800ade6 <__ieee754_atan2f+0xae>
 800ade2:	313c      	adds	r1, #60	@ 0x3c
 800ade4:	db19      	blt.n	800ae1a <__ieee754_atan2f+0xe2>
 800ade6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800adea:	f000 fa49 	bl	800b280 <fabsf>
 800adee:	f000 f973 	bl	800b0d8 <atanf>
 800adf2:	eef0 7a40 	vmov.f32	s15, s0
 800adf6:	2c01      	cmp	r4, #1
 800adf8:	d012      	beq.n	800ae20 <__ieee754_atan2f+0xe8>
 800adfa:	2c02      	cmp	r4, #2
 800adfc:	d017      	beq.n	800ae2e <__ieee754_atan2f+0xf6>
 800adfe:	2c00      	cmp	r4, #0
 800ae00:	d0ad      	beq.n	800ad5e <__ieee754_atan2f+0x26>
 800ae02:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ae68 <__ieee754_atan2f+0x130>
 800ae06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae0a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ae6c <__ieee754_atan2f+0x134>
 800ae0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae12:	e7a4      	b.n	800ad5e <__ieee754_atan2f+0x26>
 800ae14:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ae58 <__ieee754_atan2f+0x120>
 800ae18:	e7ed      	b.n	800adf6 <__ieee754_atan2f+0xbe>
 800ae1a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ae70 <__ieee754_atan2f+0x138>
 800ae1e:	e7ea      	b.n	800adf6 <__ieee754_atan2f+0xbe>
 800ae20:	ee17 3a90 	vmov	r3, s15
 800ae24:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ae28:	ee07 3a90 	vmov	s15, r3
 800ae2c:	e797      	b.n	800ad5e <__ieee754_atan2f+0x26>
 800ae2e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ae68 <__ieee754_atan2f+0x130>
 800ae32:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae36:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ae6c <__ieee754_atan2f+0x134>
 800ae3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae3e:	e78e      	b.n	800ad5e <__ieee754_atan2f+0x26>
 800ae40:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ae6c <__ieee754_atan2f+0x134>
 800ae44:	e78b      	b.n	800ad5e <__ieee754_atan2f+0x26>
 800ae46:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ae74 <__ieee754_atan2f+0x13c>
 800ae4a:	e788      	b.n	800ad5e <__ieee754_atan2f+0x26>
 800ae4c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ae70 <__ieee754_atan2f+0x138>
 800ae50:	e785      	b.n	800ad5e <__ieee754_atan2f+0x26>
 800ae52:	bf00      	nop
 800ae54:	c0490fdb 	.word	0xc0490fdb
 800ae58:	3fc90fdb 	.word	0x3fc90fdb
 800ae5c:	bfc90fdb 	.word	0xbfc90fdb
 800ae60:	0800c37c 	.word	0x0800c37c
 800ae64:	0800c370 	.word	0x0800c370
 800ae68:	33bbbd2e 	.word	0x33bbbd2e
 800ae6c:	40490fdb 	.word	0x40490fdb
 800ae70:	00000000 	.word	0x00000000
 800ae74:	3f490fdb 	.word	0x3f490fdb

0800ae78 <__ieee754_rem_pio2f>:
 800ae78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae7a:	ee10 6a10 	vmov	r6, s0
 800ae7e:	4b88      	ldr	r3, [pc, #544]	@ (800b0a0 <__ieee754_rem_pio2f+0x228>)
 800ae80:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800ae84:	429d      	cmp	r5, r3
 800ae86:	b087      	sub	sp, #28
 800ae88:	4604      	mov	r4, r0
 800ae8a:	d805      	bhi.n	800ae98 <__ieee754_rem_pio2f+0x20>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	ed80 0a00 	vstr	s0, [r0]
 800ae92:	6043      	str	r3, [r0, #4]
 800ae94:	2000      	movs	r0, #0
 800ae96:	e022      	b.n	800aede <__ieee754_rem_pio2f+0x66>
 800ae98:	4b82      	ldr	r3, [pc, #520]	@ (800b0a4 <__ieee754_rem_pio2f+0x22c>)
 800ae9a:	429d      	cmp	r5, r3
 800ae9c:	d83a      	bhi.n	800af14 <__ieee754_rem_pio2f+0x9c>
 800ae9e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800aea2:	2e00      	cmp	r6, #0
 800aea4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b0a8 <__ieee754_rem_pio2f+0x230>
 800aea8:	4a80      	ldr	r2, [pc, #512]	@ (800b0ac <__ieee754_rem_pio2f+0x234>)
 800aeaa:	f023 030f 	bic.w	r3, r3, #15
 800aeae:	dd18      	ble.n	800aee2 <__ieee754_rem_pio2f+0x6a>
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800aeb6:	bf09      	itett	eq
 800aeb8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b0b0 <__ieee754_rem_pio2f+0x238>
 800aebc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b0b4 <__ieee754_rem_pio2f+0x23c>
 800aec0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b0b8 <__ieee754_rem_pio2f+0x240>
 800aec4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800aec8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800aecc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aed0:	ed80 7a00 	vstr	s14, [r0]
 800aed4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aed8:	edc0 7a01 	vstr	s15, [r0, #4]
 800aedc:	2001      	movs	r0, #1
 800aede:	b007      	add	sp, #28
 800aee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee2:	4293      	cmp	r3, r2
 800aee4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800aee8:	bf09      	itett	eq
 800aeea:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b0b0 <__ieee754_rem_pio2f+0x238>
 800aeee:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b0b4 <__ieee754_rem_pio2f+0x23c>
 800aef2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b0b8 <__ieee754_rem_pio2f+0x240>
 800aef6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800aefa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800aefe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af02:	ed80 7a00 	vstr	s14, [r0]
 800af06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0a:	edc0 7a01 	vstr	s15, [r0, #4]
 800af0e:	f04f 30ff 	mov.w	r0, #4294967295
 800af12:	e7e4      	b.n	800aede <__ieee754_rem_pio2f+0x66>
 800af14:	4b69      	ldr	r3, [pc, #420]	@ (800b0bc <__ieee754_rem_pio2f+0x244>)
 800af16:	429d      	cmp	r5, r3
 800af18:	d873      	bhi.n	800b002 <__ieee754_rem_pio2f+0x18a>
 800af1a:	f000 f9b1 	bl	800b280 <fabsf>
 800af1e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b0c0 <__ieee754_rem_pio2f+0x248>
 800af22:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800af26:	eee0 7a07 	vfma.f32	s15, s0, s14
 800af2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af32:	ee17 0a90 	vmov	r0, s15
 800af36:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b0a8 <__ieee754_rem_pio2f+0x230>
 800af3a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800af3e:	281f      	cmp	r0, #31
 800af40:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b0b4 <__ieee754_rem_pio2f+0x23c>
 800af44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af48:	eeb1 6a47 	vneg.f32	s12, s14
 800af4c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800af50:	ee16 1a90 	vmov	r1, s13
 800af54:	dc09      	bgt.n	800af6a <__ieee754_rem_pio2f+0xf2>
 800af56:	4a5b      	ldr	r2, [pc, #364]	@ (800b0c4 <__ieee754_rem_pio2f+0x24c>)
 800af58:	1e47      	subs	r7, r0, #1
 800af5a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800af5e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800af62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800af66:	4293      	cmp	r3, r2
 800af68:	d107      	bne.n	800af7a <__ieee754_rem_pio2f+0x102>
 800af6a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800af6e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800af72:	2a08      	cmp	r2, #8
 800af74:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800af78:	dc14      	bgt.n	800afa4 <__ieee754_rem_pio2f+0x12c>
 800af7a:	6021      	str	r1, [r4, #0]
 800af7c:	ed94 7a00 	vldr	s14, [r4]
 800af80:	ee30 0a47 	vsub.f32	s0, s0, s14
 800af84:	2e00      	cmp	r6, #0
 800af86:	ee30 0a67 	vsub.f32	s0, s0, s15
 800af8a:	ed84 0a01 	vstr	s0, [r4, #4]
 800af8e:	daa6      	bge.n	800aede <__ieee754_rem_pio2f+0x66>
 800af90:	eeb1 7a47 	vneg.f32	s14, s14
 800af94:	eeb1 0a40 	vneg.f32	s0, s0
 800af98:	ed84 7a00 	vstr	s14, [r4]
 800af9c:	ed84 0a01 	vstr	s0, [r4, #4]
 800afa0:	4240      	negs	r0, r0
 800afa2:	e79c      	b.n	800aede <__ieee754_rem_pio2f+0x66>
 800afa4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b0b0 <__ieee754_rem_pio2f+0x238>
 800afa8:	eef0 6a40 	vmov.f32	s13, s0
 800afac:	eee6 6a25 	vfma.f32	s13, s12, s11
 800afb0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800afb4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800afb8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b0b8 <__ieee754_rem_pio2f+0x240>
 800afbc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800afc0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800afc4:	ee15 2a90 	vmov	r2, s11
 800afc8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800afcc:	1a5b      	subs	r3, r3, r1
 800afce:	2b19      	cmp	r3, #25
 800afd0:	dc04      	bgt.n	800afdc <__ieee754_rem_pio2f+0x164>
 800afd2:	edc4 5a00 	vstr	s11, [r4]
 800afd6:	eeb0 0a66 	vmov.f32	s0, s13
 800afda:	e7cf      	b.n	800af7c <__ieee754_rem_pio2f+0x104>
 800afdc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b0c8 <__ieee754_rem_pio2f+0x250>
 800afe0:	eeb0 0a66 	vmov.f32	s0, s13
 800afe4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800afe8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800afec:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b0cc <__ieee754_rem_pio2f+0x254>
 800aff0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aff4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800aff8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800affc:	ed84 7a00 	vstr	s14, [r4]
 800b000:	e7bc      	b.n	800af7c <__ieee754_rem_pio2f+0x104>
 800b002:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b006:	d306      	bcc.n	800b016 <__ieee754_rem_pio2f+0x19e>
 800b008:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b00c:	edc0 7a01 	vstr	s15, [r0, #4]
 800b010:	edc0 7a00 	vstr	s15, [r0]
 800b014:	e73e      	b.n	800ae94 <__ieee754_rem_pio2f+0x1c>
 800b016:	15ea      	asrs	r2, r5, #23
 800b018:	3a86      	subs	r2, #134	@ 0x86
 800b01a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b026:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b0d0 <__ieee754_rem_pio2f+0x258>
 800b02a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b02e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b032:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b036:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b03a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b03e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b046:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b04a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b04e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b056:	edcd 7a05 	vstr	s15, [sp, #20]
 800b05a:	d11e      	bne.n	800b09a <__ieee754_rem_pio2f+0x222>
 800b05c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b064:	bf0c      	ite	eq
 800b066:	2301      	moveq	r3, #1
 800b068:	2302      	movne	r3, #2
 800b06a:	491a      	ldr	r1, [pc, #104]	@ (800b0d4 <__ieee754_rem_pio2f+0x25c>)
 800b06c:	9101      	str	r1, [sp, #4]
 800b06e:	2102      	movs	r1, #2
 800b070:	9100      	str	r1, [sp, #0]
 800b072:	a803      	add	r0, sp, #12
 800b074:	4621      	mov	r1, r4
 800b076:	f000 fc63 	bl	800b940 <__kernel_rem_pio2f>
 800b07a:	2e00      	cmp	r6, #0
 800b07c:	f6bf af2f 	bge.w	800aede <__ieee754_rem_pio2f+0x66>
 800b080:	edd4 7a00 	vldr	s15, [r4]
 800b084:	eef1 7a67 	vneg.f32	s15, s15
 800b088:	edc4 7a00 	vstr	s15, [r4]
 800b08c:	edd4 7a01 	vldr	s15, [r4, #4]
 800b090:	eef1 7a67 	vneg.f32	s15, s15
 800b094:	edc4 7a01 	vstr	s15, [r4, #4]
 800b098:	e782      	b.n	800afa0 <__ieee754_rem_pio2f+0x128>
 800b09a:	2303      	movs	r3, #3
 800b09c:	e7e5      	b.n	800b06a <__ieee754_rem_pio2f+0x1f2>
 800b09e:	bf00      	nop
 800b0a0:	3f490fd8 	.word	0x3f490fd8
 800b0a4:	4016cbe3 	.word	0x4016cbe3
 800b0a8:	3fc90f80 	.word	0x3fc90f80
 800b0ac:	3fc90fd0 	.word	0x3fc90fd0
 800b0b0:	37354400 	.word	0x37354400
 800b0b4:	37354443 	.word	0x37354443
 800b0b8:	2e85a308 	.word	0x2e85a308
 800b0bc:	43490f80 	.word	0x43490f80
 800b0c0:	3f22f984 	.word	0x3f22f984
 800b0c4:	0800c388 	.word	0x0800c388
 800b0c8:	2e85a300 	.word	0x2e85a300
 800b0cc:	248d3132 	.word	0x248d3132
 800b0d0:	43800000 	.word	0x43800000
 800b0d4:	0800c408 	.word	0x0800c408

0800b0d8 <atanf>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	ee10 5a10 	vmov	r5, s0
 800b0de:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800b0e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800b0e6:	eef0 7a40 	vmov.f32	s15, s0
 800b0ea:	d310      	bcc.n	800b10e <atanf+0x36>
 800b0ec:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800b0f0:	d904      	bls.n	800b0fc <atanf+0x24>
 800b0f2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b0f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800b234 <atanf+0x15c>
 800b100:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800b238 <atanf+0x160>
 800b104:	2d00      	cmp	r5, #0
 800b106:	bfc8      	it	gt
 800b108:	eef0 7a47 	vmovgt.f32	s15, s14
 800b10c:	e7f3      	b.n	800b0f6 <atanf+0x1e>
 800b10e:	4b4b      	ldr	r3, [pc, #300]	@ (800b23c <atanf+0x164>)
 800b110:	429c      	cmp	r4, r3
 800b112:	d810      	bhi.n	800b136 <atanf+0x5e>
 800b114:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800b118:	d20a      	bcs.n	800b130 <atanf+0x58>
 800b11a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800b240 <atanf+0x168>
 800b11e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b126:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12e:	dce2      	bgt.n	800b0f6 <atanf+0x1e>
 800b130:	f04f 33ff 	mov.w	r3, #4294967295
 800b134:	e013      	b.n	800b15e <atanf+0x86>
 800b136:	f000 f8a3 	bl	800b280 <fabsf>
 800b13a:	4b42      	ldr	r3, [pc, #264]	@ (800b244 <atanf+0x16c>)
 800b13c:	429c      	cmp	r4, r3
 800b13e:	d84f      	bhi.n	800b1e0 <atanf+0x108>
 800b140:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800b144:	429c      	cmp	r4, r3
 800b146:	d841      	bhi.n	800b1cc <atanf+0xf4>
 800b148:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b14c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b150:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b154:	2300      	movs	r3, #0
 800b156:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b15a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b15e:	1c5a      	adds	r2, r3, #1
 800b160:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b164:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b248 <atanf+0x170>
 800b168:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800b24c <atanf+0x174>
 800b16c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800b250 <atanf+0x178>
 800b170:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b174:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b178:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800b254 <atanf+0x17c>
 800b17c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b180:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800b258 <atanf+0x180>
 800b184:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b188:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800b25c <atanf+0x184>
 800b18c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b190:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b260 <atanf+0x188>
 800b194:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b198:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800b264 <atanf+0x18c>
 800b19c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b1a0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800b268 <atanf+0x190>
 800b1a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b1a8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800b26c <atanf+0x194>
 800b1ac:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b1b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b270 <atanf+0x198>
 800b1b4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b1b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b1bc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b1c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b1c4:	d121      	bne.n	800b20a <atanf+0x132>
 800b1c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1ca:	e794      	b.n	800b0f6 <atanf+0x1e>
 800b1cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b1d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b1d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b1d8:	2301      	movs	r3, #1
 800b1da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b1de:	e7be      	b.n	800b15e <atanf+0x86>
 800b1e0:	4b24      	ldr	r3, [pc, #144]	@ (800b274 <atanf+0x19c>)
 800b1e2:	429c      	cmp	r4, r3
 800b1e4:	d80b      	bhi.n	800b1fe <atanf+0x126>
 800b1e6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800b1ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b1f2:	2302      	movs	r3, #2
 800b1f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b1f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1fc:	e7af      	b.n	800b15e <atanf+0x86>
 800b1fe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b202:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b206:	2303      	movs	r3, #3
 800b208:	e7a9      	b.n	800b15e <atanf+0x86>
 800b20a:	4a1b      	ldr	r2, [pc, #108]	@ (800b278 <atanf+0x1a0>)
 800b20c:	491b      	ldr	r1, [pc, #108]	@ (800b27c <atanf+0x1a4>)
 800b20e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b212:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b216:	edd3 6a00 	vldr	s13, [r3]
 800b21a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b21e:	2d00      	cmp	r5, #0
 800b220:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b224:	edd2 7a00 	vldr	s15, [r2]
 800b228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b22c:	bfb8      	it	lt
 800b22e:	eef1 7a67 	vneglt.f32	s15, s15
 800b232:	e760      	b.n	800b0f6 <atanf+0x1e>
 800b234:	bfc90fdb 	.word	0xbfc90fdb
 800b238:	3fc90fdb 	.word	0x3fc90fdb
 800b23c:	3edfffff 	.word	0x3edfffff
 800b240:	7149f2ca 	.word	0x7149f2ca
 800b244:	3f97ffff 	.word	0x3f97ffff
 800b248:	3c8569d7 	.word	0x3c8569d7
 800b24c:	3d4bda59 	.word	0x3d4bda59
 800b250:	bd6ef16b 	.word	0xbd6ef16b
 800b254:	3d886b35 	.word	0x3d886b35
 800b258:	3dba2e6e 	.word	0x3dba2e6e
 800b25c:	3e124925 	.word	0x3e124925
 800b260:	3eaaaaab 	.word	0x3eaaaaab
 800b264:	bd15a221 	.word	0xbd15a221
 800b268:	bd9d8795 	.word	0xbd9d8795
 800b26c:	bde38e38 	.word	0xbde38e38
 800b270:	be4ccccd 	.word	0xbe4ccccd
 800b274:	401bffff 	.word	0x401bffff
 800b278:	0800c730 	.word	0x0800c730
 800b27c:	0800c720 	.word	0x0800c720

0800b280 <fabsf>:
 800b280:	ee10 3a10 	vmov	r3, s0
 800b284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b288:	ee00 3a10 	vmov	s0, r3
 800b28c:	4770      	bx	lr
	...

0800b290 <__kernel_rem_pio2>:
 800b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b294:	ed2d 8b02 	vpush	{d8}
 800b298:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b29c:	f112 0f14 	cmn.w	r2, #20
 800b2a0:	9306      	str	r3, [sp, #24]
 800b2a2:	9104      	str	r1, [sp, #16]
 800b2a4:	4bbe      	ldr	r3, [pc, #760]	@ (800b5a0 <__kernel_rem_pio2+0x310>)
 800b2a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b2a8:	9008      	str	r0, [sp, #32]
 800b2aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	9b06      	ldr	r3, [sp, #24]
 800b2b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2b6:	bfa8      	it	ge
 800b2b8:	1ed4      	subge	r4, r2, #3
 800b2ba:	9305      	str	r3, [sp, #20]
 800b2bc:	bfb2      	itee	lt
 800b2be:	2400      	movlt	r4, #0
 800b2c0:	2318      	movge	r3, #24
 800b2c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b2c6:	f06f 0317 	mvn.w	r3, #23
 800b2ca:	fb04 3303 	mla	r3, r4, r3, r3
 800b2ce:	eb03 0b02 	add.w	fp, r3, r2
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	9a05      	ldr	r2, [sp, #20]
 800b2d6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b590 <__kernel_rem_pio2+0x300>
 800b2da:	eb03 0802 	add.w	r8, r3, r2
 800b2de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b2e0:	1aa7      	subs	r7, r4, r2
 800b2e2:	ae20      	add	r6, sp, #128	@ 0x80
 800b2e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b2e8:	2500      	movs	r5, #0
 800b2ea:	4545      	cmp	r5, r8
 800b2ec:	dd13      	ble.n	800b316 <__kernel_rem_pio2+0x86>
 800b2ee:	9b06      	ldr	r3, [sp, #24]
 800b2f0:	aa20      	add	r2, sp, #128	@ 0x80
 800b2f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b2f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b2fa:	f04f 0800 	mov.w	r8, #0
 800b2fe:	9b00      	ldr	r3, [sp, #0]
 800b300:	4598      	cmp	r8, r3
 800b302:	dc31      	bgt.n	800b368 <__kernel_rem_pio2+0xd8>
 800b304:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b590 <__kernel_rem_pio2+0x300>
 800b308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b30c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b310:	462f      	mov	r7, r5
 800b312:	2600      	movs	r6, #0
 800b314:	e01b      	b.n	800b34e <__kernel_rem_pio2+0xbe>
 800b316:	42ef      	cmn	r7, r5
 800b318:	d407      	bmi.n	800b32a <__kernel_rem_pio2+0x9a>
 800b31a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b31e:	f7f5 f9f7 	bl	8000710 <__aeabi_i2d>
 800b322:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b326:	3501      	adds	r5, #1
 800b328:	e7df      	b.n	800b2ea <__kernel_rem_pio2+0x5a>
 800b32a:	ec51 0b18 	vmov	r0, r1, d8
 800b32e:	e7f8      	b.n	800b322 <__kernel_rem_pio2+0x92>
 800b330:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b334:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b338:	f7f4 ff6e 	bl	8000218 <__aeabi_dmul>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b344:	f7f5 f898 	bl	8000478 <__adddf3>
 800b348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b34c:	3601      	adds	r6, #1
 800b34e:	9b05      	ldr	r3, [sp, #20]
 800b350:	429e      	cmp	r6, r3
 800b352:	f1a7 0708 	sub.w	r7, r7, #8
 800b356:	ddeb      	ble.n	800b330 <__kernel_rem_pio2+0xa0>
 800b358:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b35c:	f108 0801 	add.w	r8, r8, #1
 800b360:	ecaa 7b02 	vstmia	sl!, {d7}
 800b364:	3508      	adds	r5, #8
 800b366:	e7ca      	b.n	800b2fe <__kernel_rem_pio2+0x6e>
 800b368:	9b00      	ldr	r3, [sp, #0]
 800b36a:	f8dd 8000 	ldr.w	r8, [sp]
 800b36e:	aa0c      	add	r2, sp, #48	@ 0x30
 800b370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b374:	930a      	str	r3, [sp, #40]	@ 0x28
 800b376:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b378:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b37e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b382:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b384:	ab98      	add	r3, sp, #608	@ 0x260
 800b386:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b38a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b38e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b392:	ac0c      	add	r4, sp, #48	@ 0x30
 800b394:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b396:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b39a:	46a1      	mov	r9, r4
 800b39c:	46c2      	mov	sl, r8
 800b39e:	f1ba 0f00 	cmp.w	sl, #0
 800b3a2:	f1a5 0508 	sub.w	r5, r5, #8
 800b3a6:	dc77      	bgt.n	800b498 <__kernel_rem_pio2+0x208>
 800b3a8:	4658      	mov	r0, fp
 800b3aa:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b3ae:	f000 fd3b 	bl	800be28 <scalbn>
 800b3b2:	ec57 6b10 	vmov	r6, r7, d0
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b3bc:	4630      	mov	r0, r6
 800b3be:	4639      	mov	r1, r7
 800b3c0:	f7f4 ff2a 	bl	8000218 <__aeabi_dmul>
 800b3c4:	ec41 0b10 	vmov	d0, r0, r1
 800b3c8:	f000 fe12 	bl	800bff0 <floor>
 800b3cc:	4b75      	ldr	r3, [pc, #468]	@ (800b5a4 <__kernel_rem_pio2+0x314>)
 800b3ce:	ec51 0b10 	vmov	r0, r1, d0
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f7f4 ff20 	bl	8000218 <__aeabi_dmul>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4630      	mov	r0, r6
 800b3de:	4639      	mov	r1, r7
 800b3e0:	f7f5 f848 	bl	8000474 <__aeabi_dsub>
 800b3e4:	460f      	mov	r7, r1
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	f7f5 fa84 	bl	80008f4 <__aeabi_d2iz>
 800b3ec:	9002      	str	r0, [sp, #8]
 800b3ee:	f7f5 f98f 	bl	8000710 <__aeabi_i2d>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	f7f5 f83b 	bl	8000474 <__aeabi_dsub>
 800b3fe:	f1bb 0f00 	cmp.w	fp, #0
 800b402:	4606      	mov	r6, r0
 800b404:	460f      	mov	r7, r1
 800b406:	dd6c      	ble.n	800b4e2 <__kernel_rem_pio2+0x252>
 800b408:	f108 31ff 	add.w	r1, r8, #4294967295
 800b40c:	ab0c      	add	r3, sp, #48	@ 0x30
 800b40e:	9d02      	ldr	r5, [sp, #8]
 800b410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b414:	f1cb 0018 	rsb	r0, fp, #24
 800b418:	fa43 f200 	asr.w	r2, r3, r0
 800b41c:	4415      	add	r5, r2
 800b41e:	4082      	lsls	r2, r0
 800b420:	1a9b      	subs	r3, r3, r2
 800b422:	aa0c      	add	r2, sp, #48	@ 0x30
 800b424:	9502      	str	r5, [sp, #8]
 800b426:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b42a:	f1cb 0217 	rsb	r2, fp, #23
 800b42e:	fa43 f902 	asr.w	r9, r3, r2
 800b432:	f1b9 0f00 	cmp.w	r9, #0
 800b436:	dd64      	ble.n	800b502 <__kernel_rem_pio2+0x272>
 800b438:	9b02      	ldr	r3, [sp, #8]
 800b43a:	2200      	movs	r2, #0
 800b43c:	3301      	adds	r3, #1
 800b43e:	9302      	str	r3, [sp, #8]
 800b440:	4615      	mov	r5, r2
 800b442:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b446:	4590      	cmp	r8, r2
 800b448:	f300 80b8 	bgt.w	800b5bc <__kernel_rem_pio2+0x32c>
 800b44c:	f1bb 0f00 	cmp.w	fp, #0
 800b450:	dd07      	ble.n	800b462 <__kernel_rem_pio2+0x1d2>
 800b452:	f1bb 0f01 	cmp.w	fp, #1
 800b456:	f000 80bf 	beq.w	800b5d8 <__kernel_rem_pio2+0x348>
 800b45a:	f1bb 0f02 	cmp.w	fp, #2
 800b45e:	f000 80c6 	beq.w	800b5ee <__kernel_rem_pio2+0x35e>
 800b462:	f1b9 0f02 	cmp.w	r9, #2
 800b466:	d14c      	bne.n	800b502 <__kernel_rem_pio2+0x272>
 800b468:	4632      	mov	r2, r6
 800b46a:	463b      	mov	r3, r7
 800b46c:	494e      	ldr	r1, [pc, #312]	@ (800b5a8 <__kernel_rem_pio2+0x318>)
 800b46e:	2000      	movs	r0, #0
 800b470:	f7f5 f800 	bl	8000474 <__aeabi_dsub>
 800b474:	4606      	mov	r6, r0
 800b476:	460f      	mov	r7, r1
 800b478:	2d00      	cmp	r5, #0
 800b47a:	d042      	beq.n	800b502 <__kernel_rem_pio2+0x272>
 800b47c:	4658      	mov	r0, fp
 800b47e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b598 <__kernel_rem_pio2+0x308>
 800b482:	f000 fcd1 	bl	800be28 <scalbn>
 800b486:	4630      	mov	r0, r6
 800b488:	4639      	mov	r1, r7
 800b48a:	ec53 2b10 	vmov	r2, r3, d0
 800b48e:	f7f4 fff1 	bl	8000474 <__aeabi_dsub>
 800b492:	4606      	mov	r6, r0
 800b494:	460f      	mov	r7, r1
 800b496:	e034      	b.n	800b502 <__kernel_rem_pio2+0x272>
 800b498:	4b44      	ldr	r3, [pc, #272]	@ (800b5ac <__kernel_rem_pio2+0x31c>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a0:	f7f4 feba 	bl	8000218 <__aeabi_dmul>
 800b4a4:	f7f5 fa26 	bl	80008f4 <__aeabi_d2iz>
 800b4a8:	f7f5 f932 	bl	8000710 <__aeabi_i2d>
 800b4ac:	4b40      	ldr	r3, [pc, #256]	@ (800b5b0 <__kernel_rem_pio2+0x320>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	460f      	mov	r7, r1
 800b4b4:	f7f4 feb0 	bl	8000218 <__aeabi_dmul>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c0:	f7f4 ffd8 	bl	8000474 <__aeabi_dsub>
 800b4c4:	f7f5 fa16 	bl	80008f4 <__aeabi_d2iz>
 800b4c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4cc:	f849 0b04 	str.w	r0, [r9], #4
 800b4d0:	4639      	mov	r1, r7
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7f4 ffd0 	bl	8000478 <__adddf3>
 800b4d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4e0:	e75d      	b.n	800b39e <__kernel_rem_pio2+0x10e>
 800b4e2:	d107      	bne.n	800b4f4 <__kernel_rem_pio2+0x264>
 800b4e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800b4e8:	aa0c      	add	r2, sp, #48	@ 0x30
 800b4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4ee:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b4f2:	e79e      	b.n	800b432 <__kernel_rem_pio2+0x1a2>
 800b4f4:	4b2f      	ldr	r3, [pc, #188]	@ (800b5b4 <__kernel_rem_pio2+0x324>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f7f5 f9e8 	bl	80008cc <__aeabi_dcmpge>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d143      	bne.n	800b588 <__kernel_rem_pio2+0x2f8>
 800b500:	4681      	mov	r9, r0
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	4630      	mov	r0, r6
 800b508:	4639      	mov	r1, r7
 800b50a:	f7f5 f9c1 	bl	8000890 <__aeabi_dcmpeq>
 800b50e:	2800      	cmp	r0, #0
 800b510:	f000 80bf 	beq.w	800b692 <__kernel_rem_pio2+0x402>
 800b514:	f108 33ff 	add.w	r3, r8, #4294967295
 800b518:	2200      	movs	r2, #0
 800b51a:	9900      	ldr	r1, [sp, #0]
 800b51c:	428b      	cmp	r3, r1
 800b51e:	da6e      	bge.n	800b5fe <__kernel_rem_pio2+0x36e>
 800b520:	2a00      	cmp	r2, #0
 800b522:	f000 8089 	beq.w	800b638 <__kernel_rem_pio2+0x3a8>
 800b526:	f108 38ff 	add.w	r8, r8, #4294967295
 800b52a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b52c:	f1ab 0b18 	sub.w	fp, fp, #24
 800b530:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d0f6      	beq.n	800b526 <__kernel_rem_pio2+0x296>
 800b538:	4658      	mov	r0, fp
 800b53a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b598 <__kernel_rem_pio2+0x308>
 800b53e:	f000 fc73 	bl	800be28 <scalbn>
 800b542:	f108 0301 	add.w	r3, r8, #1
 800b546:	00da      	lsls	r2, r3, #3
 800b548:	9205      	str	r2, [sp, #20]
 800b54a:	ec55 4b10 	vmov	r4, r5, d0
 800b54e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b550:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b5ac <__kernel_rem_pio2+0x31c>
 800b554:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b558:	4646      	mov	r6, r8
 800b55a:	f04f 0a00 	mov.w	sl, #0
 800b55e:	2e00      	cmp	r6, #0
 800b560:	f280 80cf 	bge.w	800b702 <__kernel_rem_pio2+0x472>
 800b564:	4644      	mov	r4, r8
 800b566:	2c00      	cmp	r4, #0
 800b568:	f2c0 80fd 	blt.w	800b766 <__kernel_rem_pio2+0x4d6>
 800b56c:	4b12      	ldr	r3, [pc, #72]	@ (800b5b8 <__kernel_rem_pio2+0x328>)
 800b56e:	461f      	mov	r7, r3
 800b570:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b572:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b576:	9306      	str	r3, [sp, #24]
 800b578:	f04f 0a00 	mov.w	sl, #0
 800b57c:	f04f 0b00 	mov.w	fp, #0
 800b580:	2600      	movs	r6, #0
 800b582:	eba8 0504 	sub.w	r5, r8, r4
 800b586:	e0e2      	b.n	800b74e <__kernel_rem_pio2+0x4be>
 800b588:	f04f 0902 	mov.w	r9, #2
 800b58c:	e754      	b.n	800b438 <__kernel_rem_pio2+0x1a8>
 800b58e:	bf00      	nop
	...
 800b59c:	3ff00000 	.word	0x3ff00000
 800b5a0:	0800c780 	.word	0x0800c780
 800b5a4:	40200000 	.word	0x40200000
 800b5a8:	3ff00000 	.word	0x3ff00000
 800b5ac:	3e700000 	.word	0x3e700000
 800b5b0:	41700000 	.word	0x41700000
 800b5b4:	3fe00000 	.word	0x3fe00000
 800b5b8:	0800c740 	.word	0x0800c740
 800b5bc:	f854 3b04 	ldr.w	r3, [r4], #4
 800b5c0:	b945      	cbnz	r5, 800b5d4 <__kernel_rem_pio2+0x344>
 800b5c2:	b123      	cbz	r3, 800b5ce <__kernel_rem_pio2+0x33e>
 800b5c4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b5c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	3201      	adds	r2, #1
 800b5d0:	461d      	mov	r5, r3
 800b5d2:	e738      	b.n	800b446 <__kernel_rem_pio2+0x1b6>
 800b5d4:	1acb      	subs	r3, r1, r3
 800b5d6:	e7f7      	b.n	800b5c8 <__kernel_rem_pio2+0x338>
 800b5d8:	f108 32ff 	add.w	r2, r8, #4294967295
 800b5dc:	ab0c      	add	r3, sp, #48	@ 0x30
 800b5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b5e6:	a90c      	add	r1, sp, #48	@ 0x30
 800b5e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b5ec:	e739      	b.n	800b462 <__kernel_rem_pio2+0x1d2>
 800b5ee:	f108 32ff 	add.w	r2, r8, #4294967295
 800b5f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b5fc:	e7f3      	b.n	800b5e6 <__kernel_rem_pio2+0x356>
 800b5fe:	a90c      	add	r1, sp, #48	@ 0x30
 800b600:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b604:	3b01      	subs	r3, #1
 800b606:	430a      	orrs	r2, r1
 800b608:	e787      	b.n	800b51a <__kernel_rem_pio2+0x28a>
 800b60a:	3401      	adds	r4, #1
 800b60c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b610:	2a00      	cmp	r2, #0
 800b612:	d0fa      	beq.n	800b60a <__kernel_rem_pio2+0x37a>
 800b614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b616:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b61a:	eb0d 0503 	add.w	r5, sp, r3
 800b61e:	9b06      	ldr	r3, [sp, #24]
 800b620:	aa20      	add	r2, sp, #128	@ 0x80
 800b622:	4443      	add	r3, r8
 800b624:	f108 0701 	add.w	r7, r8, #1
 800b628:	3d98      	subs	r5, #152	@ 0x98
 800b62a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b62e:	4444      	add	r4, r8
 800b630:	42bc      	cmp	r4, r7
 800b632:	da04      	bge.n	800b63e <__kernel_rem_pio2+0x3ae>
 800b634:	46a0      	mov	r8, r4
 800b636:	e6a2      	b.n	800b37e <__kernel_rem_pio2+0xee>
 800b638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b63a:	2401      	movs	r4, #1
 800b63c:	e7e6      	b.n	800b60c <__kernel_rem_pio2+0x37c>
 800b63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b640:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b644:	f7f5 f864 	bl	8000710 <__aeabi_i2d>
 800b648:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b910 <__kernel_rem_pio2+0x680>
 800b64c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b650:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b654:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b658:	46b2      	mov	sl, r6
 800b65a:	f04f 0800 	mov.w	r8, #0
 800b65e:	9b05      	ldr	r3, [sp, #20]
 800b660:	4598      	cmp	r8, r3
 800b662:	dd05      	ble.n	800b670 <__kernel_rem_pio2+0x3e0>
 800b664:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b668:	3701      	adds	r7, #1
 800b66a:	eca5 7b02 	vstmia	r5!, {d7}
 800b66e:	e7df      	b.n	800b630 <__kernel_rem_pio2+0x3a0>
 800b670:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b674:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b678:	f7f4 fdce 	bl	8000218 <__aeabi_dmul>
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b684:	f7f4 fef8 	bl	8000478 <__adddf3>
 800b688:	f108 0801 	add.w	r8, r8, #1
 800b68c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b690:	e7e5      	b.n	800b65e <__kernel_rem_pio2+0x3ce>
 800b692:	f1cb 0000 	rsb	r0, fp, #0
 800b696:	ec47 6b10 	vmov	d0, r6, r7
 800b69a:	f000 fbc5 	bl	800be28 <scalbn>
 800b69e:	ec55 4b10 	vmov	r4, r5, d0
 800b6a2:	4b9d      	ldr	r3, [pc, #628]	@ (800b918 <__kernel_rem_pio2+0x688>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7f5 f90f 	bl	80008cc <__aeabi_dcmpge>
 800b6ae:	b300      	cbz	r0, 800b6f2 <__kernel_rem_pio2+0x462>
 800b6b0:	4b9a      	ldr	r3, [pc, #616]	@ (800b91c <__kernel_rem_pio2+0x68c>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f7f4 fdae 	bl	8000218 <__aeabi_dmul>
 800b6bc:	f7f5 f91a 	bl	80008f4 <__aeabi_d2iz>
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	f7f5 f825 	bl	8000710 <__aeabi_i2d>
 800b6c6:	4b94      	ldr	r3, [pc, #592]	@ (800b918 <__kernel_rem_pio2+0x688>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f7f4 fda5 	bl	8000218 <__aeabi_dmul>
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f7f4 fecd 	bl	8000474 <__aeabi_dsub>
 800b6da:	f7f5 f90b 	bl	80008f4 <__aeabi_d2iz>
 800b6de:	ab0c      	add	r3, sp, #48	@ 0x30
 800b6e0:	f10b 0b18 	add.w	fp, fp, #24
 800b6e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b6e8:	f108 0801 	add.w	r8, r8, #1
 800b6ec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b6f0:	e722      	b.n	800b538 <__kernel_rem_pio2+0x2a8>
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7f5 f8fd 	bl	80008f4 <__aeabi_d2iz>
 800b6fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800b6fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b700:	e71a      	b.n	800b538 <__kernel_rem_pio2+0x2a8>
 800b702:	ab0c      	add	r3, sp, #48	@ 0x30
 800b704:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b708:	f7f5 f802 	bl	8000710 <__aeabi_i2d>
 800b70c:	4622      	mov	r2, r4
 800b70e:	462b      	mov	r3, r5
 800b710:	f7f4 fd82 	bl	8000218 <__aeabi_dmul>
 800b714:	4652      	mov	r2, sl
 800b716:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b71a:	465b      	mov	r3, fp
 800b71c:	4620      	mov	r0, r4
 800b71e:	4629      	mov	r1, r5
 800b720:	f7f4 fd7a 	bl	8000218 <__aeabi_dmul>
 800b724:	3e01      	subs	r6, #1
 800b726:	4604      	mov	r4, r0
 800b728:	460d      	mov	r5, r1
 800b72a:	e718      	b.n	800b55e <__kernel_rem_pio2+0x2ce>
 800b72c:	9906      	ldr	r1, [sp, #24]
 800b72e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b732:	9106      	str	r1, [sp, #24]
 800b734:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b738:	f7f4 fd6e 	bl	8000218 <__aeabi_dmul>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4650      	mov	r0, sl
 800b742:	4659      	mov	r1, fp
 800b744:	f7f4 fe98 	bl	8000478 <__adddf3>
 800b748:	3601      	adds	r6, #1
 800b74a:	4682      	mov	sl, r0
 800b74c:	468b      	mov	fp, r1
 800b74e:	9b00      	ldr	r3, [sp, #0]
 800b750:	429e      	cmp	r6, r3
 800b752:	dc01      	bgt.n	800b758 <__kernel_rem_pio2+0x4c8>
 800b754:	42b5      	cmp	r5, r6
 800b756:	dae9      	bge.n	800b72c <__kernel_rem_pio2+0x49c>
 800b758:	ab48      	add	r3, sp, #288	@ 0x120
 800b75a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b75e:	e9c5 ab00 	strd	sl, fp, [r5]
 800b762:	3c01      	subs	r4, #1
 800b764:	e6ff      	b.n	800b566 <__kernel_rem_pio2+0x2d6>
 800b766:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b768:	2b02      	cmp	r3, #2
 800b76a:	dc0b      	bgt.n	800b784 <__kernel_rem_pio2+0x4f4>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dc39      	bgt.n	800b7e4 <__kernel_rem_pio2+0x554>
 800b770:	d05d      	beq.n	800b82e <__kernel_rem_pio2+0x59e>
 800b772:	9b02      	ldr	r3, [sp, #8]
 800b774:	f003 0007 	and.w	r0, r3, #7
 800b778:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b77c:	ecbd 8b02 	vpop	{d8}
 800b780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b784:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b786:	2b03      	cmp	r3, #3
 800b788:	d1f3      	bne.n	800b772 <__kernel_rem_pio2+0x4e2>
 800b78a:	9b05      	ldr	r3, [sp, #20]
 800b78c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b790:	eb0d 0403 	add.w	r4, sp, r3
 800b794:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b798:	4625      	mov	r5, r4
 800b79a:	46c2      	mov	sl, r8
 800b79c:	f1ba 0f00 	cmp.w	sl, #0
 800b7a0:	f1a5 0508 	sub.w	r5, r5, #8
 800b7a4:	dc6b      	bgt.n	800b87e <__kernel_rem_pio2+0x5ee>
 800b7a6:	4645      	mov	r5, r8
 800b7a8:	2d01      	cmp	r5, #1
 800b7aa:	f1a4 0408 	sub.w	r4, r4, #8
 800b7ae:	f300 8087 	bgt.w	800b8c0 <__kernel_rem_pio2+0x630>
 800b7b2:	9c05      	ldr	r4, [sp, #20]
 800b7b4:	ab48      	add	r3, sp, #288	@ 0x120
 800b7b6:	441c      	add	r4, r3
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	f1b8 0f01 	cmp.w	r8, #1
 800b7c0:	f300 809c 	bgt.w	800b8fc <__kernel_rem_pio2+0x66c>
 800b7c4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b7c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b7cc:	f1b9 0f00 	cmp.w	r9, #0
 800b7d0:	f040 80a6 	bne.w	800b920 <__kernel_rem_pio2+0x690>
 800b7d4:	9b04      	ldr	r3, [sp, #16]
 800b7d6:	e9c3 7800 	strd	r7, r8, [r3]
 800b7da:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b7de:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b7e2:	e7c6      	b.n	800b772 <__kernel_rem_pio2+0x4e2>
 800b7e4:	9d05      	ldr	r5, [sp, #20]
 800b7e6:	ab48      	add	r3, sp, #288	@ 0x120
 800b7e8:	441d      	add	r5, r3
 800b7ea:	4644      	mov	r4, r8
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	2c00      	cmp	r4, #0
 800b7f2:	da35      	bge.n	800b860 <__kernel_rem_pio2+0x5d0>
 800b7f4:	f1b9 0f00 	cmp.w	r9, #0
 800b7f8:	d038      	beq.n	800b86c <__kernel_rem_pio2+0x5dc>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b800:	9c04      	ldr	r4, [sp, #16]
 800b802:	e9c4 2300 	strd	r2, r3, [r4]
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b80e:	f7f4 fe31 	bl	8000474 <__aeabi_dsub>
 800b812:	ad4a      	add	r5, sp, #296	@ 0x128
 800b814:	2401      	movs	r4, #1
 800b816:	45a0      	cmp	r8, r4
 800b818:	da2b      	bge.n	800b872 <__kernel_rem_pio2+0x5e2>
 800b81a:	f1b9 0f00 	cmp.w	r9, #0
 800b81e:	d002      	beq.n	800b826 <__kernel_rem_pio2+0x596>
 800b820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b824:	4619      	mov	r1, r3
 800b826:	9b04      	ldr	r3, [sp, #16]
 800b828:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b82c:	e7a1      	b.n	800b772 <__kernel_rem_pio2+0x4e2>
 800b82e:	9c05      	ldr	r4, [sp, #20]
 800b830:	ab48      	add	r3, sp, #288	@ 0x120
 800b832:	441c      	add	r4, r3
 800b834:	2000      	movs	r0, #0
 800b836:	2100      	movs	r1, #0
 800b838:	f1b8 0f00 	cmp.w	r8, #0
 800b83c:	da09      	bge.n	800b852 <__kernel_rem_pio2+0x5c2>
 800b83e:	f1b9 0f00 	cmp.w	r9, #0
 800b842:	d002      	beq.n	800b84a <__kernel_rem_pio2+0x5ba>
 800b844:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b848:	4619      	mov	r1, r3
 800b84a:	9b04      	ldr	r3, [sp, #16]
 800b84c:	e9c3 0100 	strd	r0, r1, [r3]
 800b850:	e78f      	b.n	800b772 <__kernel_rem_pio2+0x4e2>
 800b852:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b856:	f7f4 fe0f 	bl	8000478 <__adddf3>
 800b85a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b85e:	e7eb      	b.n	800b838 <__kernel_rem_pio2+0x5a8>
 800b860:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b864:	f7f4 fe08 	bl	8000478 <__adddf3>
 800b868:	3c01      	subs	r4, #1
 800b86a:	e7c1      	b.n	800b7f0 <__kernel_rem_pio2+0x560>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	e7c6      	b.n	800b800 <__kernel_rem_pio2+0x570>
 800b872:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b876:	f7f4 fdff 	bl	8000478 <__adddf3>
 800b87a:	3401      	adds	r4, #1
 800b87c:	e7cb      	b.n	800b816 <__kernel_rem_pio2+0x586>
 800b87e:	ed95 7b00 	vldr	d7, [r5]
 800b882:	ed8d 7b00 	vstr	d7, [sp]
 800b886:	ed95 7b02 	vldr	d7, [r5, #8]
 800b88a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b88e:	ec53 2b17 	vmov	r2, r3, d7
 800b892:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b896:	f7f4 fdef 	bl	8000478 <__adddf3>
 800b89a:	4602      	mov	r2, r0
 800b89c:	460b      	mov	r3, r1
 800b89e:	4606      	mov	r6, r0
 800b8a0:	460f      	mov	r7, r1
 800b8a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8a6:	f7f4 fde5 	bl	8000474 <__aeabi_dsub>
 800b8aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8ae:	f7f4 fde3 	bl	8000478 <__adddf3>
 800b8b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8b6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b8ba:	e9c5 6700 	strd	r6, r7, [r5]
 800b8be:	e76d      	b.n	800b79c <__kernel_rem_pio2+0x50c>
 800b8c0:	ed94 7b00 	vldr	d7, [r4]
 800b8c4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b8c8:	ec51 0b17 	vmov	r0, r1, d7
 800b8cc:	4652      	mov	r2, sl
 800b8ce:	465b      	mov	r3, fp
 800b8d0:	ed8d 7b00 	vstr	d7, [sp]
 800b8d4:	f7f4 fdd0 	bl	8000478 <__adddf3>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4606      	mov	r6, r0
 800b8de:	460f      	mov	r7, r1
 800b8e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8e4:	f7f4 fdc6 	bl	8000474 <__aeabi_dsub>
 800b8e8:	4652      	mov	r2, sl
 800b8ea:	465b      	mov	r3, fp
 800b8ec:	f7f4 fdc4 	bl	8000478 <__adddf3>
 800b8f0:	3d01      	subs	r5, #1
 800b8f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b8f6:	e9c4 6700 	strd	r6, r7, [r4]
 800b8fa:	e755      	b.n	800b7a8 <__kernel_rem_pio2+0x518>
 800b8fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b900:	f7f4 fdba 	bl	8000478 <__adddf3>
 800b904:	f108 38ff 	add.w	r8, r8, #4294967295
 800b908:	e758      	b.n	800b7bc <__kernel_rem_pio2+0x52c>
 800b90a:	bf00      	nop
 800b90c:	f3af 8000 	nop.w
	...
 800b918:	41700000 	.word	0x41700000
 800b91c:	3e700000 	.word	0x3e700000
 800b920:	9b04      	ldr	r3, [sp, #16]
 800b922:	9a04      	ldr	r2, [sp, #16]
 800b924:	601f      	str	r7, [r3, #0]
 800b926:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b92a:	605c      	str	r4, [r3, #4]
 800b92c:	609d      	str	r5, [r3, #8]
 800b92e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b932:	60d3      	str	r3, [r2, #12]
 800b934:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b938:	6110      	str	r0, [r2, #16]
 800b93a:	6153      	str	r3, [r2, #20]
 800b93c:	e719      	b.n	800b772 <__kernel_rem_pio2+0x4e2>
 800b93e:	bf00      	nop

0800b940 <__kernel_rem_pio2f>:
 800b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b944:	ed2d 8b04 	vpush	{d8-d9}
 800b948:	b0d9      	sub	sp, #356	@ 0x164
 800b94a:	4690      	mov	r8, r2
 800b94c:	9001      	str	r0, [sp, #4]
 800b94e:	4ab9      	ldr	r2, [pc, #740]	@ (800bc34 <__kernel_rem_pio2f+0x2f4>)
 800b950:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b952:	f118 0f04 	cmn.w	r8, #4
 800b956:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b95a:	460f      	mov	r7, r1
 800b95c:	f103 3bff 	add.w	fp, r3, #4294967295
 800b960:	db27      	blt.n	800b9b2 <__kernel_rem_pio2f+0x72>
 800b962:	f1b8 0203 	subs.w	r2, r8, #3
 800b966:	bf48      	it	mi
 800b968:	f108 0204 	addmi.w	r2, r8, #4
 800b96c:	10d2      	asrs	r2, r2, #3
 800b96e:	1c55      	adds	r5, r2, #1
 800b970:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b972:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800bc44 <__kernel_rem_pio2f+0x304>
 800b976:	00e8      	lsls	r0, r5, #3
 800b978:	eba2 060b 	sub.w	r6, r2, fp
 800b97c:	9002      	str	r0, [sp, #8]
 800b97e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b982:	eb0a 0c0b 	add.w	ip, sl, fp
 800b986:	ac1c      	add	r4, sp, #112	@ 0x70
 800b988:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b98c:	2000      	movs	r0, #0
 800b98e:	4560      	cmp	r0, ip
 800b990:	dd11      	ble.n	800b9b6 <__kernel_rem_pio2f+0x76>
 800b992:	a91c      	add	r1, sp, #112	@ 0x70
 800b994:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b998:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b99c:	f04f 0c00 	mov.w	ip, #0
 800b9a0:	45d4      	cmp	ip, sl
 800b9a2:	dc27      	bgt.n	800b9f4 <__kernel_rem_pio2f+0xb4>
 800b9a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b9a8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800bc44 <__kernel_rem_pio2f+0x304>
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	2400      	movs	r4, #0
 800b9b0:	e016      	b.n	800b9e0 <__kernel_rem_pio2f+0xa0>
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	e7db      	b.n	800b96e <__kernel_rem_pio2f+0x2e>
 800b9b6:	42c6      	cmn	r6, r0
 800b9b8:	bf5d      	ittte	pl
 800b9ba:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b9be:	ee07 1a90 	vmovpl	s15, r1
 800b9c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b9c6:	eef0 7a47 	vmovmi.f32	s15, s14
 800b9ca:	ece4 7a01 	vstmia	r4!, {s15}
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	e7dd      	b.n	800b98e <__kernel_rem_pio2f+0x4e>
 800b9d2:	ecfe 6a01 	vldmia	lr!, {s13}
 800b9d6:	ed96 7a00 	vldr	s14, [r6]
 800b9da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9de:	3401      	adds	r4, #1
 800b9e0:	455c      	cmp	r4, fp
 800b9e2:	f1a6 0604 	sub.w	r6, r6, #4
 800b9e6:	ddf4      	ble.n	800b9d2 <__kernel_rem_pio2f+0x92>
 800b9e8:	ece9 7a01 	vstmia	r9!, {s15}
 800b9ec:	f10c 0c01 	add.w	ip, ip, #1
 800b9f0:	3004      	adds	r0, #4
 800b9f2:	e7d5      	b.n	800b9a0 <__kernel_rem_pio2f+0x60>
 800b9f4:	a908      	add	r1, sp, #32
 800b9f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9fa:	9104      	str	r1, [sp, #16]
 800b9fc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b9fe:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800bc40 <__kernel_rem_pio2f+0x300>
 800ba02:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800bc3c <__kernel_rem_pio2f+0x2fc>
 800ba06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ba0a:	9203      	str	r2, [sp, #12]
 800ba0c:	4654      	mov	r4, sl
 800ba0e:	00a2      	lsls	r2, r4, #2
 800ba10:	9205      	str	r2, [sp, #20]
 800ba12:	aa58      	add	r2, sp, #352	@ 0x160
 800ba14:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ba18:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800ba1c:	a944      	add	r1, sp, #272	@ 0x110
 800ba1e:	aa08      	add	r2, sp, #32
 800ba20:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800ba24:	4694      	mov	ip, r2
 800ba26:	4626      	mov	r6, r4
 800ba28:	2e00      	cmp	r6, #0
 800ba2a:	f1a0 0004 	sub.w	r0, r0, #4
 800ba2e:	dc4c      	bgt.n	800baca <__kernel_rem_pio2f+0x18a>
 800ba30:	4628      	mov	r0, r5
 800ba32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ba36:	f000 fa75 	bl	800bf24 <scalbnf>
 800ba3a:	eeb0 8a40 	vmov.f32	s16, s0
 800ba3e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800ba42:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ba46:	f000 fb4f 	bl	800c0e8 <floorf>
 800ba4a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800ba4e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ba52:	2d00      	cmp	r5, #0
 800ba54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba58:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ba5c:	ee17 9a90 	vmov	r9, s15
 800ba60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba64:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ba68:	dd41      	ble.n	800baee <__kernel_rem_pio2f+0x1ae>
 800ba6a:	f104 3cff 	add.w	ip, r4, #4294967295
 800ba6e:	a908      	add	r1, sp, #32
 800ba70:	f1c5 0e08 	rsb	lr, r5, #8
 800ba74:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800ba78:	fa46 f00e 	asr.w	r0, r6, lr
 800ba7c:	4481      	add	r9, r0
 800ba7e:	fa00 f00e 	lsl.w	r0, r0, lr
 800ba82:	1a36      	subs	r6, r6, r0
 800ba84:	f1c5 0007 	rsb	r0, r5, #7
 800ba88:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800ba8c:	4106      	asrs	r6, r0
 800ba8e:	2e00      	cmp	r6, #0
 800ba90:	dd3c      	ble.n	800bb0c <__kernel_rem_pio2f+0x1cc>
 800ba92:	f04f 0e00 	mov.w	lr, #0
 800ba96:	f109 0901 	add.w	r9, r9, #1
 800ba9a:	4670      	mov	r0, lr
 800ba9c:	4574      	cmp	r4, lr
 800ba9e:	dc68      	bgt.n	800bb72 <__kernel_rem_pio2f+0x232>
 800baa0:	2d00      	cmp	r5, #0
 800baa2:	dd03      	ble.n	800baac <__kernel_rem_pio2f+0x16c>
 800baa4:	2d01      	cmp	r5, #1
 800baa6:	d074      	beq.n	800bb92 <__kernel_rem_pio2f+0x252>
 800baa8:	2d02      	cmp	r5, #2
 800baaa:	d07d      	beq.n	800bba8 <__kernel_rem_pio2f+0x268>
 800baac:	2e02      	cmp	r6, #2
 800baae:	d12d      	bne.n	800bb0c <__kernel_rem_pio2f+0x1cc>
 800bab0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bab4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bab8:	b340      	cbz	r0, 800bb0c <__kernel_rem_pio2f+0x1cc>
 800baba:	4628      	mov	r0, r5
 800babc:	9306      	str	r3, [sp, #24]
 800babe:	f000 fa31 	bl	800bf24 <scalbnf>
 800bac2:	9b06      	ldr	r3, [sp, #24]
 800bac4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bac8:	e020      	b.n	800bb0c <__kernel_rem_pio2f+0x1cc>
 800baca:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bace:	3e01      	subs	r6, #1
 800bad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bad8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800badc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bae0:	ecac 0a01 	vstmia	ip!, {s0}
 800bae4:	ed90 0a00 	vldr	s0, [r0]
 800bae8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800baec:	e79c      	b.n	800ba28 <__kernel_rem_pio2f+0xe8>
 800baee:	d105      	bne.n	800bafc <__kernel_rem_pio2f+0x1bc>
 800baf0:	1e60      	subs	r0, r4, #1
 800baf2:	a908      	add	r1, sp, #32
 800baf4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800baf8:	11f6      	asrs	r6, r6, #7
 800bafa:	e7c8      	b.n	800ba8e <__kernel_rem_pio2f+0x14e>
 800bafc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bb00:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb08:	da31      	bge.n	800bb6e <__kernel_rem_pio2f+0x22e>
 800bb0a:	2600      	movs	r6, #0
 800bb0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb14:	f040 8098 	bne.w	800bc48 <__kernel_rem_pio2f+0x308>
 800bb18:	1e60      	subs	r0, r4, #1
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	4550      	cmp	r0, sl
 800bb1e:	da4b      	bge.n	800bbb8 <__kernel_rem_pio2f+0x278>
 800bb20:	2a00      	cmp	r2, #0
 800bb22:	d065      	beq.n	800bbf0 <__kernel_rem_pio2f+0x2b0>
 800bb24:	3c01      	subs	r4, #1
 800bb26:	ab08      	add	r3, sp, #32
 800bb28:	3d08      	subs	r5, #8
 800bb2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d0f8      	beq.n	800bb24 <__kernel_rem_pio2f+0x1e4>
 800bb32:	4628      	mov	r0, r5
 800bb34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bb38:	f000 f9f4 	bl	800bf24 <scalbnf>
 800bb3c:	1c63      	adds	r3, r4, #1
 800bb3e:	aa44      	add	r2, sp, #272	@ 0x110
 800bb40:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bc40 <__kernel_rem_pio2f+0x300>
 800bb44:	0099      	lsls	r1, r3, #2
 800bb46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bb4a:	4623      	mov	r3, r4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f280 80a9 	bge.w	800bca4 <__kernel_rem_pio2f+0x364>
 800bb52:	4623      	mov	r3, r4
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f2c0 80c7 	blt.w	800bce8 <__kernel_rem_pio2f+0x3a8>
 800bb5a:	aa44      	add	r2, sp, #272	@ 0x110
 800bb5c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bb60:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800bc38 <__kernel_rem_pio2f+0x2f8>
 800bb64:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800bc44 <__kernel_rem_pio2f+0x304>
 800bb68:	2000      	movs	r0, #0
 800bb6a:	1ae2      	subs	r2, r4, r3
 800bb6c:	e0b1      	b.n	800bcd2 <__kernel_rem_pio2f+0x392>
 800bb6e:	2602      	movs	r6, #2
 800bb70:	e78f      	b.n	800ba92 <__kernel_rem_pio2f+0x152>
 800bb72:	f852 1b04 	ldr.w	r1, [r2], #4
 800bb76:	b948      	cbnz	r0, 800bb8c <__kernel_rem_pio2f+0x24c>
 800bb78:	b121      	cbz	r1, 800bb84 <__kernel_rem_pio2f+0x244>
 800bb7a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bb7e:	f842 1c04 	str.w	r1, [r2, #-4]
 800bb82:	2101      	movs	r1, #1
 800bb84:	f10e 0e01 	add.w	lr, lr, #1
 800bb88:	4608      	mov	r0, r1
 800bb8a:	e787      	b.n	800ba9c <__kernel_rem_pio2f+0x15c>
 800bb8c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bb90:	e7f5      	b.n	800bb7e <__kernel_rem_pio2f+0x23e>
 800bb92:	f104 3cff 	add.w	ip, r4, #4294967295
 800bb96:	aa08      	add	r2, sp, #32
 800bb98:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bb9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bba0:	a908      	add	r1, sp, #32
 800bba2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bba6:	e781      	b.n	800baac <__kernel_rem_pio2f+0x16c>
 800bba8:	f104 3cff 	add.w	ip, r4, #4294967295
 800bbac:	aa08      	add	r2, sp, #32
 800bbae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bbb2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bbb6:	e7f3      	b.n	800bba0 <__kernel_rem_pio2f+0x260>
 800bbb8:	a908      	add	r1, sp, #32
 800bbba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bbbe:	3801      	subs	r0, #1
 800bbc0:	430a      	orrs	r2, r1
 800bbc2:	e7ab      	b.n	800bb1c <__kernel_rem_pio2f+0x1dc>
 800bbc4:	3201      	adds	r2, #1
 800bbc6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bbca:	2e00      	cmp	r6, #0
 800bbcc:	d0fa      	beq.n	800bbc4 <__kernel_rem_pio2f+0x284>
 800bbce:	9905      	ldr	r1, [sp, #20]
 800bbd0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800bbd4:	eb0d 0001 	add.w	r0, sp, r1
 800bbd8:	18e6      	adds	r6, r4, r3
 800bbda:	a91c      	add	r1, sp, #112	@ 0x70
 800bbdc:	f104 0c01 	add.w	ip, r4, #1
 800bbe0:	384c      	subs	r0, #76	@ 0x4c
 800bbe2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800bbe6:	4422      	add	r2, r4
 800bbe8:	4562      	cmp	r2, ip
 800bbea:	da04      	bge.n	800bbf6 <__kernel_rem_pio2f+0x2b6>
 800bbec:	4614      	mov	r4, r2
 800bbee:	e70e      	b.n	800ba0e <__kernel_rem_pio2f+0xce>
 800bbf0:	9804      	ldr	r0, [sp, #16]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	e7e7      	b.n	800bbc6 <__kernel_rem_pio2f+0x286>
 800bbf6:	9903      	ldr	r1, [sp, #12]
 800bbf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bbfc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800bc00:	9105      	str	r1, [sp, #20]
 800bc02:	ee07 1a90 	vmov	s15, r1
 800bc06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc0a:	2400      	movs	r4, #0
 800bc0c:	ece6 7a01 	vstmia	r6!, {s15}
 800bc10:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800bc44 <__kernel_rem_pio2f+0x304>
 800bc14:	46b1      	mov	r9, r6
 800bc16:	455c      	cmp	r4, fp
 800bc18:	dd04      	ble.n	800bc24 <__kernel_rem_pio2f+0x2e4>
 800bc1a:	ece0 7a01 	vstmia	r0!, {s15}
 800bc1e:	f10c 0c01 	add.w	ip, ip, #1
 800bc22:	e7e1      	b.n	800bbe8 <__kernel_rem_pio2f+0x2a8>
 800bc24:	ecfe 6a01 	vldmia	lr!, {s13}
 800bc28:	ed39 7a01 	vldmdb	r9!, {s14}
 800bc2c:	3401      	adds	r4, #1
 800bc2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bc32:	e7f0      	b.n	800bc16 <__kernel_rem_pio2f+0x2d6>
 800bc34:	0800c7bc 	.word	0x0800c7bc
 800bc38:	0800c790 	.word	0x0800c790
 800bc3c:	43800000 	.word	0x43800000
 800bc40:	3b800000 	.word	0x3b800000
 800bc44:	00000000 	.word	0x00000000
 800bc48:	9b02      	ldr	r3, [sp, #8]
 800bc4a:	eeb0 0a48 	vmov.f32	s0, s16
 800bc4e:	eba3 0008 	sub.w	r0, r3, r8
 800bc52:	f000 f967 	bl	800bf24 <scalbnf>
 800bc56:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800bc3c <__kernel_rem_pio2f+0x2fc>
 800bc5a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc62:	db19      	blt.n	800bc98 <__kernel_rem_pio2f+0x358>
 800bc64:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800bc40 <__kernel_rem_pio2f+0x300>
 800bc68:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bc6c:	aa08      	add	r2, sp, #32
 800bc6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc72:	3508      	adds	r5, #8
 800bc74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bc7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc84:	ee10 3a10 	vmov	r3, s0
 800bc88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bc8c:	ee17 3a90 	vmov	r3, s15
 800bc90:	3401      	adds	r4, #1
 800bc92:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bc96:	e74c      	b.n	800bb32 <__kernel_rem_pio2f+0x1f2>
 800bc98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc9c:	aa08      	add	r2, sp, #32
 800bc9e:	ee10 3a10 	vmov	r3, s0
 800bca2:	e7f6      	b.n	800bc92 <__kernel_rem_pio2f+0x352>
 800bca4:	a808      	add	r0, sp, #32
 800bca6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bcaa:	9001      	str	r0, [sp, #4]
 800bcac:	ee07 0a90 	vmov	s15, r0
 800bcb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bcba:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bcbe:	ed62 7a01 	vstmdb	r2!, {s15}
 800bcc2:	e743      	b.n	800bb4c <__kernel_rem_pio2f+0x20c>
 800bcc4:	ecfc 6a01 	vldmia	ip!, {s13}
 800bcc8:	ecb5 7a01 	vldmia	r5!, {s14}
 800bccc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	4550      	cmp	r0, sl
 800bcd4:	dc01      	bgt.n	800bcda <__kernel_rem_pio2f+0x39a>
 800bcd6:	4282      	cmp	r2, r0
 800bcd8:	daf4      	bge.n	800bcc4 <__kernel_rem_pio2f+0x384>
 800bcda:	a858      	add	r0, sp, #352	@ 0x160
 800bcdc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bce0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800bce4:	3b01      	subs	r3, #1
 800bce6:	e735      	b.n	800bb54 <__kernel_rem_pio2f+0x214>
 800bce8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	dc09      	bgt.n	800bd02 <__kernel_rem_pio2f+0x3c2>
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	dc2b      	bgt.n	800bd4a <__kernel_rem_pio2f+0x40a>
 800bcf2:	d044      	beq.n	800bd7e <__kernel_rem_pio2f+0x43e>
 800bcf4:	f009 0007 	and.w	r0, r9, #7
 800bcf8:	b059      	add	sp, #356	@ 0x164
 800bcfa:	ecbd 8b04 	vpop	{d8-d9}
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bd04:	2b03      	cmp	r3, #3
 800bd06:	d1f5      	bne.n	800bcf4 <__kernel_rem_pio2f+0x3b4>
 800bd08:	aa30      	add	r2, sp, #192	@ 0xc0
 800bd0a:	1f0b      	subs	r3, r1, #4
 800bd0c:	4413      	add	r3, r2
 800bd0e:	461a      	mov	r2, r3
 800bd10:	4620      	mov	r0, r4
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f1a2 0204 	sub.w	r2, r2, #4
 800bd18:	dc52      	bgt.n	800bdc0 <__kernel_rem_pio2f+0x480>
 800bd1a:	4622      	mov	r2, r4
 800bd1c:	2a01      	cmp	r2, #1
 800bd1e:	f1a3 0304 	sub.w	r3, r3, #4
 800bd22:	dc5d      	bgt.n	800bde0 <__kernel_rem_pio2f+0x4a0>
 800bd24:	ab30      	add	r3, sp, #192	@ 0xc0
 800bd26:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800bc44 <__kernel_rem_pio2f+0x304>
 800bd2a:	440b      	add	r3, r1
 800bd2c:	2c01      	cmp	r4, #1
 800bd2e:	dc67      	bgt.n	800be00 <__kernel_rem_pio2f+0x4c0>
 800bd30:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bd34:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bd38:	2e00      	cmp	r6, #0
 800bd3a:	d167      	bne.n	800be0c <__kernel_rem_pio2f+0x4cc>
 800bd3c:	edc7 6a00 	vstr	s13, [r7]
 800bd40:	ed87 7a01 	vstr	s14, [r7, #4]
 800bd44:	edc7 7a02 	vstr	s15, [r7, #8]
 800bd48:	e7d4      	b.n	800bcf4 <__kernel_rem_pio2f+0x3b4>
 800bd4a:	ab30      	add	r3, sp, #192	@ 0xc0
 800bd4c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800bc44 <__kernel_rem_pio2f+0x304>
 800bd50:	440b      	add	r3, r1
 800bd52:	4622      	mov	r2, r4
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	da24      	bge.n	800bda2 <__kernel_rem_pio2f+0x462>
 800bd58:	b34e      	cbz	r6, 800bdae <__kernel_rem_pio2f+0x46e>
 800bd5a:	eef1 7a47 	vneg.f32	s15, s14
 800bd5e:	edc7 7a00 	vstr	s15, [r7]
 800bd62:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bd66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd6a:	aa31      	add	r2, sp, #196	@ 0xc4
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	429c      	cmp	r4, r3
 800bd70:	da20      	bge.n	800bdb4 <__kernel_rem_pio2f+0x474>
 800bd72:	b10e      	cbz	r6, 800bd78 <__kernel_rem_pio2f+0x438>
 800bd74:	eef1 7a67 	vneg.f32	s15, s15
 800bd78:	edc7 7a01 	vstr	s15, [r7, #4]
 800bd7c:	e7ba      	b.n	800bcf4 <__kernel_rem_pio2f+0x3b4>
 800bd7e:	ab30      	add	r3, sp, #192	@ 0xc0
 800bd80:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800bc44 <__kernel_rem_pio2f+0x304>
 800bd84:	440b      	add	r3, r1
 800bd86:	2c00      	cmp	r4, #0
 800bd88:	da05      	bge.n	800bd96 <__kernel_rem_pio2f+0x456>
 800bd8a:	b10e      	cbz	r6, 800bd90 <__kernel_rem_pio2f+0x450>
 800bd8c:	eef1 7a67 	vneg.f32	s15, s15
 800bd90:	edc7 7a00 	vstr	s15, [r7]
 800bd94:	e7ae      	b.n	800bcf4 <__kernel_rem_pio2f+0x3b4>
 800bd96:	ed33 7a01 	vldmdb	r3!, {s14}
 800bd9a:	3c01      	subs	r4, #1
 800bd9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bda0:	e7f1      	b.n	800bd86 <__kernel_rem_pio2f+0x446>
 800bda2:	ed73 7a01 	vldmdb	r3!, {s15}
 800bda6:	3a01      	subs	r2, #1
 800bda8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdac:	e7d2      	b.n	800bd54 <__kernel_rem_pio2f+0x414>
 800bdae:	eef0 7a47 	vmov.f32	s15, s14
 800bdb2:	e7d4      	b.n	800bd5e <__kernel_rem_pio2f+0x41e>
 800bdb4:	ecb2 7a01 	vldmia	r2!, {s14}
 800bdb8:	3301      	adds	r3, #1
 800bdba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdbe:	e7d6      	b.n	800bd6e <__kernel_rem_pio2f+0x42e>
 800bdc0:	edd2 7a00 	vldr	s15, [r2]
 800bdc4:	edd2 6a01 	vldr	s13, [r2, #4]
 800bdc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bdcc:	3801      	subs	r0, #1
 800bdce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdd2:	ed82 7a00 	vstr	s14, [r2]
 800bdd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdda:	edc2 7a01 	vstr	s15, [r2, #4]
 800bdde:	e798      	b.n	800bd12 <__kernel_rem_pio2f+0x3d2>
 800bde0:	edd3 7a00 	vldr	s15, [r3]
 800bde4:	edd3 6a01 	vldr	s13, [r3, #4]
 800bde8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bdec:	3a01      	subs	r2, #1
 800bdee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdf2:	ed83 7a00 	vstr	s14, [r3]
 800bdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdfa:	edc3 7a01 	vstr	s15, [r3, #4]
 800bdfe:	e78d      	b.n	800bd1c <__kernel_rem_pio2f+0x3dc>
 800be00:	ed33 7a01 	vldmdb	r3!, {s14}
 800be04:	3c01      	subs	r4, #1
 800be06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be0a:	e78f      	b.n	800bd2c <__kernel_rem_pio2f+0x3ec>
 800be0c:	eef1 6a66 	vneg.f32	s13, s13
 800be10:	eeb1 7a47 	vneg.f32	s14, s14
 800be14:	edc7 6a00 	vstr	s13, [r7]
 800be18:	ed87 7a01 	vstr	s14, [r7, #4]
 800be1c:	eef1 7a67 	vneg.f32	s15, s15
 800be20:	e790      	b.n	800bd44 <__kernel_rem_pio2f+0x404>
 800be22:	bf00      	nop
 800be24:	0000      	movs	r0, r0
	...

0800be28 <scalbn>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	ec55 4b10 	vmov	r4, r5, d0
 800be2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800be32:	4606      	mov	r6, r0
 800be34:	462b      	mov	r3, r5
 800be36:	b991      	cbnz	r1, 800be5e <scalbn+0x36>
 800be38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800be3c:	4323      	orrs	r3, r4
 800be3e:	d03d      	beq.n	800bebc <scalbn+0x94>
 800be40:	4b35      	ldr	r3, [pc, #212]	@ (800bf18 <scalbn+0xf0>)
 800be42:	4620      	mov	r0, r4
 800be44:	4629      	mov	r1, r5
 800be46:	2200      	movs	r2, #0
 800be48:	f7f4 f9e6 	bl	8000218 <__aeabi_dmul>
 800be4c:	4b33      	ldr	r3, [pc, #204]	@ (800bf1c <scalbn+0xf4>)
 800be4e:	429e      	cmp	r6, r3
 800be50:	4604      	mov	r4, r0
 800be52:	460d      	mov	r5, r1
 800be54:	da0f      	bge.n	800be76 <scalbn+0x4e>
 800be56:	a328      	add	r3, pc, #160	@ (adr r3, 800bef8 <scalbn+0xd0>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	e01e      	b.n	800be9c <scalbn+0x74>
 800be5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800be62:	4291      	cmp	r1, r2
 800be64:	d10b      	bne.n	800be7e <scalbn+0x56>
 800be66:	4622      	mov	r2, r4
 800be68:	4620      	mov	r0, r4
 800be6a:	4629      	mov	r1, r5
 800be6c:	f7f4 fb04 	bl	8000478 <__adddf3>
 800be70:	4604      	mov	r4, r0
 800be72:	460d      	mov	r5, r1
 800be74:	e022      	b.n	800bebc <scalbn+0x94>
 800be76:	460b      	mov	r3, r1
 800be78:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800be7c:	3936      	subs	r1, #54	@ 0x36
 800be7e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800be82:	4296      	cmp	r6, r2
 800be84:	dd0d      	ble.n	800bea2 <scalbn+0x7a>
 800be86:	2d00      	cmp	r5, #0
 800be88:	a11d      	add	r1, pc, #116	@ (adr r1, 800bf00 <scalbn+0xd8>)
 800be8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be8e:	da02      	bge.n	800be96 <scalbn+0x6e>
 800be90:	a11d      	add	r1, pc, #116	@ (adr r1, 800bf08 <scalbn+0xe0>)
 800be92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be96:	a31a      	add	r3, pc, #104	@ (adr r3, 800bf00 <scalbn+0xd8>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f7f4 f9bc 	bl	8000218 <__aeabi_dmul>
 800bea0:	e7e6      	b.n	800be70 <scalbn+0x48>
 800bea2:	1872      	adds	r2, r6, r1
 800bea4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bea8:	428a      	cmp	r2, r1
 800beaa:	dcec      	bgt.n	800be86 <scalbn+0x5e>
 800beac:	2a00      	cmp	r2, #0
 800beae:	dd08      	ble.n	800bec2 <scalbn+0x9a>
 800beb0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800beb4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800beb8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bebc:	ec45 4b10 	vmov	d0, r4, r5
 800bec0:	bd70      	pop	{r4, r5, r6, pc}
 800bec2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bec6:	da08      	bge.n	800beda <scalbn+0xb2>
 800bec8:	2d00      	cmp	r5, #0
 800beca:	a10b      	add	r1, pc, #44	@ (adr r1, 800bef8 <scalbn+0xd0>)
 800becc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bed0:	dac1      	bge.n	800be56 <scalbn+0x2e>
 800bed2:	a10f      	add	r1, pc, #60	@ (adr r1, 800bf10 <scalbn+0xe8>)
 800bed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bed8:	e7bd      	b.n	800be56 <scalbn+0x2e>
 800beda:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bede:	3236      	adds	r2, #54	@ 0x36
 800bee0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bee8:	4620      	mov	r0, r4
 800beea:	4b0d      	ldr	r3, [pc, #52]	@ (800bf20 <scalbn+0xf8>)
 800beec:	4629      	mov	r1, r5
 800beee:	2200      	movs	r2, #0
 800bef0:	e7d4      	b.n	800be9c <scalbn+0x74>
 800bef2:	bf00      	nop
 800bef4:	f3af 8000 	nop.w
 800bef8:	c2f8f359 	.word	0xc2f8f359
 800befc:	01a56e1f 	.word	0x01a56e1f
 800bf00:	8800759c 	.word	0x8800759c
 800bf04:	7e37e43c 	.word	0x7e37e43c
 800bf08:	8800759c 	.word	0x8800759c
 800bf0c:	fe37e43c 	.word	0xfe37e43c
 800bf10:	c2f8f359 	.word	0xc2f8f359
 800bf14:	81a56e1f 	.word	0x81a56e1f
 800bf18:	43500000 	.word	0x43500000
 800bf1c:	ffff3cb0 	.word	0xffff3cb0
 800bf20:	3c900000 	.word	0x3c900000

0800bf24 <scalbnf>:
 800bf24:	ee10 3a10 	vmov	r3, s0
 800bf28:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bf2c:	d02b      	beq.n	800bf86 <scalbnf+0x62>
 800bf2e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bf32:	d302      	bcc.n	800bf3a <scalbnf+0x16>
 800bf34:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bf38:	4770      	bx	lr
 800bf3a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bf3e:	d123      	bne.n	800bf88 <scalbnf+0x64>
 800bf40:	4b24      	ldr	r3, [pc, #144]	@ (800bfd4 <scalbnf+0xb0>)
 800bf42:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bfd8 <scalbnf+0xb4>
 800bf46:	4298      	cmp	r0, r3
 800bf48:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bf4c:	db17      	blt.n	800bf7e <scalbnf+0x5a>
 800bf4e:	ee10 3a10 	vmov	r3, s0
 800bf52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bf56:	3a19      	subs	r2, #25
 800bf58:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bf5c:	4288      	cmp	r0, r1
 800bf5e:	dd15      	ble.n	800bf8c <scalbnf+0x68>
 800bf60:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bfdc <scalbnf+0xb8>
 800bf64:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bfe0 <scalbnf+0xbc>
 800bf68:	ee10 3a10 	vmov	r3, s0
 800bf6c:	eeb0 7a67 	vmov.f32	s14, s15
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	bfb8      	it	lt
 800bf74:	eef0 7a66 	vmovlt.f32	s15, s13
 800bf78:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bf7c:	4770      	bx	lr
 800bf7e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bfe4 <scalbnf+0xc0>
 800bf82:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf86:	4770      	bx	lr
 800bf88:	0dd2      	lsrs	r2, r2, #23
 800bf8a:	e7e5      	b.n	800bf58 <scalbnf+0x34>
 800bf8c:	4410      	add	r0, r2
 800bf8e:	28fe      	cmp	r0, #254	@ 0xfe
 800bf90:	dce6      	bgt.n	800bf60 <scalbnf+0x3c>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	dd06      	ble.n	800bfa4 <scalbnf+0x80>
 800bf96:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bf9a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bf9e:	ee00 3a10 	vmov	s0, r3
 800bfa2:	4770      	bx	lr
 800bfa4:	f110 0f16 	cmn.w	r0, #22
 800bfa8:	da09      	bge.n	800bfbe <scalbnf+0x9a>
 800bfaa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bfe4 <scalbnf+0xc0>
 800bfae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bfe8 <scalbnf+0xc4>
 800bfb2:	ee10 3a10 	vmov	r3, s0
 800bfb6:	eeb0 7a67 	vmov.f32	s14, s15
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	e7d9      	b.n	800bf72 <scalbnf+0x4e>
 800bfbe:	3019      	adds	r0, #25
 800bfc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bfc4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bfc8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bfec <scalbnf+0xc8>
 800bfcc:	ee07 3a90 	vmov	s15, r3
 800bfd0:	e7d7      	b.n	800bf82 <scalbnf+0x5e>
 800bfd2:	bf00      	nop
 800bfd4:	ffff3cb0 	.word	0xffff3cb0
 800bfd8:	4c000000 	.word	0x4c000000
 800bfdc:	7149f2ca 	.word	0x7149f2ca
 800bfe0:	f149f2ca 	.word	0xf149f2ca
 800bfe4:	0da24260 	.word	0x0da24260
 800bfe8:	8da24260 	.word	0x8da24260
 800bfec:	33000000 	.word	0x33000000

0800bff0 <floor>:
 800bff0:	ec51 0b10 	vmov	r0, r1, d0
 800bff4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bffc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c000:	2e13      	cmp	r6, #19
 800c002:	460c      	mov	r4, r1
 800c004:	4605      	mov	r5, r0
 800c006:	4680      	mov	r8, r0
 800c008:	dc34      	bgt.n	800c074 <floor+0x84>
 800c00a:	2e00      	cmp	r6, #0
 800c00c:	da17      	bge.n	800c03e <floor+0x4e>
 800c00e:	a332      	add	r3, pc, #200	@ (adr r3, 800c0d8 <floor+0xe8>)
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	f7f4 fa30 	bl	8000478 <__adddf3>
 800c018:	2200      	movs	r2, #0
 800c01a:	2300      	movs	r3, #0
 800c01c:	f7f4 fc60 	bl	80008e0 <__aeabi_dcmpgt>
 800c020:	b150      	cbz	r0, 800c038 <floor+0x48>
 800c022:	2c00      	cmp	r4, #0
 800c024:	da55      	bge.n	800c0d2 <floor+0xe2>
 800c026:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c02a:	432c      	orrs	r4, r5
 800c02c:	2500      	movs	r5, #0
 800c02e:	42ac      	cmp	r4, r5
 800c030:	4c2b      	ldr	r4, [pc, #172]	@ (800c0e0 <floor+0xf0>)
 800c032:	bf08      	it	eq
 800c034:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c038:	4621      	mov	r1, r4
 800c03a:	4628      	mov	r0, r5
 800c03c:	e023      	b.n	800c086 <floor+0x96>
 800c03e:	4f29      	ldr	r7, [pc, #164]	@ (800c0e4 <floor+0xf4>)
 800c040:	4137      	asrs	r7, r6
 800c042:	ea01 0307 	and.w	r3, r1, r7
 800c046:	4303      	orrs	r3, r0
 800c048:	d01d      	beq.n	800c086 <floor+0x96>
 800c04a:	a323      	add	r3, pc, #140	@ (adr r3, 800c0d8 <floor+0xe8>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	f7f4 fa12 	bl	8000478 <__adddf3>
 800c054:	2200      	movs	r2, #0
 800c056:	2300      	movs	r3, #0
 800c058:	f7f4 fc42 	bl	80008e0 <__aeabi_dcmpgt>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d0eb      	beq.n	800c038 <floor+0x48>
 800c060:	2c00      	cmp	r4, #0
 800c062:	bfbe      	ittt	lt
 800c064:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c068:	4133      	asrlt	r3, r6
 800c06a:	18e4      	addlt	r4, r4, r3
 800c06c:	ea24 0407 	bic.w	r4, r4, r7
 800c070:	2500      	movs	r5, #0
 800c072:	e7e1      	b.n	800c038 <floor+0x48>
 800c074:	2e33      	cmp	r6, #51	@ 0x33
 800c076:	dd0a      	ble.n	800c08e <floor+0x9e>
 800c078:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c07c:	d103      	bne.n	800c086 <floor+0x96>
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	f7f4 f9f9 	bl	8000478 <__adddf3>
 800c086:	ec41 0b10 	vmov	d0, r0, r1
 800c08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c08e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c092:	f04f 37ff 	mov.w	r7, #4294967295
 800c096:	40df      	lsrs	r7, r3
 800c098:	4207      	tst	r7, r0
 800c09a:	d0f4      	beq.n	800c086 <floor+0x96>
 800c09c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c0d8 <floor+0xe8>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f7f4 f9e9 	bl	8000478 <__adddf3>
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	f7f4 fc19 	bl	80008e0 <__aeabi_dcmpgt>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d0c2      	beq.n	800c038 <floor+0x48>
 800c0b2:	2c00      	cmp	r4, #0
 800c0b4:	da0a      	bge.n	800c0cc <floor+0xdc>
 800c0b6:	2e14      	cmp	r6, #20
 800c0b8:	d101      	bne.n	800c0be <floor+0xce>
 800c0ba:	3401      	adds	r4, #1
 800c0bc:	e006      	b.n	800c0cc <floor+0xdc>
 800c0be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	40b3      	lsls	r3, r6
 800c0c6:	441d      	add	r5, r3
 800c0c8:	4545      	cmp	r5, r8
 800c0ca:	d3f6      	bcc.n	800c0ba <floor+0xca>
 800c0cc:	ea25 0507 	bic.w	r5, r5, r7
 800c0d0:	e7b2      	b.n	800c038 <floor+0x48>
 800c0d2:	2500      	movs	r5, #0
 800c0d4:	462c      	mov	r4, r5
 800c0d6:	e7af      	b.n	800c038 <floor+0x48>
 800c0d8:	8800759c 	.word	0x8800759c
 800c0dc:	7e37e43c 	.word	0x7e37e43c
 800c0e0:	bff00000 	.word	0xbff00000
 800c0e4:	000fffff 	.word	0x000fffff

0800c0e8 <floorf>:
 800c0e8:	ee10 3a10 	vmov	r3, s0
 800c0ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c0f0:	3a7f      	subs	r2, #127	@ 0x7f
 800c0f2:	2a16      	cmp	r2, #22
 800c0f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c0f8:	dc2b      	bgt.n	800c152 <floorf+0x6a>
 800c0fa:	2a00      	cmp	r2, #0
 800c0fc:	da12      	bge.n	800c124 <floorf+0x3c>
 800c0fe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c164 <floorf+0x7c>
 800c102:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c106:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10e:	dd06      	ble.n	800c11e <floorf+0x36>
 800c110:	2b00      	cmp	r3, #0
 800c112:	da24      	bge.n	800c15e <floorf+0x76>
 800c114:	2900      	cmp	r1, #0
 800c116:	4b14      	ldr	r3, [pc, #80]	@ (800c168 <floorf+0x80>)
 800c118:	bf08      	it	eq
 800c11a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c11e:	ee00 3a10 	vmov	s0, r3
 800c122:	4770      	bx	lr
 800c124:	4911      	ldr	r1, [pc, #68]	@ (800c16c <floorf+0x84>)
 800c126:	4111      	asrs	r1, r2
 800c128:	420b      	tst	r3, r1
 800c12a:	d0fa      	beq.n	800c122 <floorf+0x3a>
 800c12c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c164 <floorf+0x7c>
 800c130:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c134:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13c:	ddef      	ble.n	800c11e <floorf+0x36>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	bfbe      	ittt	lt
 800c142:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c146:	fa40 f202 	asrlt.w	r2, r0, r2
 800c14a:	189b      	addlt	r3, r3, r2
 800c14c:	ea23 0301 	bic.w	r3, r3, r1
 800c150:	e7e5      	b.n	800c11e <floorf+0x36>
 800c152:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c156:	d3e4      	bcc.n	800c122 <floorf+0x3a>
 800c158:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c15c:	4770      	bx	lr
 800c15e:	2300      	movs	r3, #0
 800c160:	e7dd      	b.n	800c11e <floorf+0x36>
 800c162:	bf00      	nop
 800c164:	7149f2ca 	.word	0x7149f2ca
 800c168:	bf800000 	.word	0xbf800000
 800c16c:	007fffff 	.word	0x007fffff

0800c170 <_init>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	bf00      	nop
 800c174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c176:	bc08      	pop	{r3}
 800c178:	469e      	mov	lr, r3
 800c17a:	4770      	bx	lr

0800c17c <_fini>:
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17e:	bf00      	nop
 800c180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c182:	bc08      	pop	{r3}
 800c184:	469e      	mov	lr, r3
 800c186:	4770      	bx	lr
