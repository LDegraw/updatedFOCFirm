
updatedFOCFirm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdd0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800bfa8  0800bfa8  0000cfa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5e8  0800c5e8  0000e0a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5e8  0800c5e8  0000d5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5f0  0800c5f0  0000e0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5f0  0800c5f0  0000d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5f4  0800c5f4  0000d5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  0800c5f8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b7c  200000a8  0800c6a0  0000e0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  0800c6a0  0000ec24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da76  00000000  00000000  0000e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c3  00000000  00000000  0002bb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  0002f018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142c  00000000  00000000  000309e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021add  00000000  00000000  00031e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdd3  00000000  00000000  000538f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5711  00000000  00000000  000706c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155dd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078ec  00000000  00000000  00155e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0015d704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a8 	.word	0x200000a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bf90 	.word	0x0800bf90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ac 	.word	0x200000ac
 8000214:	0800bf90 	.word	0x0800bf90

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2uiz>:
 8000944:	004a      	lsls	r2, r1, #1
 8000946:	d211      	bcs.n	800096c <__aeabi_d2uiz+0x28>
 8000948:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800094c:	d211      	bcs.n	8000972 <__aeabi_d2uiz+0x2e>
 800094e:	d50d      	bpl.n	800096c <__aeabi_d2uiz+0x28>
 8000950:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000958:	d40e      	bmi.n	8000978 <__aeabi_d2uiz+0x34>
 800095a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000966:	fa23 f002 	lsr.w	r0, r3, r2
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000976:	d102      	bne.n	800097e <__aeabi_d2uiz+0x3a>
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	4770      	bx	lr
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	4770      	bx	lr

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b96a 	b.w	8000d10 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9d08      	ldr	r5, [sp, #32]
 8000a5a:	460c      	mov	r4, r1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d14e      	bne.n	8000afe <__udivmoddi4+0xaa>
 8000a60:	4694      	mov	ip, r2
 8000a62:	458c      	cmp	ip, r1
 8000a64:	4686      	mov	lr, r0
 8000a66:	fab2 f282 	clz	r2, r2
 8000a6a:	d962      	bls.n	8000b32 <__udivmoddi4+0xde>
 8000a6c:	b14a      	cbz	r2, 8000a82 <__udivmoddi4+0x2e>
 8000a6e:	f1c2 0320 	rsb	r3, r2, #32
 8000a72:	4091      	lsls	r1, r2
 8000a74:	fa20 f303 	lsr.w	r3, r0, r3
 8000a78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7c:	4319      	orrs	r1, r3
 8000a7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a86:	fa1f f68c 	uxth.w	r6, ip
 8000a8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a92:	fb07 1114 	mls	r1, r7, r4, r1
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb04 f106 	mul.w	r1, r4, r6
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x64>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aaa:	f080 8112 	bcs.w	8000cd2 <__udivmoddi4+0x27e>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 810f 	bls.w	8000cd2 <__udivmoddi4+0x27e>
 8000ab4:	3c02      	subs	r4, #2
 8000ab6:	4463      	add	r3, ip
 8000ab8:	1a59      	subs	r1, r3, r1
 8000aba:	fa1f f38e 	uxth.w	r3, lr
 8000abe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb00 f606 	mul.w	r6, r0, r6
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x94>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ada:	f080 80fc 	bcs.w	8000cd6 <__udivmoddi4+0x282>
 8000ade:	429e      	cmp	r6, r3
 8000ae0:	f240 80f9 	bls.w	8000cd6 <__udivmoddi4+0x282>
 8000ae4:	4463      	add	r3, ip
 8000ae6:	3802      	subs	r0, #2
 8000ae8:	1b9b      	subs	r3, r3, r6
 8000aea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aee:	2100      	movs	r1, #0
 8000af0:	b11d      	cbz	r5, 8000afa <__udivmoddi4+0xa6>
 8000af2:	40d3      	lsrs	r3, r2
 8000af4:	2200      	movs	r2, #0
 8000af6:	e9c5 3200 	strd	r3, r2, [r5]
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d905      	bls.n	8000b0e <__udivmoddi4+0xba>
 8000b02:	b10d      	cbz	r5, 8000b08 <__udivmoddi4+0xb4>
 8000b04:	e9c5 0100 	strd	r0, r1, [r5]
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	e7f5      	b.n	8000afa <__udivmoddi4+0xa6>
 8000b0e:	fab3 f183 	clz	r1, r3
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d146      	bne.n	8000ba4 <__udivmoddi4+0x150>
 8000b16:	42a3      	cmp	r3, r4
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xcc>
 8000b1a:	4290      	cmp	r0, r2
 8000b1c:	f0c0 80f0 	bcc.w	8000d00 <__udivmoddi4+0x2ac>
 8000b20:	1a86      	subs	r6, r0, r2
 8000b22:	eb64 0303 	sbc.w	r3, r4, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d0e6      	beq.n	8000afa <__udivmoddi4+0xa6>
 8000b2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b30:	e7e3      	b.n	8000afa <__udivmoddi4+0xa6>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	f040 8090 	bne.w	8000c58 <__udivmoddi4+0x204>
 8000b38:	eba1 040c 	sub.w	r4, r1, ip
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	fa1f f78c 	uxth.w	r7, ip
 8000b44:	2101      	movs	r1, #1
 8000b46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b56:	fb07 f006 	mul.w	r0, r7, r6
 8000b5a:	4298      	cmp	r0, r3
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x11c>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x11a>
 8000b68:	4298      	cmp	r0, r3
 8000b6a:	f200 80cd 	bhi.w	8000d08 <__udivmoddi4+0x2b4>
 8000b6e:	4626      	mov	r6, r4
 8000b70:	1a1c      	subs	r4, r3, r0
 8000b72:	fa1f f38e 	uxth.w	r3, lr
 8000b76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b82:	fb00 f707 	mul.w	r7, r0, r7
 8000b86:	429f      	cmp	r7, r3
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x148>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b92:	d202      	bcs.n	8000b9a <__udivmoddi4+0x146>
 8000b94:	429f      	cmp	r7, r3
 8000b96:	f200 80b0 	bhi.w	8000cfa <__udivmoddi4+0x2a6>
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	1bdb      	subs	r3, r3, r7
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	e7a5      	b.n	8000af0 <__udivmoddi4+0x9c>
 8000ba4:	f1c1 0620 	rsb	r6, r1, #32
 8000ba8:	408b      	lsls	r3, r1
 8000baa:	fa22 f706 	lsr.w	r7, r2, r6
 8000bae:	431f      	orrs	r7, r3
 8000bb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bb8:	ea43 030c 	orr.w	r3, r3, ip
 8000bbc:	40f4      	lsrs	r4, r6
 8000bbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000bc2:	0c38      	lsrs	r0, r7, #16
 8000bc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bcc:	fa1f fc87 	uxth.w	ip, r7
 8000bd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bdc:	45a1      	cmp	r9, r4
 8000bde:	fa02 f201 	lsl.w	r2, r2, r1
 8000be2:	d90a      	bls.n	8000bfa <__udivmoddi4+0x1a6>
 8000be4:	193c      	adds	r4, r7, r4
 8000be6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bea:	f080 8084 	bcs.w	8000cf6 <__udivmoddi4+0x2a2>
 8000bee:	45a1      	cmp	r9, r4
 8000bf0:	f240 8081 	bls.w	8000cf6 <__udivmoddi4+0x2a2>
 8000bf4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bf8:	443c      	add	r4, r7
 8000bfa:	eba4 0409 	sub.w	r4, r4, r9
 8000bfe:	fa1f f983 	uxth.w	r9, r3
 8000c02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c06:	fb00 4413 	mls	r4, r0, r3, r4
 8000c0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c12:	45a4      	cmp	ip, r4
 8000c14:	d907      	bls.n	8000c26 <__udivmoddi4+0x1d2>
 8000c16:	193c      	adds	r4, r7, r4
 8000c18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c1c:	d267      	bcs.n	8000cee <__udivmoddi4+0x29a>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0x29a>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	443c      	add	r4, r7
 8000c26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c2e:	eba4 040c 	sub.w	r4, r4, ip
 8000c32:	429c      	cmp	r4, r3
 8000c34:	46ce      	mov	lr, r9
 8000c36:	469c      	mov	ip, r3
 8000c38:	d351      	bcc.n	8000cde <__udivmoddi4+0x28a>
 8000c3a:	d04e      	beq.n	8000cda <__udivmoddi4+0x286>
 8000c3c:	b155      	cbz	r5, 8000c54 <__udivmoddi4+0x200>
 8000c3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c42:	eb64 040c 	sbc.w	r4, r4, ip
 8000c46:	fa04 f606 	lsl.w	r6, r4, r6
 8000c4a:	40cb      	lsrs	r3, r1
 8000c4c:	431e      	orrs	r6, r3
 8000c4e:	40cc      	lsrs	r4, r1
 8000c50:	e9c5 6400 	strd	r6, r4, [r5]
 8000c54:	2100      	movs	r1, #0
 8000c56:	e750      	b.n	8000afa <__udivmoddi4+0xa6>
 8000c58:	f1c2 0320 	rsb	r3, r2, #32
 8000c5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	fa24 f303 	lsr.w	r3, r4, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	430c      	orrs	r4, r1
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c80:	0c23      	lsrs	r3, r4, #16
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb00 f107 	mul.w	r1, r0, r7
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x24c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c96:	d22c      	bcs.n	8000cf2 <__udivmoddi4+0x29e>
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d92a      	bls.n	8000cf2 <__udivmoddi4+0x29e>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ca8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb01 f307 	mul.w	r3, r1, r7
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x276>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cc0:	d213      	bcs.n	8000cea <__udivmoddi4+0x296>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d911      	bls.n	8000cea <__udivmoddi4+0x296>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4464      	add	r4, ip
 8000cca:	1ae4      	subs	r4, r4, r3
 8000ccc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cd0:	e739      	b.n	8000b46 <__udivmoddi4+0xf2>
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	e6f0      	b.n	8000ab8 <__udivmoddi4+0x64>
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e706      	b.n	8000ae8 <__udivmoddi4+0x94>
 8000cda:	45c8      	cmp	r8, r9
 8000cdc:	d2ae      	bcs.n	8000c3c <__udivmoddi4+0x1e8>
 8000cde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ce2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ce6:	3801      	subs	r0, #1
 8000ce8:	e7a8      	b.n	8000c3c <__udivmoddi4+0x1e8>
 8000cea:	4631      	mov	r1, r6
 8000cec:	e7ed      	b.n	8000cca <__udivmoddi4+0x276>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e799      	b.n	8000c26 <__udivmoddi4+0x1d2>
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	e7d4      	b.n	8000ca0 <__udivmoddi4+0x24c>
 8000cf6:	46d6      	mov	lr, sl
 8000cf8:	e77f      	b.n	8000bfa <__udivmoddi4+0x1a6>
 8000cfa:	4463      	add	r3, ip
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	e74d      	b.n	8000b9c <__udivmoddi4+0x148>
 8000d00:	4606      	mov	r6, r0
 8000d02:	4623      	mov	r3, r4
 8000d04:	4608      	mov	r0, r1
 8000d06:	e70f      	b.n	8000b28 <__udivmoddi4+0xd4>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	e730      	b.n	8000b70 <__udivmoddi4+0x11c>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <_DoInit+0xa0>)
 8000d1c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000d1e:	22a8      	movs	r2, #168	@ 0xa8
 8000d20:	2100      	movs	r1, #0
 8000d22:	6838      	ldr	r0, [r7, #0]
 8000d24:	f009 f910 	bl	8009f48 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2203      	movs	r2, #3
 8000d32:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	4a20      	ldr	r2, [pc, #128]	@ (8000db8 <_DoInit+0xa4>)
 8000d38:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dbc <_DoInit+0xa8>)
 8000d3e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d46:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4a16      	ldr	r2, [pc, #88]	@ (8000db8 <_DoInit+0xa4>)
 8000d5e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <_DoInit+0xac>)
 8000d64:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2210      	movs	r2, #16
 8000d6a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000d7e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	e00c      	b.n	8000da2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f1c3 030f 	rsb	r3, r3, #15
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <_DoInit+0xb0>)
 8000d90:	5cd1      	ldrb	r1, [r2, r3]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	460a      	mov	r2, r1
 8000d9a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d9ef      	bls.n	8000d88 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000da8:	f3bf 8f5f 	dmb	sy
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200000c4 	.word	0x200000c4
 8000db8:	0800bfa8 	.word	0x0800bfa8
 8000dbc:	2000016c 	.word	0x2000016c
 8000dc0:	2000056c 	.word	0x2000056c
 8000dc4:	0800bfb4 	.word	0x0800bfb4

08000dc8 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  _DoInit();
 8000dcc:	f7ff ffa2 	bl	8000d14 <_DoInit>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_EXTI_Callback>:
void readAccel(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
	int timeSteps;
	timeSteps = __HAL_TIM_GET_COUNTER(&htim17);
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de4:	60fb      	str	r3, [r7, #12]
	float refClock = TIMCLOCK/(PRESCALAR);
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <HAL_GPIO_EXTI_Callback+0x60>)
 8000de8:	60bb      	str	r3, [r7, #8]
	motor.speed = (60.0f)/((float)timeSteps/refClock);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000dfc:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000e38 <HAL_GPIO_EXTI_Callback+0x64>
 8000e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e06:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
	motor.hallCount = timeSteps;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e16:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
	readHalls(&motor);
 8000e1a:	4808      	ldr	r0, [pc, #32]	@ (8000e3c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e1c:	f000 ffea 	bl	8001df4 <readHalls>
	htim17.Instance->CNT = 0;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200008d0 	.word	0x200008d0
 8000e34:	48f42400 	.word	0x48f42400
 8000e38:	42700000 	.word	0x42700000
 8000e3c:	200009b0 	.word	0x200009b0

08000e40 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if(htim == &htim17){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d112      	bne.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x36>
		motor.speed = 0;
 8000e50:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor.avg_speed = 0;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor.hallspeed = 0;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		htim17.Instance->CNT = 0;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	if(htim == &htim16){
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d103      	bne.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x46>

		//MOTOR_FOCtask(&motor);
		//MOTOR_task(&motor);
		htim->Instance->CNT = 0;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	if(htim == &htim7){
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d107      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x5e>
		motor.torqueLevel = 15.0f;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e90:	220f      	movs	r2, #15
 8000e92:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

		htim->Instance->CNT = 0;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200008d0 	.word	0x200008d0
 8000eb0:	200009b0 	.word	0x200009b0
 8000eb4:	20000884 	.word	0x20000884
 8000eb8:	20000838 	.word	0x20000838

08000ebc <accWrite>:
        }

        output[i] = y0;
    }
}
void accWrite(uint8_t add, uint8_t *data){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
	//read
	uint8_t buff;
	//write
	buff = add & 0b01111111;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 0); // setting CS LOW
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <accWrite+0x58>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f14 <accWrite+0x58>)
 8000ed8:	8891      	ldrh	r1, [r2, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 ff13 	bl	8005d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &buff, 1, 100);
 8000ee2:	f107 010f 	add.w	r1, r7, #15
 8000ee6:	2364      	movs	r3, #100	@ 0x64
 8000ee8:	2201      	movs	r2, #1
 8000eea:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <accWrite+0x5c>)
 8000eec:	f005 ffb9 	bl	8006e62 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, 1, 100);
 8000ef0:	2364      	movs	r3, #100	@ 0x64
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <accWrite+0x5c>)
 8000ef8:	f005 ffb3 	bl	8006e62 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 1);// setting CS HIGH
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <accWrite+0x58>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <accWrite+0x58>)
 8000f02:	8891      	ldrh	r1, [r2, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 fefe 	bl	8005d08 <HAL_GPIO_WritePin>
	return;
 8000f0c:	bf00      	nop
}
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000018 	.word	0x20000018
 8000f18:	200006d8 	.word	0x200006d8

08000f1c <accRead>:
void accRead(uint8_t add, uint8_t* data){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
	uint8_t buff;
	buff = add | 0x80;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 0); // setting CS LOW
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <accRead+0x58>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a0f      	ldr	r2, [pc, #60]	@ (8000f74 <accRead+0x58>)
 8000f38:	8891      	ldrh	r1, [r2, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fee3 	bl	8005d08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &buff, 1, 100);
 8000f42:	f107 010f 	add.w	r1, r7, #15
 8000f46:	2364      	movs	r3, #100	@ 0x64
 8000f48:	2201      	movs	r2, #1
 8000f4a:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <accRead+0x5c>)
 8000f4c:	f005 ff89 	bl	8006e62 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, 1, 100);
 8000f50:	2364      	movs	r3, #100	@ 0x64
 8000f52:	2201      	movs	r2, #1
 8000f54:	6839      	ldr	r1, [r7, #0]
 8000f56:	4808      	ldr	r0, [pc, #32]	@ (8000f78 <accRead+0x5c>)
 8000f58:	f006 f8f8 	bl	800714c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 1);// setting CS HIGH
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <accRead+0x58>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <accRead+0x58>)
 8000f62:	8891      	ldrh	r1, [r2, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 fece 	bl	8005d08 <HAL_GPIO_WritePin>
	return;
 8000f6c:	bf00      	nop
}
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000018 	.word	0x20000018
 8000f78:	200006d8 	.word	0x200006d8
 8000f7c:	00000000 	.word	0x00000000

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	ed2d 8b02 	vpush	{d8}
 8000f86:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f002 fc07 	bl	800379e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 fa3e 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f000 fe78 	bl	8001c88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f98:	f000 fe4c 	bl	8001c34 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f9c:	f000 fa84 	bl	80014a8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000fa0:	f000 fbba 	bl	8001718 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000fa4:	f000 fc34 	bl	8001810 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fa8:	f000 fd06 	bl	80019b8 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000fac:	f000 fdce 	bl	8001b4c <MX_TIM17_Init>
  MX_TIM16_Init();
 8000fb0:	f000 fda6 	bl	8001b00 <MX_TIM16_Init>
  MX_TIM7_Init();
 8000fb4:	f000 fd6e 	bl	8001a94 <MX_TIM7_Init>
  MX_ADC2_Init();
 8000fb8:	f000 fb10 	bl	80015dc <MX_ADC2_Init>
  MX_COMP2_Init();
 8000fbc:	f000 fb84 	bl	80016c8 <MX_COMP2_Init>
  MX_SPI3_Init();
 8000fc0:	f000 fbe8 	bl	8001794 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000fc4:	f000 fdea 	bl	8001b9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  acc.IO.BusType = 4;
 8000fc8:	4b79      	ldr	r3, [pc, #484]	@ (80011b0 <main+0x230>)
 8000fca:	2204      	movs	r2, #4
 8000fcc:	609a      	str	r2, [r3, #8]
  acc.IO.Address = address;
 8000fce:	4b79      	ldr	r3, [pc, #484]	@ (80011b4 <main+0x234>)
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	4b77      	ldr	r3, [pc, #476]	@ (80011b0 <main+0x230>)
 8000fd4:	731a      	strb	r2, [r3, #12]
  acc.IO.WriteReg = &accWrite;
 8000fd6:	4b76      	ldr	r3, [pc, #472]	@ (80011b0 <main+0x230>)
 8000fd8:	4a77      	ldr	r2, [pc, #476]	@ (80011b8 <main+0x238>)
 8000fda:	611a      	str	r2, [r3, #16]
  acc.IO.ReadReg = &accRead;
 8000fdc:	4b74      	ldr	r3, [pc, #464]	@ (80011b0 <main+0x230>)
 8000fde:	4a77      	ldr	r2, [pc, #476]	@ (80011bc <main+0x23c>)
 8000fe0:	615a      	str	r2, [r3, #20]

  // set up motor struct
  motor.pwm = &htim1;
 8000fe2:	4b77      	ldr	r3, [pc, #476]	@ (80011c0 <main+0x240>)
 8000fe4:	4a77      	ldr	r2, [pc, #476]	@ (80011c4 <main+0x244>)
 8000fe6:	601a      	str	r2, [r3, #0]
  motor.adc = &hadc1;
 8000fe8:	4b75      	ldr	r3, [pc, #468]	@ (80011c0 <main+0x240>)
 8000fea:	4a77      	ldr	r2, [pc, #476]	@ (80011c8 <main+0x248>)
 8000fec:	63da      	str	r2, [r3, #60]	@ 0x3c
  motor.encoder = &hspi1;
 8000fee:	4b74      	ldr	r3, [pc, #464]	@ (80011c0 <main+0x240>)
 8000ff0:	4a76      	ldr	r2, [pc, #472]	@ (80011cc <main+0x24c>)
 8000ff2:	649a      	str	r2, [r3, #72]	@ 0x48
  // Enable pins
  motor.torqueLevel = 50.0f;
 8000ff4:	4b72      	ldr	r3, [pc, #456]	@ (80011c0 <main+0x240>)
 8000ff6:	2232      	movs	r2, #50	@ 0x32
 8000ff8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  motor.enablePins[0] = ena;
 8000ffc:	4b70      	ldr	r3, [pc, #448]	@ (80011c0 <main+0x240>)
 8000ffe:	4a74      	ldr	r2, [pc, #464]	@ (80011d0 <main+0x250>)
 8001000:	331c      	adds	r3, #28
 8001002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001006:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.enablePins[1] = enb;
 800100a:	4b6d      	ldr	r3, [pc, #436]	@ (80011c0 <main+0x240>)
 800100c:	4a71      	ldr	r2, [pc, #452]	@ (80011d4 <main+0x254>)
 800100e:	3324      	adds	r3, #36	@ 0x24
 8001010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001014:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.enablePins[2] = enc;
 8001018:	4b69      	ldr	r3, [pc, #420]	@ (80011c0 <main+0x240>)
 800101a:	4a6f      	ldr	r2, [pc, #444]	@ (80011d8 <main+0x258>)
 800101c:	332c      	adds	r3, #44	@ 0x2c
 800101e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001022:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.motorSleep = motor_Sleep;
 8001026:	4b66      	ldr	r3, [pc, #408]	@ (80011c0 <main+0x240>)
 8001028:	4a6c      	ldr	r2, [pc, #432]	@ (80011dc <main+0x25c>)
 800102a:	3334      	adds	r3, #52	@ 0x34
 800102c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001030:	e883 0003 	stmia.w	r3, {r0, r1}

  motor.hallPins[0] = Hall_1;
 8001034:	4b62      	ldr	r3, [pc, #392]	@ (80011c0 <main+0x240>)
 8001036:	4a6a      	ldr	r2, [pc, #424]	@ (80011e0 <main+0x260>)
 8001038:	3304      	adds	r3, #4
 800103a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800103e:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.hallPins[1] = Hall_2;
 8001042:	4b5f      	ldr	r3, [pc, #380]	@ (80011c0 <main+0x240>)
 8001044:	4a67      	ldr	r2, [pc, #412]	@ (80011e4 <main+0x264>)
 8001046:	330c      	adds	r3, #12
 8001048:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104c:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.hallPins[2] = Hall_3;
 8001050:	4b5b      	ldr	r3, [pc, #364]	@ (80011c0 <main+0x240>)
 8001052:	4a65      	ldr	r2, [pc, #404]	@ (80011e8 <main+0x268>)
 8001054:	3314      	adds	r3, #20
 8001056:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105a:	e883 0003 	stmia.w	r3, {r0, r1}
  motor.dutyCycle = 0.2;
 800105e:	4b58      	ldr	r3, [pc, #352]	@ (80011c0 <main+0x240>)
 8001060:	4a62      	ldr	r2, [pc, #392]	@ (80011ec <main+0x26c>)
 8001062:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  motor.speedTim = &htim17;
 8001066:	4b56      	ldr	r3, [pc, #344]	@ (80011c0 <main+0x240>)
 8001068:	4a61      	ldr	r2, [pc, #388]	@ (80011f0 <main+0x270>)
 800106a:	651a      	str	r2, [r3, #80]	@ 0x50
  motor.dir = 1;        // make go forward
 800106c:	4b54      	ldr	r3, [pc, #336]	@ (80011c0 <main+0x240>)
 800106e:	2201      	movs	r2, #1
 8001070:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb

  uint8_t dataBuffer;
  uint8_t changeState;

  //accelerometer Control Reg
  accRead(0x10, &dataBuffer);
 8001074:	f207 333f 	addw	r3, r7, #831	@ 0x33f
 8001078:	4619      	mov	r1, r3
 800107a:	2010      	movs	r0, #16
 800107c:	f7ff ff4e 	bl	8000f1c <accRead>

  changeState = dataBuffer | 0b10100000;
 8001080:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 8001084:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f887 333e 	strb.w	r3, [r7, #830]	@ 0x33e
  accWrite(0x10, &changeState);
 800108e:	f207 333e 	addw	r3, r7, #830	@ 0x33e
 8001092:	4619      	mov	r1, r3
 8001094:	2010      	movs	r0, #16
 8001096:	f7ff ff11 	bl	8000ebc <accWrite>

  //GyroControl Reg
  accRead(0x11, &dataBuffer);
 800109a:	f207 333f 	addw	r3, r7, #831	@ 0x33f
 800109e:	4619      	mov	r1, r3
 80010a0:	2011      	movs	r0, #17
 80010a2:	f7ff ff3b 	bl	8000f1c <accRead>

  changeState = dataBuffer | 0b10100000;
 80010a6:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 80010aa:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f887 333e 	strb.w	r3, [r7, #830]	@ 0x33e
  accWrite(0x11, &changeState);
 80010b4:	f207 333e 	addw	r3, r7, #830	@ 0x33e
 80010b8:	4619      	mov	r1, r3
 80010ba:	2011      	movs	r0, #17
 80010bc:	f7ff fefe 	bl	8000ebc <accWrite>

  //
  accRead(0x13, &dataBuffer);
 80010c0:	f207 333f 	addw	r3, r7, #831	@ 0x33f
 80010c4:	4619      	mov	r1, r3
 80010c6:	2013      	movs	r0, #19
 80010c8:	f7ff ff28 	bl	8000f1c <accRead>

  changeState = dataBuffer | 0b10101100;
 80010cc:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 80010d0:	f063 0353 	orn	r3, r3, #83	@ 0x53
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f887 333e 	strb.w	r3, [r7, #830]	@ 0x33e
  accWrite(0x13, &changeState);
 80010da:	f207 333e 	addw	r3, r7, #830	@ 0x33e
 80010de:	4619      	mov	r1, r3
 80010e0:	2013      	movs	r0, #19
 80010e2:	f7ff feeb 	bl	8000ebc <accWrite>

  MOTOR_init(&motor);
 80010e6:	4836      	ldr	r0, [pc, #216]	@ (80011c0 <main+0x240>)
 80010e8:	f000 ff5e 	bl	8001fa8 <MOTOR_init>
  int order = 4; // 2nd order Butterworth filter
 80010ec:	2304      	movs	r3, #4
 80010ee:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
  float cutoff_frequency = 5.0f; // Desired cutoff frequency in Hz
 80010f2:	4b40      	ldr	r3, [pc, #256]	@ (80011f4 <main+0x274>)
 80010f4:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  float sampling_rate = 500.0f; // Sampling rate in Hz
 80010f8:	4b3f      	ldr	r3, [pc, #252]	@ (80011f8 <main+0x278>)
 80010fa:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  int length = 100; // Length of the data array
 80010fe:	2364      	movs	r3, #100	@ 0x64
 8001100:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  // Example input data (replace with your actual ADC data)
  float adcData[100];
  float filteredData[100];
  float a[3], b[3];

  toggleState = 0;
 8001104:	4b3d      	ldr	r3, [pc, #244]	@ (80011fc <main+0x27c>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
  double kp = 0.000000215f;
 800110a:	a323      	add	r3, pc, #140	@ (adr r3, 8001198 <main+0x218>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	e9c7 23de 	strd	r2, r3, [r7, #888]	@ 0x378
  double kd = 0.00000000205f;
 8001114:	a322      	add	r3, pc, #136	@ (adr r3, 80011a0 <main+0x220>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	e9c7 23dc 	strd	r2, r3, [r7, #880]	@ 0x370
  double ki = 0.0000000288f;
 800111e:	a322      	add	r3, pc, #136	@ (adr r3, 80011a8 <main+0x228>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	e9c7 23da 	strd	r2, r3, [r7, #872]	@ 0x368
  double lastDuty = 0;
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	e9c7 23d8 	strd	r2, r3, [r7, #864]	@ 0x360
  double lastSpeedErr = 0;
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
  double speedErr = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
  double totalErr = 0;
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
  int samples = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  int count = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
  float pitchAngle;
  float yawAngle;
  char * adcString;

  float datatest;
  SEGGER_RTT_Init();
 8001164:	f7ff fe30 	bl	8000dc8 <SEGGER_RTT_Init>
  HAL_COMP_Start(&hcomp2);
 8001168:	4825      	ldr	r0, [pc, #148]	@ (8001200 <main+0x280>)
 800116a:	f004 f869 	bl	8005240 <HAL_COMP_Start>
  HAL_TIM_Base_Start_IT(&htim17);
 800116e:	4820      	ldr	r0, [pc, #128]	@ (80011f0 <main+0x270>)
 8001170:	f006 fdbc 	bl	8007cec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim17);
 8001174:	481e      	ldr	r0, [pc, #120]	@ (80011f0 <main+0x270>)
 8001176:	f006 fd57 	bl	8007c28 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800117a:	217f      	movs	r1, #127	@ 0x7f
 800117c:	4812      	ldr	r0, [pc, #72]	@ (80011c8 <main+0x248>)
 800117e:	f003 fdd5 	bl	8004d2c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) motor.adcData, 3);
 8001182:	2203      	movs	r2, #3
 8001184:	491f      	ldr	r1, [pc, #124]	@ (8001204 <main+0x284>)
 8001186:	4810      	ldr	r0, [pc, #64]	@ (80011c8 <main+0x248>)
 8001188:	f002 ff42 	bl	8004010 <HAL_ADC_Start_DMA>
  // setting motor 1
  int x = 0 ;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  float offsetU;
  float offsetV;
  float offsetW;

  while (x < 1000){
 8001192:	e065      	b.n	8001260 <main+0x2e0>
 8001194:	f3af 8000 	nop.w
 8001198:	00000000 	.word	0x00000000
 800119c:	3e8cdb58 	.word	0x3e8cdb58
 80011a0:	60000000 	.word	0x60000000
 80011a4:	3e219bff 	.word	0x3e219bff
 80011a8:	e0000000 	.word	0xe0000000
 80011ac:	3e5eec7b 	.word	0x3e5eec7b
 80011b0:	20000aa0 	.word	0x20000aa0
 80011b4:	20000040 	.word	0x20000040
 80011b8:	08000ebd 	.word	0x08000ebd
 80011bc:	08000f1d 	.word	0x08000f1d
 80011c0:	200009b0 	.word	0x200009b0
 80011c4:	200007a0 	.word	0x200007a0
 80011c8:	2000057c 	.word	0x2000057c
 80011cc:	200006d8 	.word	0x200006d8
 80011d0:	20000020 	.word	0x20000020
 80011d4:	20000028 	.word	0x20000028
 80011d8:	20000030 	.word	0x20000030
 80011dc:	20000038 	.word	0x20000038
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000010 	.word	0x20000010
 80011ec:	3e4ccccd 	.word	0x3e4ccccd
 80011f0:	200008d0 	.word	0x200008d0
 80011f4:	40a00000 	.word	0x40a00000
 80011f8:	43fa0000 	.word	0x43fa0000
 80011fc:	20000a9c 	.word	0x20000a9c
 8001200:	200006b4 	.word	0x200006b4
 8001204:	200009f0 	.word	0x200009f0
	  offsetU += (float)motor.adcData[0];
 8001208:	4b7e      	ldr	r3, [pc, #504]	@ (8001404 <main+0x484>)
 800120a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001216:	ed97 7ae6 	vldr	s14, [r7, #920]	@ 0x398
 800121a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121e:	edc7 7ae6 	vstr	s15, [r7, #920]	@ 0x398
  	  offsetV += (float)motor.adcData[1];
 8001222:	4b78      	ldr	r3, [pc, #480]	@ (8001404 <main+0x484>)
 8001224:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001230:	ed97 7ae5 	vldr	s14, [r7, #916]	@ 0x394
 8001234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001238:	edc7 7ae5 	vstr	s15, [r7, #916]	@ 0x394
  	  offsetW += (float)motor.adcData[2];
 800123c:	4b71      	ldr	r3, [pc, #452]	@ (8001404 <main+0x484>)
 800123e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124a:	ed97 7ae4 	vldr	s14, [r7, #912]	@ 0x390
 800124e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001252:	edc7 7ae4 	vstr	s15, [r7, #912]	@ 0x390
  	  x++;
 8001256:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800125a:	3301      	adds	r3, #1
 800125c:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  while (x < 1000){
 8001260:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001264:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001268:	dbce      	blt.n	8001208 <main+0x288>
  	  }

  motor.offset[0] = round(offsetU/1000.0f);
 800126a:	edd7 7ae6 	vldr	s15, [r7, #920]	@ 0x398
 800126e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001408 <main+0x488>
 8001272:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001276:	ee16 0a90 	vmov	r0, s13
 800127a:	f7ff fa5b 	bl	8000734 <__aeabi_f2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	ec43 2b10 	vmov	d0, r2, r3
 8001286:	f008 fff9 	bl	800a27c <round>
 800128a:	ec53 2b10 	vmov	r2, r3, d0
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fb77 	bl	8000984 <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4a5a      	ldr	r2, [pc, #360]	@ (8001404 <main+0x484>)
 800129a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
  motor.offset[1] = round(offsetV/1000.0f);
 800129e:	edd7 7ae5 	vldr	s15, [r7, #916]	@ 0x394
 80012a2:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001408 <main+0x488>
 80012a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012aa:	ee16 0a90 	vmov	r0, s13
 80012ae:	f7ff fa41 	bl	8000734 <__aeabi_f2d>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	ec43 2b10 	vmov	d0, r2, r3
 80012ba:	f008 ffdf 	bl	800a27c <round>
 80012be:	ec53 2b10 	vmov	r2, r3, d0
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fb5d 	bl	8000984 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001404 <main+0x484>)
 80012ce:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
  motor.offset[2] = round(offsetW/1000.0f);
 80012d2:	edd7 7ae4 	vldr	s15, [r7, #912]	@ 0x390
 80012d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001408 <main+0x488>
 80012da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012de:	ee16 0a90 	vmov	r0, s13
 80012e2:	f7ff fa27 	bl	8000734 <__aeabi_f2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ec43 2b10 	vmov	d0, r2, r3
 80012ee:	f008 ffc5 	bl	800a27c <round>
 80012f2:	ec53 2b10 	vmov	r2, r3, d0
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fb43 	bl	8000984 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a40      	ldr	r2, [pc, #256]	@ (8001404 <main+0x484>)
 8001302:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  motor.hallCount = htim17.Instance->CNT;
 8001306:	4b41      	ldr	r3, [pc, #260]	@ (800140c <main+0x48c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001314:	4b3b      	ldr	r3, [pc, #236]	@ (8001404 <main+0x484>)
 8001316:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
	  readHalls(&motor);
 800131a:	483a      	ldr	r0, [pc, #232]	@ (8001404 <main+0x484>)
 800131c:	f000 fd6a 	bl	8001df4 <readHalls>
	  get_Current(&motor);
 8001320:	4838      	ldr	r0, [pc, #224]	@ (8001404 <main+0x484>)
 8001322:	f000 fee5 	bl	80020f0 <get_Current>
	  MOTOR_FOCtask(&motor);
 8001326:	4837      	ldr	r0, [pc, #220]	@ (8001404 <main+0x484>)
 8001328:	f000 ff7e 	bl	8002228 <MOTOR_FOCtask>
	    speedErr = (float)(30.0f - motor.avg_speed);
 800132c:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <main+0x484>)
 800132e:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 8001332:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133a:	ee17 0a90 	vmov	r0, s15
 800133e:	f7ff f9f9 	bl	8000734 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
	    motor.dutyCycle = motor.dutyCycle + (float)(kp *speedErr) + (float)(kd * (speedErr - lastSpeedErr)) + (float)(ki * totalErr);
 800134a:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <main+0x484>)
 800134c:	ed93 8a31 	vldr	s16, [r3, #196]	@ 0xc4
 8001350:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8001354:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	@ 0x378
 8001358:	f7fe ff5e 	bl	8000218 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fb0e 	bl	8000984 <__aeabi_d2f>
 8001368:	ee07 0a90 	vmov	s15, r0
 800136c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001370:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8001374:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
 8001378:	f7ff f87c 	bl	8000474 <__aeabi_dsub>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	@ 0x370
 8001388:	f7fe ff46 	bl	8000218 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff faf6 	bl	8000984 <__aeabi_d2f>
 8001398:	ee07 0a90 	vmov	s15, r0
 800139c:	ee38 8a27 	vadd.f32	s16, s16, s15
 80013a0:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 80013a4:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	@ 0x368
 80013a8:	f7fe ff36 	bl	8000218 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fae6 	bl	8000984 <__aeabi_d2f>
 80013b8:	ee07 0a90 	vmov	s15, r0
 80013bc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <main+0x484>)
 80013c2:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
	    if(motor.dutyCycle > 0.5f){
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <main+0x484>)
 80013c8:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 80013cc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80013d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	dd05      	ble.n	80013e6 <main+0x466>
	    	motor.dutyCycle = 0.5f;
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <main+0x484>)
 80013dc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80013e0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 80013e4:	e78f      	b.n	8001306 <main+0x386>
		}
		else if(motor.dutyCycle < 0.000f){
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <main+0x484>)
 80013e8:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 80013ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	d504      	bpl.n	8001400 <main+0x480>
			motor.dutyCycle = 0.000f;
 80013f6:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <main+0x484>)
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  {
 8001400:	e781      	b.n	8001306 <main+0x386>
 8001402:	bf00      	nop
 8001404:	200009b0 	.word	0x200009b0
 8001408:	447a0000 	.word	0x447a0000
 800140c:	200008d0 	.word	0x200008d0

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	@ 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2238      	movs	r2, #56	@ 0x38
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f008 fd92 	bl	8009f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001432:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001436:	f004 fc97 	bl	8005d68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001444:	2340      	movs	r3, #64	@ 0x40
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144c:	2302      	movs	r3, #2
 800144e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001450:	2304      	movs	r3, #4
 8001452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001454:	234b      	movs	r3, #75	@ 0x4b
 8001456:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fd31 	bl	8005ed0 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001474:	f000 fcb8 	bl	8001de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2303      	movs	r3, #3
 800147e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2104      	movs	r1, #4
 8001490:	4618      	mov	r0, r3
 8001492:	f005 f82f 	bl	80064f4 <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800149c:	f000 fca4 	bl	8001de8 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3750      	adds	r7, #80	@ 0x50
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2220      	movs	r2, #32
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f008 fd41 	bl	8009f48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014c6:	4b41      	ldr	r3, [pc, #260]	@ (80015cc <MX_ADC1_Init+0x124>)
 80014c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80014cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014ce:	4b3f      	ldr	r3, [pc, #252]	@ (80015cc <MX_ADC1_Init+0x124>)
 80014d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80014d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d6:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <MX_ADC1_Init+0x124>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014dc:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <MX_ADC1_Init+0x124>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80014e2:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <MX_ADC1_Init+0x124>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e8:	4b38      	ldr	r3, [pc, #224]	@ (80015cc <MX_ADC1_Init+0x124>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <MX_ADC1_Init+0x124>)
 80014f0:	2208      	movs	r2, #8
 80014f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014f4:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <MX_ADC1_Init+0x124>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014fa:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <MX_ADC1_Init+0x124>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001500:	4b32      	ldr	r3, [pc, #200]	@ (80015cc <MX_ADC1_Init+0x124>)
 8001502:	2203      	movs	r2, #3
 8001504:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001506:	4b31      	ldr	r3, [pc, #196]	@ (80015cc <MX_ADC1_Init+0x124>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 800150e:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <MX_ADC1_Init+0x124>)
 8001510:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8001514:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <MX_ADC1_Init+0x124>)
 8001518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800151e:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <MX_ADC1_Init+0x124>)
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001526:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <MX_ADC1_Init+0x124>)
 8001528:	2200      	movs	r2, #0
 800152a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800152c:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <MX_ADC1_Init+0x124>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001534:	4825      	ldr	r0, [pc, #148]	@ (80015cc <MX_ADC1_Init+0x124>)
 8001536:	f002 fbe7 	bl	8003d08 <HAL_ADC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001540:	f000 fc52 	bl	8001de8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	481f      	ldr	r0, [pc, #124]	@ (80015cc <MX_ADC1_Init+0x124>)
 8001550:	f003 fc4e 	bl	8004df0 <HAL_ADCEx_MultiModeConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800155a:	f000 fc45 	bl	8001de8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800155e:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <MX_ADC1_Init+0x128>)
 8001560:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001562:	2306      	movs	r3, #6
 8001564:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001566:	2301      	movs	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800156a:	237f      	movs	r3, #127	@ 0x7f
 800156c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800156e:	2304      	movs	r3, #4
 8001570:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4814      	ldr	r0, [pc, #80]	@ (80015cc <MX_ADC1_Init+0x124>)
 800157c:	f002 fe1a 	bl	80041b4 <HAL_ADC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001586:	f000 fc2f 	bl	8001de8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_ADC1_Init+0x12c>)
 800158c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800158e:	230c      	movs	r3, #12
 8001590:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	@ (80015cc <MX_ADC1_Init+0x124>)
 8001598:	f002 fe0c 	bl	80041b4 <HAL_ADC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80015a2:	f000 fc21 	bl	8001de8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_ADC1_Init+0x130>)
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015aa:	2312      	movs	r3, #18
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	@ (80015cc <MX_ADC1_Init+0x124>)
 80015b4:	f002 fdfe 	bl	80041b4 <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80015be:	f000 fc13 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3730      	adds	r7, #48	@ 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000057c 	.word	0x2000057c
 80015d0:	14f00020 	.word	0x14f00020
 80015d4:	2e300800 	.word	0x2e300800
 80015d8:	3ac04000 	.word	0x3ac04000

080015dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2220      	movs	r2, #32
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f008 fcad 	bl	8009f48 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80015ee:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 80015f0:	4a32      	ldr	r2, [pc, #200]	@ (80016bc <MX_ADC2_Init+0xe0>)
 80015f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015f4:	4b30      	ldr	r3, [pc, #192]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 80015f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015fc:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001602:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800160e:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001610:	2201      	movs	r2, #1
 8001612:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001614:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001616:	2204      	movs	r2, #4
 8001618:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800161a:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001622:	2200      	movs	r2, #0
 8001624:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001628:	2202      	movs	r2, #2
 800162a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800162c:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001634:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800163a:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001640:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 800164a:	2200      	movs	r2, #0
 800164c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001656:	4818      	ldr	r0, [pc, #96]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001658:	f002 fb56 	bl	8003d08 <HAL_ADC_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001662:	f000 fbc1 	bl	8001de8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <MX_ADC2_Init+0xe4>)
 8001668:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800166a:	2306      	movs	r3, #6
 800166c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001672:	237f      	movs	r3, #127	@ 0x7f
 8001674:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001676:	2304      	movs	r3, #4
 8001678:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	4619      	mov	r1, r3
 8001682:	480d      	ldr	r0, [pc, #52]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 8001684:	f002 fd96 	bl	80041b4 <HAL_ADC_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800168e:	f000 fbab 	bl	8001de8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MX_ADC2_Init+0xe8>)
 8001694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001696:	230c      	movs	r3, #12
 8001698:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800169a:	463b      	mov	r3, r7
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <MX_ADC2_Init+0xdc>)
 80016a0:	f002 fd88 	bl	80041b4 <HAL_ADC_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80016aa:	f000 fb9d 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200005e8 	.word	0x200005e8
 80016bc:	50000100 	.word	0x50000100
 80016c0:	04300002 	.word	0x04300002
 80016c4:	08600004 	.word	0x08600004

080016c8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_COMP2_Init+0x44>)
 80016ce:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <MX_COMP2_Init+0x48>)
 80016d0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_COMP2_Init+0x44>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_COMP2_Init+0x44>)
 80016da:	4a0e      	ldr	r2, [pc, #56]	@ (8001714 <MX_COMP2_Init+0x4c>)
 80016dc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_COMP2_Init+0x44>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_COMP2_Init+0x44>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_COMP2_Init+0x44>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_COMP2_Init+0x44>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_COMP2_Init+0x44>)
 80016f8:	f003 fcc6 	bl	8005088 <HAL_COMP_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8001702:	f000 fb71 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200006b4 	.word	0x200006b4
 8001710:	40010204 	.word	0x40010204
 8001714:	00800030 	.word	0x00800030

08001718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <MX_SPI1_Init+0x74>)
 800171e:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <MX_SPI1_Init+0x78>)
 8001720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_SPI1_Init+0x74>)
 8001724:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <MX_SPI1_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001730:	4b16      	ldr	r3, [pc, #88]	@ (800178c <MX_SPI1_Init+0x74>)
 8001732:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_SPI1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800173e:	4b13      	ldr	r3, [pc, #76]	@ (800178c <MX_SPI1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_SPI1_Init+0x74>)
 8001746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800174a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_SPI1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_SPI1_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_SPI1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <MX_SPI1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_SPI1_Init+0x74>)
 8001766:	2207      	movs	r2, #7
 8001768:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800176a:	4b08      	ldr	r3, [pc, #32]	@ (800178c <MX_SPI1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_SPI1_Init+0x74>)
 8001772:	2208      	movs	r2, #8
 8001774:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	@ (800178c <MX_SPI1_Init+0x74>)
 8001778:	f005 fac8 	bl	8006d0c <HAL_SPI_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001782:	f000 fb31 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200006d8 	.word	0x200006d8
 8001790:	40013000 	.word	0x40013000

08001794 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <MX_SPI3_Init+0x74>)
 800179a:	4a1c      	ldr	r2, [pc, #112]	@ (800180c <MX_SPI3_Init+0x78>)
 800179c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800179e:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017a6:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ac:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017f0:	2208      	movs	r2, #8
 80017f2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <MX_SPI3_Init+0x74>)
 80017f6:	f005 fa89 	bl	8006d0c <HAL_SPI_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8001800:	f000 faf2 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000073c 	.word	0x2000073c
 800180c:	40003c00 	.word	0x40003c00

08001810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b09c      	sub	sp, #112	@ 0x70
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001830:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2234      	movs	r2, #52	@ 0x34
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f008 fb7c 	bl	8009f48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001850:	4b57      	ldr	r3, [pc, #348]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001852:	4a58      	ldr	r2, [pc, #352]	@ (80019b4 <MX_TIM1_Init+0x1a4>)
 8001854:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8001856:	4b56      	ldr	r3, [pc, #344]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001858:	2202      	movs	r2, #2
 800185a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800185c:	4b54      	ldr	r3, [pc, #336]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 800185e:	2220      	movs	r2, #32
 8001860:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 765;
 8001862:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001864:	f240 22fd 	movw	r2, #765	@ 0x2fd
 8001868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186a:	4b51      	ldr	r3, [pc, #324]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001870:	4b4f      	ldr	r3, [pc, #316]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b4e      	ldr	r3, [pc, #312]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800187c:	484c      	ldr	r0, [pc, #304]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 800187e:	f006 f97b 	bl	8007b78 <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001888:	f000 faae 	bl	8001de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001890:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001892:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001896:	4619      	mov	r1, r3
 8001898:	4845      	ldr	r0, [pc, #276]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 800189a:	f006 fe4d 	bl	8008538 <HAL_TIM_ConfigClockSource>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018a4:	f000 faa0 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018a8:	4841      	ldr	r0, [pc, #260]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 80018aa:	f006 fa89 	bl	8007dc0 <HAL_TIM_PWM_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018b4:	f000 fa98 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80018b8:	2350      	movs	r3, #80	@ 0x50
 80018ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018c8:	4619      	mov	r1, r3
 80018ca:	4839      	ldr	r0, [pc, #228]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 80018cc:	f007 fbaa 	bl	8009024 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018d6:	f000 fa87 	bl	8001de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	@ 0x60
 80018dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e6:	2300      	movs	r3, #0
 80018e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	482c      	ldr	r0, [pc, #176]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001900:	f006 fd06 	bl	8008310 <HAL_TIM_PWM_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800190a:	f000 fa6d 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800190e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001912:	2204      	movs	r2, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4826      	ldr	r0, [pc, #152]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001918:	f006 fcfa 	bl	8008310 <HAL_TIM_PWM_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001922:	f000 fa61 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001926:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800192a:	2208      	movs	r2, #8
 800192c:	4619      	mov	r1, r3
 800192e:	4820      	ldr	r0, [pc, #128]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001930:	f006 fcee 	bl	8008310 <HAL_TIM_PWM_ConfigChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800193a:	f000 fa55 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800193e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001942:	220c      	movs	r2, #12
 8001944:	4619      	mov	r1, r3
 8001946:	481a      	ldr	r0, [pc, #104]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001948:	f006 fce2 	bl	8008310 <HAL_TIM_PWM_ConfigChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001952:	f000 fa49 	bl	8001de8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800196a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800196e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800197c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001986:	2300      	movs	r3, #0
 8001988:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4807      	ldr	r0, [pc, #28]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 8001994:	f007 fbc8 	bl	8009128 <HAL_TIMEx_ConfigBreakDeadTime>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800199e:	f000 fa23 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019a2:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <MX_TIM1_Init+0x1a0>)
 80019a4:	f001 fd64 	bl	8003470 <HAL_TIM_MspPostInit>

}
 80019a8:	bf00      	nop
 80019aa:	3770      	adds	r7, #112	@ 0x70
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200007a0 	.word	0x200007a0
 80019b4:	40012c00 	.word	0x40012c00

080019b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	@ 0x28
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ca:	463b      	mov	r3, r7
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
 80019d8:	615a      	str	r2, [r3, #20]
 80019da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 80019de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80019e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 80019e6:	2210      	movs	r2, #16
 80019e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80019f0:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 80019f2:	22ff      	movs	r2, #255	@ 0xff
 80019f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a02:	4823      	ldr	r0, [pc, #140]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 8001a04:	f006 f9dc 	bl	8007dc0 <HAL_TIM_PWM_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a0e:	f000 f9eb 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	481b      	ldr	r0, [pc, #108]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 8001a22:	f007 faff 	bl	8009024 <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a2c:	f000 f9dc 	bl	8001de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a30:	2360      	movs	r3, #96	@ 0x60
 8001a32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	2204      	movs	r2, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4812      	ldr	r0, [pc, #72]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 8001a48:	f006 fc62 	bl	8008310 <HAL_TIM_PWM_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a52:	f000 f9c9 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a56:	463b      	mov	r3, r7
 8001a58:	2208      	movs	r2, #8
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 8001a5e:	f006 fc57 	bl	8008310 <HAL_TIM_PWM_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a68:	f000 f9be 	bl	8001de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	220c      	movs	r2, #12
 8001a70:	4619      	mov	r1, r3
 8001a72:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 8001a74:	f006 fc4c 	bl	8008310 <HAL_TIM_PWM_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001a7e:	f000 f9b3 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a82:	4803      	ldr	r0, [pc, #12]	@ (8001a90 <MX_TIM2_Init+0xd8>)
 8001a84:	f001 fcf4 	bl	8003470 <HAL_TIM_MspPostInit>

}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	@ 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200007ec 	.word	0x200007ec

08001a94 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <MX_TIM7_Init+0x64>)
 8001aa6:	4a15      	ldr	r2, [pc, #84]	@ (8001afc <MX_TIM7_Init+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <MX_TIM7_Init+0x64>)
 8001aac:	2204      	movs	r2, #4
 8001aae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <MX_TIM7_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2556;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <MX_TIM7_Init+0x64>)
 8001ab8:	f640 12fc 	movw	r2, #2556	@ 0x9fc
 8001abc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <MX_TIM7_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ac4:	480c      	ldr	r0, [pc, #48]	@ (8001af8 <MX_TIM7_Init+0x64>)
 8001ac6:	f006 f857 	bl	8007b78 <HAL_TIM_Base_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001ad0:	f000 f98a 	bl	8001de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <MX_TIM7_Init+0x64>)
 8001ae2:	f007 fa9f 	bl	8009024 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001aec:	f000 f97c 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000838 	.word	0x20000838
 8001afc:	40001400 	.word	0x40001400

08001b00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <MX_TIM16_Init+0x44>)
 8001b06:	4a10      	ldr	r2, [pc, #64]	@ (8001b48 <MX_TIM16_Init+0x48>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <MX_TIM16_Init+0x44>)
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <MX_TIM16_Init+0x44>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <MX_TIM16_Init+0x44>)
 8001b18:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b1c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <MX_TIM16_Init+0x44>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <MX_TIM16_Init+0x44>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <MX_TIM16_Init+0x44>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	@ (8001b44 <MX_TIM16_Init+0x44>)
 8001b32:	f006 f821 	bl	8007b78 <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001b3c:	f000 f954 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000884 	.word	0x20000884
 8001b48:	40014400 	.word	0x40014400

08001b4c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <MX_TIM17_Init+0x48>)
 8001b52:	4a11      	ldr	r2, [pc, #68]	@ (8001b98 <MX_TIM17_Init+0x4c>)
 8001b54:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 300;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <MX_TIM17_Init+0x48>)
 8001b58:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b5c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <MX_TIM17_Init+0x48>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <MX_TIM17_Init+0x48>)
 8001b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b6a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_TIM17_Init+0x48>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <MX_TIM17_Init+0x48>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_TIM17_Init+0x48>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_TIM17_Init+0x48>)
 8001b80:	f005 fffa 	bl	8007b78 <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001b8a:	f000 f92d 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200008d0 	.word	0x200008d0
 8001b98:	40014800 	.word	0x40014800

08001b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001ba2:	4a23      	ldr	r2, [pc, #140]	@ (8001c30 <MX_USART1_UART_Init+0x94>)
 8001ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bae:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd2:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bde:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001be4:	4811      	ldr	r0, [pc, #68]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001be6:	f007 fb71 	bl	80092cc <HAL_UART_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bf0:	f000 f8fa 	bl	8001de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bf8:	f008 f8dc 	bl	8009db4 <HAL_UARTEx_SetTxFifoThreshold>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c02:	f000 f8f1 	bl	8001de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c06:	2100      	movs	r1, #0
 8001c08:	4808      	ldr	r0, [pc, #32]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001c0a:	f008 f911 	bl	8009e30 <HAL_UARTEx_SetRxFifoThreshold>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c14:	f000 f8e8 	bl	8001de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <MX_USART1_UART_Init+0x90>)
 8001c1a:	f008 f892 	bl	8009d42 <HAL_UARTEx_DisableFifoMode>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c24:	f000 f8e0 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000091c 	.word	0x2000091c
 8001c30:	40013800 	.word	0x40013800

08001c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <MX_DMA_Init+0x50>)
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3e:	4a11      	ldr	r2, [pc, #68]	@ (8001c84 <MX_DMA_Init+0x50>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <MX_DMA_Init+0x50>)
 8001c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c52:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <MX_DMA_Init+0x50>)
 8001c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c56:	4a0b      	ldr	r2, [pc, #44]	@ (8001c84 <MX_DMA_Init+0x50>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <MX_DMA_Init+0x50>)
 8001c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	200b      	movs	r0, #11
 8001c70:	f003 fc09 	bl	8005486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c74:	200b      	movs	r0, #11
 8001c76:	f003 fc20 	bl	80054ba <HAL_NVIC_EnableIRQ>

}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000

08001c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8001ddc <MX_GPIO_Init+0x154>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	4a4e      	ldr	r2, [pc, #312]	@ (8001ddc <MX_GPIO_Init+0x154>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001caa:	4b4c      	ldr	r3, [pc, #304]	@ (8001ddc <MX_GPIO_Init+0x154>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b49      	ldr	r3, [pc, #292]	@ (8001ddc <MX_GPIO_Init+0x154>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	4a48      	ldr	r2, [pc, #288]	@ (8001ddc <MX_GPIO_Init+0x154>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc2:	4b46      	ldr	r3, [pc, #280]	@ (8001ddc <MX_GPIO_Init+0x154>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <MX_GPIO_Init+0x154>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a42      	ldr	r2, [pc, #264]	@ (8001ddc <MX_GPIO_Init+0x154>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b40      	ldr	r3, [pc, #256]	@ (8001ddc <MX_GPIO_Init+0x154>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2110      	movs	r1, #16
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cee:	f004 f80b 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 4121 	mov.w	r1, #41216	@ 0xa100
 8001cf8:	4839      	ldr	r0, [pc, #228]	@ (8001de0 <MX_GPIO_Init+0x158>)
 8001cfa:	f004 f805 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2140      	movs	r1, #64	@ 0x40
 8001d02:	4838      	ldr	r0, [pc, #224]	@ (8001de4 <MX_GPIO_Init+0x15c>)
 8001d04:	f004 f800 	bl	8005d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_11;
 8001d08:	f642 0310 	movw	r3, #10256	@ 0x2810
 8001d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d0e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4831      	ldr	r0, [pc, #196]	@ (8001de4 <MX_GPIO_Init+0x15c>)
 8001d20:	f003 fe58 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d24:	2310      	movs	r3, #16
 8001d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3e:	f003 fe49 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10;
 8001d42:	f240 4302 	movw	r3, #1026	@ 0x402
 8001d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4822      	ldr	r0, [pc, #136]	@ (8001de0 <MX_GPIO_Init+0x158>)
 8001d58:	f003 fe3c 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8;
 8001d5c:	f44f 4321 	mov.w	r3, #41216	@ 0xa100
 8001d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	481a      	ldr	r0, [pc, #104]	@ (8001de0 <MX_GPIO_Init+0x158>)
 8001d76:	f003 fe2d 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d7a:	2340      	movs	r3, #64	@ 0x40
 8001d7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4814      	ldr	r0, [pc, #80]	@ (8001de4 <MX_GPIO_Init+0x15c>)
 8001d92:	f003 fe1f 	bl	80059d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	4619      	mov	r1, r3
 8001dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001db0:	f003 fe10 	bl	80059d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	200a      	movs	r0, #10
 8001dba:	f003 fb64 	bl	8005486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	f003 fb7b 	bl	80054ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2028      	movs	r0, #40	@ 0x28
 8001dca:	f003 fb5c 	bl	8005486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dce:	2028      	movs	r0, #40	@ 0x28
 8001dd0:	f003 fb73 	bl	80054ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	48000400 	.word	0x48000400
 8001de4:	48000800 	.word	0x48000800

08001de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dec:	b672      	cpsid	i
}
 8001dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <Error_Handler+0x8>

08001df4 <readHalls>:


	//m->angle = angle;
}

void readHalls(motor_t* m){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    int hall1 = HAL_GPIO_ReadPin(m->hallPins[0].gpioGroup, m->hallPins[0].gpioPin);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	891b      	ldrh	r3, [r3, #8]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f003 ff66 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	617b      	str	r3, [r7, #20]
    int hall2 = HAL_GPIO_ReadPin(m->hallPins[1].gpioGroup, m->hallPins[1].gpioPin);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	8a1b      	ldrh	r3, [r3, #16]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f003 ff5c 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	613b      	str	r3, [r7, #16]
    int hall3 = HAL_GPIO_ReadPin(m->hallPins[2].gpioGroup, m->hallPins[2].gpioPin);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	8b1b      	ldrh	r3, [r3, #24]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f003 ff52 	bl	8005cd8 <HAL_GPIO_ReadPin>
 8001e34:	4603      	mov	r3, r0
 8001e36:	60fb      	str	r3, [r7, #12]
    int steps;




    switch((hall1<<2)|(hall2<<1)|(hall3))
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	009a      	lsls	r2, r3, #2
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	3b01      	subs	r3, #1
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d840      	bhi.n	8001ece <readHalls+0xda>
 8001e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e54 <readHalls+0x60>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001eaf 	.word	0x08001eaf
 8001e58:	08001e8f 	.word	0x08001e8f
 8001e5c:	08001e9f 	.word	0x08001e9f
 8001e60:	08001e6d 	.word	0x08001e6d
 8001e64:	08001ebf 	.word	0x08001ebf
 8001e68:	08001e7f 	.word	0x08001e7f
    {
        case 0b100:
            m->angle = 0.0f;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	655a      	str	r2, [r3, #84]	@ 0x54
            m->hallState = 0b100;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2204      	movs	r2, #4
 8001e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

            break;
 8001e7c:	e02f      	b.n	8001ede <readHalls+0xea>
        case 0b110:
            //m->angle = (pi / 3.0f);
        	m->angle = 60.0f;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a41      	ldr	r2, [pc, #260]	@ (8001f88 <readHalls+0x194>)
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54
            m->hallState = 0b110;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2206      	movs	r2, #6
 8001e88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            break;
 8001e8c:	e027      	b.n	8001ede <readHalls+0xea>

        case 0b010:
            //m->angle = (2.0f * pi / 3.0f);
        	m->angle = 120.0f;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a3e      	ldr	r2, [pc, #248]	@ (8001f8c <readHalls+0x198>)
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54
            m->hallState = 0b010;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

            break;
 8001e9c:	e01f      	b.n	8001ede <readHalls+0xea>

        case 0b011:
            //m->angle = pi;
        	m->angle = 180.f;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8001f90 <readHalls+0x19c>)
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
            m->hallState = 0b011;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            break;
 8001eac:	e017      	b.n	8001ede <readHalls+0xea>

        case 0b001:
            //m->angle = (4.0f * pi / 3.0f);
        	m->angle = 240.0f;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a38      	ldr	r2, [pc, #224]	@ (8001f94 <readHalls+0x1a0>)
 8001eb2:	655a      	str	r2, [r3, #84]	@ 0x54
            m->hallState = 0b001;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            break;
 8001ebc:	e00f      	b.n	8001ede <readHalls+0xea>

        case 0b101:
            //m->angle = (5.0f * pi / 3.0f);
        	m->angle = 300.0f;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a35      	ldr	r2, [pc, #212]	@ (8001f98 <readHalls+0x1a4>)
 8001ec2:	655a      	str	r2, [r3, #84]	@ 0x54
            m->hallState = 0b101;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2205      	movs	r2, #5
 8001ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            break;
 8001ecc:	e007      	b.n	8001ede <readHalls+0xea>

        default:
            m->invalidCts++;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
            return;
 8001edc:	e051      	b.n	8001f82 <readHalls+0x18e>
    }

    m->avg_speed = approxRollingAverage(avg_speed, m->speed);
 8001ede:	4b2f      	ldr	r3, [pc, #188]	@ (8001f9c <readHalls+0x1a8>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	ed93 7a2d 	vldr	s14, [r3, #180]	@ 0xb4
 8001eea:	eef0 0a47 	vmov.f32	s1, s14
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	f000 f8cf 	bl	8002094 <approxRollingAverage>
 8001ef6:	eef0 7a40 	vmov.f32	s15, s0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8
    m->angleOffset =  60.0f * (m->avg_speed * (float)m->hallCount / 1000000.0f);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 8001f0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f10:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001fa0 <readHalls+0x1ac>
 8001f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f18:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001fa4 <readHalls+0x1b0>
 8001f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
    //altered hall input

    if(m->angleOffset > 60.0f ){
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8001f2c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001fa4 <readHalls+0x1b0>
 8001f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f38:	dd04      	ble.n	8001f44 <readHalls+0x150>
    	m->angleOffset = 60.0f;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a12      	ldr	r2, [pc, #72]	@ (8001f88 <readHalls+0x194>)
 8001f3e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8001f42:	e00c      	b.n	8001f5e <readHalls+0x16a>
    }
    else if (m->angleOffset < 0.0f){
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8001f4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	d504      	bpl.n	8001f5e <readHalls+0x16a>
    	m->angleOffset = 0.0f;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    }
    m->angle = m->angle +  m->angleOffset;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8001f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    m->lastHallState = m->hallState;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  return;
 8001f80:	bf00      	nop
}
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	42700000 	.word	0x42700000
 8001f8c:	42f00000 	.word	0x42f00000
 8001f90:	43340000 	.word	0x43340000
 8001f94:	43700000 	.word	0x43700000
 8001f98:	43960000 	.word	0x43960000
 8001f9c:	20000ae0 	.word	0x20000ae0
 8001fa0:	49742400 	.word	0x49742400
 8001fa4:	42700000 	.word	0x42700000

08001fa8 <MOTOR_init>:
 * @brief Initialize the motor control structure
 *
 * @param m A pointer to a motor_t struct (not a vicproto MotorState!) that is already initialized with the correct references
 */
void MOTOR_init(motor_t* m)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(m->pwm, TIM_CHANNEL_1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f005 ff5a 	bl	8007e70 <HAL_TIM_PWM_Start>
    // Using channel 2 as no output for 0 point adc trigger
    HAL_TIM_PWM_Start(m->pwm, TIM_CHANNEL_2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f005 ff54 	bl	8007e70 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(m->pwm, TIM_CHANNEL_3);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2108      	movs	r1, #8
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f005 ff4e 	bl	8007e70 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(m->pwm, TIM_CHANNEL_4);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	210c      	movs	r1, #12
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f005 ff48 	bl	8007e70 <HAL_TIM_PWM_Start>

    m->pwm->Instance->CCR1 = round(ARR * m->dutyCycle);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8001fe6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002090 <MOTOR_init+0xe8>
 8001fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fee:	ee17 0a90 	vmov	r0, s15
 8001ff2:	f7fe fb9f 	bl	8000734 <__aeabi_f2d>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	ec43 2b10 	vmov	d0, r2, r3
 8001ffe:	f008 f93d 	bl	800a27c <round>
 8002002:	ec51 0b10 	vmov	r0, r1, d0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	f7fe fc9a 	bl	8000944 <__aeabi_d2uiz>
 8002010:	4603      	mov	r3, r0
 8002012:	6363      	str	r3, [r4, #52]	@ 0x34
    m->pwm->Instance->CCR2 = 1;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2201      	movs	r2, #1
 800201c:	639a      	str	r2, [r3, #56]	@ 0x38
    m->pwm->Instance->CCR3 = round(ARR * m->dutyCycle);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8002024:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002090 <MOTOR_init+0xe8>
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	ee17 0a90 	vmov	r0, s15
 8002030:	f7fe fb80 	bl	8000734 <__aeabi_f2d>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	ec43 2b10 	vmov	d0, r2, r3
 800203c:	f008 f91e 	bl	800a27c <round>
 8002040:	ec51 0b10 	vmov	r0, r1, d0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681c      	ldr	r4, [r3, #0]
 800204a:	f7fe fc7b 	bl	8000944 <__aeabi_d2uiz>
 800204e:	4603      	mov	r3, r0
 8002050:	63e3      	str	r3, [r4, #60]	@ 0x3c
    m->pwm->Instance->CCR4 = round(ARR * m->dutyCycle); // trigger output compare 4 whenever 0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8002058:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002090 <MOTOR_init+0xe8>
 800205c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002060:	ee17 0a90 	vmov	r0, s15
 8002064:	f7fe fb66 	bl	8000734 <__aeabi_f2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	ec43 2b10 	vmov	d0, r2, r3
 8002070:	f008 f904 	bl	800a27c <round>
 8002074:	ec51 0b10 	vmov	r0, r1, d0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681c      	ldr	r4, [r3, #0]
 800207e:	f7fe fc61 	bl	8000944 <__aeabi_d2uiz>
 8002082:	4603      	mov	r3, r0
 8002084:	6423      	str	r3, [r4, #64]	@ 0x40

}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}
 800208e:	bf00      	nop
 8002090:	443f4000 	.word	0x443f4000

08002094 <approxRollingAverage>:
float MOTOR_getCurrent(motor_t* m)
{
    return m->averageCurrent;
}

float approxRollingAverage (float avg, float new_sample) {
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	ed87 0a01 	vstr	s0, [r7, #4]
 800209e:	edc7 0a00 	vstr	s1, [r7]
	float n = 150.0;
 80020a2:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <approxRollingAverage+0x58>)
 80020a4:	60fb      	str	r3, [r7, #12]
    avg -= avg / n;
 80020a6:	edd7 6a01 	vldr	s13, [r7, #4]
 80020aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80020ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80020b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ba:	edc7 7a01 	vstr	s15, [r7, #4]
    avg += new_sample / n;
 80020be:	edd7 6a00 	vldr	s13, [r7]
 80020c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80020c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80020ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d2:	edc7 7a01 	vstr	s15, [r7, #4]

    return avg;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	ee07 3a90 	vmov	s15, r3
}
 80020dc:	eeb0 0a67 	vmov.f32	s0, s15
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	43160000 	.word	0x43160000

080020f0 <get_Current>:
    	m->pwm->Instance->CCR2 = round(765.0f * (0.5f * sin(convertedAngle -  (4.0f * pi / 3.0f)) + 0.5) * m->dutyCycle); // pwmw = 0
    	m->pwm->Instance->CCR3 = round(765.0f * (0.5f * sin(convertedAngle - (2.0f * pi / 3.0f)) + 0.5) * m->dutyCycle); // pwmw = 0
	}
}

void get_Current(motor_t * m){
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	float voltageA = (3.3f *((float) m->adcData[0] / 4096.0f ))-1.65f;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002106:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002214 <get_Current+0x124>
 800210a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800210e:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002218 <get_Current+0x128>
 8002112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002116:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800221c <get_Current+0x12c>
 800211a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800211e:	edc7 7a05 	vstr	s15, [r7, #20]
	float voltageB = (3.3f *((float) m->adcData[1] / 4096.0f ))-1.65f;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002130:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002214 <get_Current+0x124>
 8002134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002138:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002218 <get_Current+0x128>
 800213c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002140:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800221c <get_Current+0x12c>
 8002144:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002148:	edc7 7a04 	vstr	s15, [r7, #16]
	float voltageC = (3.3f *((float) m->adcData[2] / 4096.0f ))-1.65f;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800215a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8002214 <get_Current+0x124>
 800215e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002162:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002218 <get_Current+0x128>
 8002166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800221c <get_Current+0x12c>
 800216e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002172:	edc7 7a03 	vstr	s15, [r7, #12]
	m->iuDat =  MP6543_IGAIN * voltageA / MP6543_SHUNT_RESISTOR;
 8002176:	edd7 7a05 	vldr	s15, [r7, #20]
 800217a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002220 <get_Current+0x130>
 800217e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002182:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002224 <get_Current+0x134>
 8002186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	m->iwDat =  MP6543_IGAIN * voltageB / MP6543_SHUNT_RESISTOR;
 8002190:	edd7 7a04 	vldr	s15, [r7, #16]
 8002194:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002220 <get_Current+0x130>
 8002198:	ee27 7a87 	vmul.f32	s14, s15, s14
 800219c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002224 <get_Current+0x134>
 80021a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
	m->ivDat =  MP6543_IGAIN * voltageC / MP6543_SHUNT_RESISTOR;
 80021aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ae:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002220 <get_Current+0x130>
 80021b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021b6:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002224 <get_Current+0x134>
 80021ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

	m->iaDat = (m->ivDat +  m->iwDat);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
	m->ibDat = (m->iuDat +  m->iwDat);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80021e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
	m->icDat = (m->ivDat +  m->iuDat);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	return;
 8002206:	bf00      	nop
}
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	45800000 	.word	0x45800000
 8002218:	40533333 	.word	0x40533333
 800221c:	3fd33333 	.word	0x3fd33333
 8002220:	460fc000 	.word	0x460fc000
 8002224:	45d48000 	.word	0x45d48000

08002228 <MOTOR_FOCtask>:
 * FOC commutation control
 * Uses SVM switching scheme
 */

void MOTOR_FOCtask(motor_t* m)
{
 8002228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800222c:	b08a      	sub	sp, #40	@ 0x28
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
    // Enable all three motor phases
    HAL_GPIO_WritePin(m->enablePins[0].gpioGroup, m->enablePins[0].gpioPin, 1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69d8      	ldr	r0, [r3, #28]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8c1b      	ldrh	r3, [r3, #32]
 800223a:	2201      	movs	r2, #1
 800223c:	4619      	mov	r1, r3
 800223e:	f003 fd63 	bl	8005d08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m->enablePins[1].gpioGroup, m->enablePins[1].gpioPin, 1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224a:	2201      	movs	r2, #1
 800224c:	4619      	mov	r1, r3
 800224e:	f003 fd5b 	bl	8005d08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(m->enablePins[2].gpioGroup, m->enablePins[2].gpioPin, 1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800225a:	2201      	movs	r2, #1
 800225c:	4619      	mov	r1, r3
 800225e:	f003 fd53 	bl	8005d08 <HAL_GPIO_WritePin>

    // Convert angle from degrees to radians
    float convAngle = m->angle * (pi / 180.0f);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8002268:	4be2      	ldr	r3, [pc, #904]	@ (80025f4 <MOTOR_FOCtask+0x3cc>)
 800226a:	edd3 6a00 	vldr	s13, [r3]
 800226e:	ed9f 6ae2 	vldr	s12, [pc, #904]	@ 80025f8 <MOTOR_FOCtask+0x3d0>
 8002272:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Clarke transform: Convert three-phase currents to two-phase alpha-beta
    m->a = (float)(m->iaDat);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    m->b = (0.577350267f * (float)(m->iaDat + 2.0f * m->ibDat));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8002294:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	ed9f 7ad7 	vldr	s14, [pc, #860]	@ 80025fc <MOTOR_FOCtask+0x3d4>
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98

    // Park transform: Convert alpha-beta currents to d-q frame
    m->id =  m->a * cos(convAngle) + m->b * sin(convAngle);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fa3f 	bl	8000734 <__aeabi_f2d>
 80022b6:	4604      	mov	r4, r0
 80022b8:	460d      	mov	r5, r1
 80022ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022bc:	f7fe fa3a 	bl	8000734 <__aeabi_f2d>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	ec43 2b10 	vmov	d0, r2, r3
 80022c8:	f007 fe72 	bl	8009fb0 <cos>
 80022cc:	ec53 2b10 	vmov	r2, r3, d0
 80022d0:	4620      	mov	r0, r4
 80022d2:	4629      	mov	r1, r5
 80022d4:	f7fd ffa0 	bl	8000218 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4690      	mov	r8, r2
 80022de:	4699      	mov	r9, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fa24 	bl	8000734 <__aeabi_f2d>
 80022ec:	4604      	mov	r4, r0
 80022ee:	460d      	mov	r5, r1
 80022f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022f2:	f7fe fa1f 	bl	8000734 <__aeabi_f2d>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	ec43 2b10 	vmov	d0, r2, r3
 80022fe:	f007 feab 	bl	800a058 <sin>
 8002302:	ec53 2b10 	vmov	r2, r3, d0
 8002306:	4620      	mov	r0, r4
 8002308:	4629      	mov	r1, r5
 800230a:	f7fd ff85 	bl	8000218 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4640      	mov	r0, r8
 8002314:	4649      	mov	r1, r9
 8002316:	f7fe f8af 	bl	8000478 <__adddf3>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f7fe fb2f 	bl	8000984 <__aeabi_d2f>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    m->iq = -m->a * sin(convAngle) + m->b * cos(convAngle);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002334:	eef1 7a67 	vneg.f32	s15, s15
 8002338:	ee17 3a90 	vmov	r3, s15
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f9f9 	bl	8000734 <__aeabi_f2d>
 8002342:	4604      	mov	r4, r0
 8002344:	460d      	mov	r5, r1
 8002346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002348:	f7fe f9f4 	bl	8000734 <__aeabi_f2d>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	ec43 2b10 	vmov	d0, r2, r3
 8002354:	f007 fe80 	bl	800a058 <sin>
 8002358:	ec53 2b10 	vmov	r2, r3, d0
 800235c:	4620      	mov	r0, r4
 800235e:	4629      	mov	r1, r5
 8002360:	f7fd ff5a 	bl	8000218 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4690      	mov	r8, r2
 800236a:	4699      	mov	r9, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f9de 	bl	8000734 <__aeabi_f2d>
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
 800237c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800237e:	f7fe f9d9 	bl	8000734 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	ec43 2b10 	vmov	d0, r2, r3
 800238a:	f007 fe11 	bl	8009fb0 <cos>
 800238e:	ec53 2b10 	vmov	r2, r3, d0
 8002392:	4620      	mov	r0, r4
 8002394:	4629      	mov	r1, r5
 8002396:	f7fd ff3f 	bl	8000218 <__aeabi_dmul>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4640      	mov	r0, r8
 80023a0:	4649      	mov	r1, r9
 80023a2:	f7fe f869 	bl	8000478 <__adddf3>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fae9 	bl	8000984 <__aeabi_d2f>
 80023b2:	4602      	mov	r2, r0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    // Current control: PI controllers for d and q currents
    float idErr =   0.0f - m->id;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80023c0:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8002624 <MOTOR_FOCtask+0x3fc>
 80023c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c8:	edc7 7a08 	vstr	s15, [r7, #32]
    float iqErr = fabs(m->iq) - (0.001f * (float)m->torqueLevel);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80023d2:	eeb0 7ae7 	vabs.f32	s14, s15
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e4:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8002600 <MOTOR_FOCtask+0x3d8>
 80023e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f0:	edc7 7a07 	vstr	s15, [r7, #28]
    float outSigID = m->id + (0.00000258f * idErr) + (0.0000002f * idSum);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 80023fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80023fe:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8002604 <MOTOR_FOCtask+0x3dc>
 8002402:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240a:	4b7f      	ldr	r3, [pc, #508]	@ (8002608 <MOTOR_FOCtask+0x3e0>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800260c <MOTOR_FOCtask+0x3e4>
 8002414:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241c:	edc7 7a06 	vstr	s15, [r7, #24]
    float outSigIQ = m->iq + (0.0000003f * iqErr) + (0.00000021f * iqSum);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 8002426:	edd7 7a07 	vldr	s15, [r7, #28]
 800242a:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002610 <MOTOR_FOCtask+0x3e8>
 800242e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002436:	4b77      	ldr	r3, [pc, #476]	@ (8002614 <MOTOR_FOCtask+0x3ec>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002618 <MOTOR_FOCtask+0x3f0>
 8002440:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002448:	edc7 7a05 	vstr	s15, [r7, #20]
    idSum += idErr;
 800244c:	4b6e      	ldr	r3, [pc, #440]	@ (8002608 <MOTOR_FOCtask+0x3e0>)
 800244e:	ed93 7a00 	vldr	s14, [r3]
 8002452:	edd7 7a08 	vldr	s15, [r7, #32]
 8002456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245a:	4b6b      	ldr	r3, [pc, #428]	@ (8002608 <MOTOR_FOCtask+0x3e0>)
 800245c:	edc3 7a00 	vstr	s15, [r3]
    iqSum += iqErr;
 8002460:	4b6c      	ldr	r3, [pc, #432]	@ (8002614 <MOTOR_FOCtask+0x3ec>)
 8002462:	ed93 7a00 	vldr	s14, [r3]
 8002466:	edd7 7a07 	vldr	s15, [r7, #28]
 800246a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246e:	4b69      	ldr	r3, [pc, #420]	@ (8002614 <MOTOR_FOCtask+0x3ec>)
 8002470:	edc3 7a00 	vstr	s15, [r3]

    // Inverse Park transform: Convert d-q voltages back to alpha-beta
    m->newa = (cos(convAngle) * outSigID - sin(convAngle) * outSigIQ) * motorVoltage;
 8002474:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002476:	f7fe f95d 	bl	8000734 <__aeabi_f2d>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	ec43 2b10 	vmov	d0, r2, r3
 8002482:	f007 fd95 	bl	8009fb0 <cos>
 8002486:	ec55 4b10 	vmov	r4, r5, d0
 800248a:	69b8      	ldr	r0, [r7, #24]
 800248c:	f7fe f952 	bl	8000734 <__aeabi_f2d>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4620      	mov	r0, r4
 8002496:	4629      	mov	r1, r5
 8002498:	f7fd febe 	bl	8000218 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4614      	mov	r4, r2
 80024a2:	461d      	mov	r5, r3
 80024a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024a6:	f7fe f945 	bl	8000734 <__aeabi_f2d>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	ec43 2b10 	vmov	d0, r2, r3
 80024b2:	f007 fdd1 	bl	800a058 <sin>
 80024b6:	ec59 8b10 	vmov	r8, r9, d0
 80024ba:	6978      	ldr	r0, [r7, #20]
 80024bc:	f7fe f93a 	bl	8000734 <__aeabi_f2d>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4640      	mov	r0, r8
 80024c6:	4649      	mov	r1, r9
 80024c8:	f7fd fea6 	bl	8000218 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fd ffce 	bl	8000474 <__aeabi_dsub>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4614      	mov	r4, r2
 80024de:	461d      	mov	r5, r3
 80024e0:	4b4e      	ldr	r3, [pc, #312]	@ (800261c <MOTOR_FOCtask+0x3f4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f925 	bl	8000734 <__aeabi_f2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fd fe91 	bl	8000218 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7fe fa41 	bl	8000984 <__aeabi_d2f>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    m->newb = (sin(convAngle) * outSigID + cos(convAngle) * outSigIQ) * motorVoltage;
 800250a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800250c:	f7fe f912 	bl	8000734 <__aeabi_f2d>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	ec43 2b10 	vmov	d0, r2, r3
 8002518:	f007 fd9e 	bl	800a058 <sin>
 800251c:	ec55 4b10 	vmov	r4, r5, d0
 8002520:	69b8      	ldr	r0, [r7, #24]
 8002522:	f7fe f907 	bl	8000734 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4620      	mov	r0, r4
 800252c:	4629      	mov	r1, r5
 800252e:	f7fd fe73 	bl	8000218 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4614      	mov	r4, r2
 8002538:	461d      	mov	r5, r3
 800253a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800253c:	f7fe f8fa 	bl	8000734 <__aeabi_f2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	ec43 2b10 	vmov	d0, r2, r3
 8002548:	f007 fd32 	bl	8009fb0 <cos>
 800254c:	ec59 8b10 	vmov	r8, r9, d0
 8002550:	6978      	ldr	r0, [r7, #20]
 8002552:	f7fe f8ef 	bl	8000734 <__aeabi_f2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4640      	mov	r0, r8
 800255c:	4649      	mov	r1, r9
 800255e:	f7fd fe5b 	bl	8000218 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4620      	mov	r0, r4
 8002568:	4629      	mov	r1, r5
 800256a:	f7fd ff85 	bl	8000478 <__adddf3>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4614      	mov	r4, r2
 8002574:	461d      	mov	r5, r3
 8002576:	4b29      	ldr	r3, [pc, #164]	@ (800261c <MOTOR_FOCtask+0x3f4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe f8da 	bl	8000734 <__aeabi_f2d>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4620      	mov	r0, r4
 8002586:	4629      	mov	r1, r5
 8002588:	f7fd fe46 	bl	8000218 <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe f9f6 	bl	8000984 <__aeabi_d2f>
 8002598:	4602      	mov	r2, r0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    float tempU, tempV, tempW;

    // Space Vector PWM modulation
    svpwm(m, m->newa, m->newb, &tempU, &tempV, &tempW);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	f107 020c 	add.w	r2, r7, #12
 80025b4:	f107 0110 	add.w	r1, r7, #16
 80025b8:	eef0 0a47 	vmov.f32	s1, s14
 80025bc:	eeb0 0a67 	vmov.f32	s0, s15
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f8cb 	bl	800275c <svpwm>

    // Limit duty cycles to valid range [0, 0.577]
    tempU = fmaxf(0.0f, fminf(tempU, 0.577f));
 80025c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80025ca:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8002620 <MOTOR_FOCtask+0x3f8>
 80025ce:	eeb0 0a67 	vmov.f32	s0, s15
 80025d2:	f007 fe16 	bl	800a202 <fminf>
 80025d6:	eef0 7a40 	vmov.f32	s15, s0
 80025da:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8002624 <MOTOR_FOCtask+0x3fc>
 80025de:	eeb0 0a67 	vmov.f32	s0, s15
 80025e2:	f007 fdf1 	bl	800a1c8 <fmaxf>
 80025e6:	eef0 7a40 	vmov.f32	s15, s0
 80025ea:	edc7 7a04 	vstr	s15, [r7, #16]
    tempV = fmaxf(0.0f, fminf(tempV, 0.577f));
 80025ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f2:	e01b      	b.n	800262c <MOTOR_FOCtask+0x404>
 80025f4:	20000048 	.word	0x20000048
 80025f8:	43340000 	.word	0x43340000
 80025fc:	3f13cd3a 	.word	0x3f13cd3a
 8002600:	3a83126f 	.word	0x3a83126f
 8002604:	362d2410 	.word	0x362d2410
 8002608:	20000ad8 	.word	0x20000ad8
 800260c:	3456bf95 	.word	0x3456bf95
 8002610:	34a10fb0 	.word	0x34a10fb0
 8002614:	20000adc 	.word	0x20000adc
 8002618:	34617c5c 	.word	0x34617c5c
 800261c:	20000044 	.word	0x20000044
 8002620:	3f13b646 	.word	0x3f13b646
 8002624:	00000000 	.word	0x00000000
 8002628:	443f4000 	.word	0x443f4000
 800262c:	ed5f 0a04 	vldr	s1, [pc, #-16]	@ 8002620 <MOTOR_FOCtask+0x3f8>
 8002630:	eeb0 0a67 	vmov.f32	s0, s15
 8002634:	f007 fde5 	bl	800a202 <fminf>
 8002638:	eef0 7a40 	vmov.f32	s15, s0
 800263c:	ed5f 0a07 	vldr	s1, [pc, #-28]	@ 8002624 <MOTOR_FOCtask+0x3fc>
 8002640:	eeb0 0a67 	vmov.f32	s0, s15
 8002644:	f007 fdc0 	bl	800a1c8 <fmaxf>
 8002648:	eef0 7a40 	vmov.f32	s15, s0
 800264c:	edc7 7a03 	vstr	s15, [r7, #12]
    tempW = fmaxf(0.0f, fminf(tempW, 0.577f));
 8002650:	edd7 7a02 	vldr	s15, [r7, #8]
 8002654:	ed5f 0a0e 	vldr	s1, [pc, #-56]	@ 8002620 <MOTOR_FOCtask+0x3f8>
 8002658:	eeb0 0a67 	vmov.f32	s0, s15
 800265c:	f007 fdd1 	bl	800a202 <fminf>
 8002660:	eef0 7a40 	vmov.f32	s15, s0
 8002664:	ed5f 0a11 	vldr	s1, [pc, #-68]	@ 8002624 <MOTOR_FOCtask+0x3fc>
 8002668:	eeb0 0a67 	vmov.f32	s0, s15
 800266c:	f007 fdac 	bl	800a1c8 <fmaxf>
 8002670:	eef0 7a40 	vmov.f32	s15, s0
 8002674:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate final duty cycles
    m->U_dutyCycle = tempU * m->dutyCycle;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 800267e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
    m->V_dutyCycle = tempV * m->dutyCycle;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8002692:	edd7 7a03 	vldr	s15, [r7, #12]
 8002696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
    m->W_dutyCycle = tempW * m->dutyCycle;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80026a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

    // Update PWM compare registers
    m->pwm->Instance->CCR1 = round(ARR * m->U_dutyCycle);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 80026ba:	ed1f 7a25 	vldr	s14, [pc, #-148]	@ 8002628 <MOTOR_FOCtask+0x400>
 80026be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c2:	ee17 0a90 	vmov	r0, s15
 80026c6:	f7fe f835 	bl	8000734 <__aeabi_f2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ec43 2b10 	vmov	d0, r2, r3
 80026d2:	f007 fdd3 	bl	800a27c <round>
 80026d6:	ec51 0b10 	vmov	r0, r1, d0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681c      	ldr	r4, [r3, #0]
 80026e0:	f7fe f930 	bl	8000944 <__aeabi_d2uiz>
 80026e4:	4603      	mov	r3, r0
 80026e6:	6363      	str	r3, [r4, #52]	@ 0x34
    m->pwm->Instance->CCR4 = round(ARR * m->V_dutyCycle);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80026ee:	ed1f 7a32 	vldr	s14, [pc, #-200]	@ 8002628 <MOTOR_FOCtask+0x400>
 80026f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f6:	ee17 0a90 	vmov	r0, s15
 80026fa:	f7fe f81b 	bl	8000734 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	ec43 2b10 	vmov	d0, r2, r3
 8002706:	f007 fdb9 	bl	800a27c <round>
 800270a:	ec51 0b10 	vmov	r0, r1, d0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681c      	ldr	r4, [r3, #0]
 8002714:	f7fe f916 	bl	8000944 <__aeabi_d2uiz>
 8002718:	4603      	mov	r3, r0
 800271a:	6423      	str	r3, [r4, #64]	@ 0x40
    m->pwm->Instance->CCR3 = round(ARR * m->W_dutyCycle);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002722:	ed1f 7a3f 	vldr	s14, [pc, #-252]	@ 8002628 <MOTOR_FOCtask+0x400>
 8002726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272a:	ee17 0a90 	vmov	r0, s15
 800272e:	f7fe f801 	bl	8000734 <__aeabi_f2d>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	ec43 2b10 	vmov	d0, r2, r3
 800273a:	f007 fd9f 	bl	800a27c <round>
 800273e:	ec51 0b10 	vmov	r0, r1, d0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681c      	ldr	r4, [r3, #0]
 8002748:	f7fe f8fc 	bl	8000944 <__aeabi_d2uiz>
 800274c:	4603      	mov	r3, r0
 800274e:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8002750:	bf00      	nop
 8002752:	3728      	adds	r7, #40	@ 0x28
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800275a:	bf00      	nop

0800275c <svpwm>:

void svpwm(motor_t * m, float V_alpha, float V_beta, float* D_a, float* D_b, float* D_c) {
 800275c:	b580      	push	{r7, lr}
 800275e:	ed2d 8b02 	vpush	{d8}
 8002762:	b08a      	sub	sp, #40	@ 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6178      	str	r0, [r7, #20]
 8002768:	ed87 0a04 	vstr	s0, [r7, #16]
 800276c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
    // Calculate the magnitude of the voltage vector
    m->V_magnitude = sqrtf(V_alpha * V_alpha + V_beta * V_beta);
 8002776:	edd7 7a04 	vldr	s15, [r7, #16]
 800277a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800277e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002782:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	eeb0 0a67 	vmov.f32	s0, s15
 800278e:	f007 fcb9 	bl	800a104 <sqrtf>
 8002792:	eef0 7a40 	vmov.f32	s15, s0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88

    // Calculate flux angle and convert to degrees
    m->fluxAngle = atan2f(V_beta, V_alpha);
 800279c:	edd7 0a04 	vldr	s1, [r7, #16]
 80027a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80027a4:	f007 fcac 	bl	800a100 <atan2f>
 80027a8:	eef0 7a40 	vmov.f32	s15, s0
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
    m->convFlux = m->fluxAngle * 180.0f / pi;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80027b8:	ed9f 7adf 	vldr	s14, [pc, #892]	@ 8002b38 <svpwm+0x3dc>
 80027bc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027c0:	4bd9      	ldr	r3, [pc, #868]	@ (8002b28 <svpwm+0x3cc>)
 80027c2:	ed93 7a00 	vldr	s14, [r3]
 80027c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

    float convAngle = m->angle * pi / 180.0f;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80027d6:	4bd4      	ldr	r3, [pc, #848]	@ (8002b28 <svpwm+0x3cc>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e0:	eddf 6ad5 	vldr	s13, [pc, #852]	@ 8002b38 <svpwm+0x3dc>
 80027e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027e8:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate switching times T1 and T2 based on sector
    float T1, T2;
    if (m->angle < 60.0f) {
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80027f2:	ed9f 7acf 	vldr	s14, [pc, #828]	@ 8002b30 <svpwm+0x3d4>
 80027f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	d525      	bpl.n	800284c <svpwm+0xf0>
        T1 = m->V_magnitude  * cosf(convAngle);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 8002806:	ed97 0a07 	vldr	s0, [r7, #28]
 800280a:	f007 fc99 	bl	800a140 <cosf>
 800280e:	eef0 7a40 	vmov.f32	s15, s0
 8002812:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002816:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((pi / 3.0f) - convAngle);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 8002820:	4bc1      	ldr	r3, [pc, #772]	@ (8002b28 <svpwm+0x3cc>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800282a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800282e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002836:	eeb0 0a67 	vmov.f32	s0, s15
 800283a:	f007 fc81 	bl	800a140 <cosf>
 800283e:	eef0 7a40 	vmov.f32	s15, s0
 8002842:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002846:	edc7 7a08 	vstr	s15, [r7, #32]
 800284a:	e129      	b.n	8002aa0 <svpwm+0x344>
    } else if (m->angle < 120.0f) {
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002852:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002b34 <svpwm+0x3d8>
 8002856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285e:	d532      	bpl.n	80028c6 <svpwm+0x16a>
        T1 = m->V_magnitude  * cosf(convAngle - pi / 3.0f);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 8002866:	4bb0      	ldr	r3, [pc, #704]	@ (8002b28 <svpwm+0x3cc>)
 8002868:	ed93 7a00 	vldr	s14, [r3]
 800286c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002874:	ed97 7a07 	vldr	s14, [r7, #28]
 8002878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287c:	eeb0 0a67 	vmov.f32	s0, s15
 8002880:	f007 fc5e 	bl	800a140 <cosf>
 8002884:	eef0 7a40 	vmov.f32	s15, s0
 8002888:	ee68 7a27 	vmul.f32	s15, s16, s15
 800288c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((2.0f * pi / 3.0f) - convAngle);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 8002896:	4ba4      	ldr	r3, [pc, #656]	@ (8002b28 <svpwm+0x3cc>)
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028a0:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80028a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b0:	eeb0 0a67 	vmov.f32	s0, s15
 80028b4:	f007 fc44 	bl	800a140 <cosf>
 80028b8:	eef0 7a40 	vmov.f32	s15, s0
 80028bc:	ee68 7a27 	vmul.f32	s15, s16, s15
 80028c0:	edc7 7a08 	vstr	s15, [r7, #32]
 80028c4:	e0ec      	b.n	8002aa0 <svpwm+0x344>
    } else if (m->angle < 180.0f) {
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80028cc:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002b38 <svpwm+0x3dc>
 80028d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	d532      	bpl.n	8002940 <svpwm+0x1e4>
        T1 = m->V_magnitude  * cosf(convAngle - 2.0f * pi / 3.0f);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 80028e0:	4b91      	ldr	r3, [pc, #580]	@ (8002b28 <svpwm+0x3cc>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80028ea:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80028ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80028f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fa:	eeb0 0a67 	vmov.f32	s0, s15
 80028fe:	f007 fc1f 	bl	800a140 <cosf>
 8002902:	eef0 7a40 	vmov.f32	s15, s0
 8002906:	ee68 7a27 	vmul.f32	s15, s16, s15
 800290a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((pi / 3.0f) - convAngle);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 8002914:	4b84      	ldr	r3, [pc, #528]	@ (8002b28 <svpwm+0x3cc>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800291e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002922:	edd7 7a07 	vldr	s15, [r7, #28]
 8002926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292a:	eeb0 0a67 	vmov.f32	s0, s15
 800292e:	f007 fc07 	bl	800a140 <cosf>
 8002932:	eef0 7a40 	vmov.f32	s15, s0
 8002936:	ee68 7a27 	vmul.f32	s15, s16, s15
 800293a:	edc7 7a08 	vstr	s15, [r7, #32]
 800293e:	e0af      	b.n	8002aa0 <svpwm+0x344>
    } else if (m->angle < 240.0f) {
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002946:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002b3c <svpwm+0x3e0>
 800294a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	d530      	bpl.n	80029b6 <svpwm+0x25a>
        T1 = m->V_magnitude  * cosf(convAngle - pi);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 800295a:	4b73      	ldr	r3, [pc, #460]	@ (8002b28 <svpwm+0x3cc>)
 800295c:	edd3 7a00 	vldr	s15, [r3]
 8002960:	ed97 7a07 	vldr	s14, [r7, #28]
 8002964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002968:	eeb0 0a67 	vmov.f32	s0, s15
 800296c:	f007 fbe8 	bl	800a140 <cosf>
 8002970:	eef0 7a40 	vmov.f32	s15, s0
 8002974:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002978:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((4.0f * pi / 3.0f) - convAngle);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 8002982:	4b69      	ldr	r3, [pc, #420]	@ (8002b28 <svpwm+0x3cc>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800298c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002990:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002994:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002998:	edd7 7a07 	vldr	s15, [r7, #28]
 800299c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a0:	eeb0 0a67 	vmov.f32	s0, s15
 80029a4:	f007 fbcc 	bl	800a140 <cosf>
 80029a8:	eef0 7a40 	vmov.f32	s15, s0
 80029ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 80029b0:	edc7 7a08 	vstr	s15, [r7, #32]
 80029b4:	e074      	b.n	8002aa0 <svpwm+0x344>
    } else if (m->angle < 300.0f) {
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80029bc:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002b2c <svpwm+0x3d0>
 80029c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c8:	d538      	bpl.n	8002a3c <svpwm+0x2e0>
        T1 = m->V_magnitude  * cosf(convAngle - 4.0f * pi / 3.0f);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 80029d0:	4b55      	ldr	r3, [pc, #340]	@ (8002b28 <svpwm+0x3cc>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80029da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029de:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80029e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80029ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ee:	eeb0 0a67 	vmov.f32	s0, s15
 80029f2:	f007 fba5 	bl	800a140 <cosf>
 80029f6:	eef0 7a40 	vmov.f32	s15, s0
 80029fa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80029fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((5.0f * pi / 3.0f) - convAngle);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 8002a08:	4b47      	ldr	r3, [pc, #284]	@ (8002b28 <svpwm+0x3cc>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a16:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002a1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a26:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2a:	f007 fb89 	bl	800a140 <cosf>
 8002a2e:	eef0 7a40 	vmov.f32	s15, s0
 8002a32:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002a36:	edc7 7a08 	vstr	s15, [r7, #32]
 8002a3a:	e031      	b.n	8002aa0 <svpwm+0x344>
    } else {
        T1 = m->V_magnitude  * cosf(convAngle - 5.0f * pi / 3.0f);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 8002a42:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <svpwm+0x3cc>)
 8002a44:	edd3 7a00 	vldr	s15, [r3]
 8002a48:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002a4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a50:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a58:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a60:	eeb0 0a67 	vmov.f32	s0, s15
 8002a64:	f007 fb6c 	bl	800a140 <cosf>
 8002a68:	eef0 7a40 	vmov.f32	s15, s0
 8002a6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002a70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        T2 = m->V_magnitude  * cosf((2.0f * pi) - convAngle);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	ed93 8a22 	vldr	s16, [r3, #136]	@ 0x88
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <svpwm+0x3cc>)
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a84:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a90:	f007 fb56 	bl	800a140 <cosf>
 8002a94:	eef0 7a40 	vmov.f32	s15, s0
 8002a98:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002a9c:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    // Calculate T0 (zero vector time)
    float T0 = 1.0f - T1 - T2;
 8002aa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002aa4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002aa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aac:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab4:	edc7 7a06 	vstr	s15, [r7, #24]

    if(m->dir){
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 812e 	beq.w	8002d20 <svpwm+0x5c4>
		// Calculate duty cycles based on sector
		if (m->angle < 60.0f) {
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002aca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002b30 <svpwm+0x3d4>
 8002ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	d533      	bpl.n	8002b40 <svpwm+0x3e4>
			*D_a = (T1 + T2 + T0) / 2.0f;
 8002ad8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002adc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T2 + T0) / 2.0f;
 8002afa:	ed97 7a08 	vldr	s14, [r7, #32]
 8002afe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b06:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	edc3 7a00 	vstr	s15, [r3]
			*D_c = T0 / 2.0f;
 8002b14:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b18:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002b1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
			*D_c = (T2 + T0) / 2.0f;

		}
    }
}
 8002b26:	e21c      	b.n	8002f62 <svpwm+0x806>
 8002b28:	20000048 	.word	0x20000048
 8002b2c:	43960000 	.word	0x43960000
 8002b30:	42700000 	.word	0x42700000
 8002b34:	42f00000 	.word	0x42f00000
 8002b38:	43340000 	.word	0x43340000
 8002b3c:	43700000 	.word	0x43700000
		} else if (m->angle < 120.0f) {
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002b46:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8002b34 <svpwm+0x3d8>
 8002b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	d527      	bpl.n	8002ba4 <svpwm+0x448>
			*D_a = (T1 + T0) / 2.0f;
 8002b54:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002b58:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
 8002b6e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002b72:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b82:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	edc3 7a00 	vstr	s15, [r3]
			*D_c = T0 / 2.0f;
 8002b90:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b94:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
}
 8002ba2:	e1de      	b.n	8002f62 <svpwm+0x806>
		} else if (m->angle < 180.0f) {
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002baa:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 8002b38 <svpwm+0x3dc>
 8002bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d527      	bpl.n	8002c08 <svpwm+0x4ac>
			*D_a = T0 / 2.0f;
 8002bb8:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bbc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
 8002bca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002bce:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bde:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T2 + T0) / 2.0f;
 8002bec:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	edc3 7a00 	vstr	s15, [r3]
}
 8002c06:	e1ac      	b.n	8002f62 <svpwm+0x806>
		} else if (m->angle < 240.0f) {
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002c0e:	ed1f 7a35 	vldr	s14, [pc, #-212]	@ 8002b3c <svpwm+0x3e0>
 8002c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d527      	bpl.n	8002c6c <svpwm+0x510>
			*D_a = T0 / 2.0f;
 8002c1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c20:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T0) / 2.0f;
 8002c2e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002c32:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c3a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T2 + T0) / 2.0f;
 8002c48:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002c4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c54:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c5c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	edc3 7a00 	vstr	s15, [r3]
}
 8002c6a:	e17a      	b.n	8002f62 <svpwm+0x806>
		} else if (m->angle < 300.0f) {
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002c72:	ed1f 7a52 	vldr	s14, [pc, #-328]	@ 8002b2c <svpwm+0x3d0>
 8002c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	d527      	bpl.n	8002cd0 <svpwm+0x574>
			*D_a = (T2 + T0) / 2.0f;
 8002c80:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c84:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	edc3 7a00 	vstr	s15, [r3]
			*D_b = T0 / 2.0f;
 8002c9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c9e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T2 + T0) / 2.0f;
 8002cac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002cb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	edc3 7a00 	vstr	s15, [r3]
}
 8002cce:	e148      	b.n	8002f62 <svpwm+0x806>
			*D_a = (T1 + T2 + T0) / 2.0f;
 8002cd0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002cd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	edc3 7a00 	vstr	s15, [r3]
			*D_b = T0 / 2.0f;
 8002cf2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cf6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T0) / 2.0f;
 8002d04:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d10:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	edc3 7a00 	vstr	s15, [r3]
}
 8002d1e:	e120      	b.n	8002f62 <svpwm+0x806>
		if (m->angle < 60.0f) {
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002d26:	ed1f 7a7e 	vldr	s14, [pc, #-504]	@ 8002b30 <svpwm+0x3d4>
 8002d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d32:	d527      	bpl.n	8002d84 <svpwm+0x628>
			*D_a = T0 / 2.0f;
 8002d34:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d38:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T0) / 2.0f;
 8002d46:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d52:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T2 + T0) / 2.0f;
 8002d60:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d64:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d74:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	edc3 7a00 	vstr	s15, [r3]
}
 8002d82:	e0ee      	b.n	8002f62 <svpwm+0x806>
		} else if (m->angle < 120.0f) {
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002d8a:	ed1f 7a96 	vldr	s14, [pc, #-600]	@ 8002b34 <svpwm+0x3d8>
 8002d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d96:	d527      	bpl.n	8002de8 <svpwm+0x68c>
			*D_a = (T2 + T0) / 2.0f;
 8002d98:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002da0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002da4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	edc3 7a00 	vstr	s15, [r3]
			*D_b = T0 / 2.0f;
 8002db2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002db6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T2 + T0) / 2.0f;
 8002dc4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002dc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	edc3 7a00 	vstr	s15, [r3]
}
 8002de6:	e0bc      	b.n	8002f62 <svpwm+0x806>
		} else if (m->angle < 180.0f) {
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002dee:	ed1f 7aae 	vldr	s14, [pc, #-696]	@ 8002b38 <svpwm+0x3dc>
 8002df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfa:	d527      	bpl.n	8002e4c <svpwm+0x6f0>
			*D_a = (T1 + T2 + T0) / 2.0f;
 8002dfc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e00:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e10:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	edc3 7a00 	vstr	s15, [r3]
			*D_b = T0 / 2.0f;
 8002e1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e22:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T1 + T0) / 2.0f;
 8002e30:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e34:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	edc3 7a00 	vstr	s15, [r3]
}
 8002e4a:	e08a      	b.n	8002f62 <svpwm+0x806>
		} else if (m->angle < 240.0f) {
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002e52:	ed1f 7ac6 	vldr	s14, [pc, #-792]	@ 8002b3c <svpwm+0x3e0>
 8002e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	d527      	bpl.n	8002eb0 <svpwm+0x754>
			*D_a = (T1 + T2 + T0) / 2.0f;
 8002e60:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e64:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e74:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T2 + T0) / 2.0f;
 8002e82:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e8e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edc3 7a00 	vstr	s15, [r3]
			*D_c = T0 / 2.0f;
 8002e9c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ea0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ea4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	edc3 7a00 	vstr	s15, [r3]
}
 8002eae:	e058      	b.n	8002f62 <svpwm+0x806>
		} else if (m->angle < 300.0f) {
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002eb6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002f70 <svpwm+0x814>
 8002eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec2:	d527      	bpl.n	8002f14 <svpwm+0x7b8>
			*D_a = (T1 + T0) / 2.0f;
 8002ec4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002ec8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
 8002ede:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002ee2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ee6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eea:	edd7 7a06 	vldr	s15, [r7, #24]
 8002eee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	edc3 7a00 	vstr	s15, [r3]
			*D_c = T0 / 2.0f;
 8002f00:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f04:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	edc3 7a00 	vstr	s15, [r3]
}
 8002f12:	e026      	b.n	8002f62 <svpwm+0x806>
			*D_a = T0 / 2.0f;
 8002f14:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f18:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	edc3 7a00 	vstr	s15, [r3]
			*D_b = (T1 + T2 + T0) / 2.0f;
 8002f26:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f32:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	edc3 7a00 	vstr	s15, [r3]
			*D_c = (T2 + T0) / 2.0f;
 8002f48:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f54:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
}
 8002f62:	bf00      	nop
 8002f64:	3728      	adds	r7, #40	@ 0x28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	ecbd 8b02 	vpop	{d8}
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	43960000 	.word	0x43960000

08002f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb8 <HAL_MspInit+0x44>)
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb8 <HAL_MspInit+0x44>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f86:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <HAL_MspInit+0x44>)
 8002f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <HAL_MspInit+0x44>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	4a08      	ldr	r2, [pc, #32]	@ (8002fb8 <HAL_MspInit+0x44>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_MspInit+0x44>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002faa:	f002 ff81 	bl	8005eb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000

08002fbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b09c      	sub	sp, #112	@ 0x70
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fd4:	f107 0318 	add.w	r3, r7, #24
 8002fd8:	2244      	movs	r2, #68	@ 0x44
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f006 ffb3 	bl	8009f48 <memset>
  if(hadc->Instance==ADC1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fea:	d169      	bne.n	80030c0 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002ff2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002ff6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff8:	f107 0318 	add.w	r3, r7, #24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 fc95 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003008:	f7fe feee 	bl	8001de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800300c:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <HAL_ADC_MspInit+0x194>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	4a4f      	ldr	r2, [pc, #316]	@ (8003150 <HAL_ADC_MspInit+0x194>)
 8003014:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003016:	4b4e      	ldr	r3, [pc, #312]	@ (8003150 <HAL_ADC_MspInit+0x194>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10b      	bne.n	8003036 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800301e:	4b4d      	ldr	r3, [pc, #308]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	4a4c      	ldr	r2, [pc, #304]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 8003024:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800302a:	4b4a      	ldr	r3, [pc, #296]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003036:	4b47      	ldr	r3, [pc, #284]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 8003038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303a:	4a46      	ldr	r2, [pc, #280]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003042:	4b44      	ldr	r3, [pc, #272]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 8003044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 800304e:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 8003052:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003054:	2303      	movs	r3, #3
 8003056:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003060:	4619      	mov	r1, r3
 8003062:	483d      	ldr	r0, [pc, #244]	@ (8003158 <HAL_ADC_MspInit+0x19c>)
 8003064:	f002 fcb6 	bl	80059d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003068:	4b3c      	ldr	r3, [pc, #240]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 800306a:	4a3d      	ldr	r2, [pc, #244]	@ (8003160 <HAL_ADC_MspInit+0x1a4>)
 800306c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800306e:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 8003070:	2205      	movs	r2, #5
 8003072:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003074:	4b39      	ldr	r3, [pc, #228]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800307a:	4b38      	ldr	r3, [pc, #224]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 800307c:	2200      	movs	r2, #0
 800307e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003080:	4b36      	ldr	r3, [pc, #216]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 8003082:	2280      	movs	r2, #128	@ 0x80
 8003084:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003086:	4b35      	ldr	r3, [pc, #212]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 8003088:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800308c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800308e:	4b33      	ldr	r3, [pc, #204]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 8003090:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003094:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003096:	4b31      	ldr	r3, [pc, #196]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 8003098:	2220      	movs	r2, #32
 800309a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800309c:	4b2f      	ldr	r3, [pc, #188]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 800309e:	2200      	movs	r2, #0
 80030a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030a2:	482e      	ldr	r0, [pc, #184]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 80030a4:	f002 fa24 	bl	80054f0 <HAL_DMA_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80030ae:	f7fe fe9b 	bl	8001de8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a29      	ldr	r2, [pc, #164]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80030b8:	4a28      	ldr	r2, [pc, #160]	@ (800315c <HAL_ADC_MspInit+0x1a0>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80030be:	e042      	b.n	8003146 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a27      	ldr	r2, [pc, #156]	@ (8003164 <HAL_ADC_MspInit+0x1a8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d13d      	bne.n	8003146 <HAL_ADC_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80030ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80030d0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80030d4:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030d6:	f107 0318 	add.w	r3, r7, #24
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fc26 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 80030e6:	f7fe fe7f 	bl	8001de8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80030ea:	4b19      	ldr	r3, [pc, #100]	@ (8003150 <HAL_ADC_MspInit+0x194>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <HAL_ADC_MspInit+0x194>)
 80030f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80030f4:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <HAL_ADC_MspInit+0x194>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10b      	bne.n	8003114 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80030fc:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 80030fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003100:	4a14      	ldr	r2, [pc, #80]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 8003102:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 800310a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003114:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 8003116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003118:	4a0e      	ldr	r2, [pc, #56]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003120:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <HAL_ADC_MspInit+0x198>)
 8003122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800312c:	2303      	movs	r3, #3
 800312e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003130:	2303      	movs	r3, #3
 8003132:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003138:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800313c:	4619      	mov	r1, r3
 800313e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003142:	f002 fc47 	bl	80059d4 <HAL_GPIO_Init>
}
 8003146:	bf00      	nop
 8003148:	3770      	adds	r7, #112	@ 0x70
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000ae4 	.word	0x20000ae4
 8003154:	40021000 	.word	0x40021000
 8003158:	48000400 	.word	0x48000400
 800315c:	20000654 	.word	0x20000654
 8003160:	40020008 	.word	0x40020008
 8003164:	50000100 	.word	0x50000100

08003168 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 030c 	add.w	r3, r7, #12
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a18      	ldr	r2, [pc, #96]	@ (80031e8 <HAL_COMP_MspInit+0x80>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d129      	bne.n	80031de <HAL_COMP_MspInit+0x76>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	4b18      	ldr	r3, [pc, #96]	@ (80031ec <HAL_COMP_MspInit+0x84>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	4a17      	ldr	r2, [pc, #92]	@ (80031ec <HAL_COMP_MspInit+0x84>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003196:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <HAL_COMP_MspInit+0x84>)
 8003198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PA2     ------> COMP2_OUT
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031a2:	2304      	movs	r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP2;
 80031b2:	2308      	movs	r3, #8
 80031b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b6:	f107 030c 	add.w	r3, r7, #12
 80031ba:	4619      	mov	r1, r3
 80031bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031c0:	f002 fc08 	bl	80059d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031c4:	2380      	movs	r3, #128	@ 0x80
 80031c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c8:	2303      	movs	r3, #3
 80031ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	4619      	mov	r1, r3
 80031d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031da:	f002 fbfb 	bl	80059d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80031de:	bf00      	nop
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40010204 	.word	0x40010204
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08e      	sub	sp, #56	@ 0x38
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a4b      	ldr	r2, [pc, #300]	@ (800333c <HAL_SPI_MspInit+0x14c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d145      	bne.n	800329e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003212:	4b4b      	ldr	r3, [pc, #300]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 8003214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003216:	4a4a      	ldr	r2, [pc, #296]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 8003218:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800321c:	6613      	str	r3, [r2, #96]	@ 0x60
 800321e:	4b48      	ldr	r3, [pc, #288]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 8003220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003222:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003226:	623b      	str	r3, [r7, #32]
 8003228:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	4b45      	ldr	r3, [pc, #276]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322e:	4a44      	ldr	r2, [pc, #272]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003236:	4b42      	ldr	r3, [pc, #264]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003242:	4b3f      	ldr	r3, [pc, #252]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003246:	4a3e      	ldr	r2, [pc, #248]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800324e:	4b3c      	ldr	r3, [pc, #240]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800325a:	2360      	movs	r3, #96	@ 0x60
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	2302      	movs	r3, #2
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800326a:	2305      	movs	r3, #5
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003272:	4619      	mov	r1, r3
 8003274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003278:	f002 fbac 	bl	80059d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800327c:	2320      	movs	r3, #32
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	2300      	movs	r3, #0
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800328c:	2305      	movs	r3, #5
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003294:	4619      	mov	r1, r3
 8003296:	482b      	ldr	r0, [pc, #172]	@ (8003344 <HAL_SPI_MspInit+0x154>)
 8003298:	f002 fb9c 	bl	80059d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800329c:	e049      	b.n	8003332 <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a29      	ldr	r2, [pc, #164]	@ (8003348 <HAL_SPI_MspInit+0x158>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d144      	bne.n	8003332 <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032a8:	4b25      	ldr	r3, [pc, #148]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	4a24      	ldr	r2, [pc, #144]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b4:	4b22      	ldr	r3, [pc, #136]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 80032ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d8:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032dc:	4a18      	ldr	r2, [pc, #96]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 80032de:	f043 0302 	orr.w	r3, r3, #2
 80032e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032e4:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <HAL_SPI_MspInit+0x150>)
 80032e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	2300      	movs	r3, #0
 8003300:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003302:	2306      	movs	r3, #6
 8003304:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800330a:	4619      	mov	r1, r3
 800330c:	480f      	ldr	r0, [pc, #60]	@ (800334c <HAL_SPI_MspInit+0x15c>)
 800330e:	f002 fb61 	bl	80059d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003312:	2310      	movs	r3, #16
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003322:	2306      	movs	r3, #6
 8003324:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800332a:	4619      	mov	r1, r3
 800332c:	4805      	ldr	r0, [pc, #20]	@ (8003344 <HAL_SPI_MspInit+0x154>)
 800332e:	f002 fb51 	bl	80059d4 <HAL_GPIO_Init>
}
 8003332:	bf00      	nop
 8003334:	3738      	adds	r7, #56	@ 0x38
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40013000 	.word	0x40013000
 8003340:	40021000 	.word	0x40021000
 8003344:	48000400 	.word	0x48000400
 8003348:	40003c00 	.word	0x40003c00
 800334c:	48000800 	.word	0x48000800

08003350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a30      	ldr	r2, [pc, #192]	@ (8003420 <HAL_TIM_Base_MspInit+0xd0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d114      	bne.n	800338c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003362:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 8003364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003366:	4a2f      	ldr	r2, [pc, #188]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 8003368:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800336c:	6613      	str	r3, [r2, #96]	@ 0x60
 800336e:	4b2d      	ldr	r3, [pc, #180]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 8003370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	201a      	movs	r0, #26
 8003380:	f002 f881 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003384:	201a      	movs	r0, #26
 8003386:	f002 f898 	bl	80054ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800338a:	e044      	b.n	8003416 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a25      	ldr	r2, [pc, #148]	@ (8003428 <HAL_TIM_Base_MspInit+0xd8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d114      	bne.n	80033c0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003396:	4b23      	ldr	r3, [pc, #140]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339a:	4a22      	ldr	r2, [pc, #136]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a2:	4b20      	ldr	r3, [pc, #128]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2100      	movs	r1, #0
 80033b2:	2037      	movs	r0, #55	@ 0x37
 80033b4:	f002 f867 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033b8:	2037      	movs	r0, #55	@ 0x37
 80033ba:	f002 f87e 	bl	80054ba <HAL_NVIC_EnableIRQ>
}
 80033be:	e02a      	b.n	8003416 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a19      	ldr	r2, [pc, #100]	@ (800342c <HAL_TIM_Base_MspInit+0xdc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10c      	bne.n	80033e4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80033ca:	4b16      	ldr	r3, [pc, #88]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 80033cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ce:	4a15      	ldr	r2, [pc, #84]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80033d6:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 80033d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
}
 80033e2:	e018      	b.n	8003416 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM17)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a11      	ldr	r2, [pc, #68]	@ (8003430 <HAL_TIM_Base_MspInit+0xe0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d113      	bne.n	8003416 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80033ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 80033f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80033fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003424 <HAL_TIM_Base_MspInit+0xd4>)
 80033fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003406:	2200      	movs	r2, #0
 8003408:	2100      	movs	r1, #0
 800340a:	201a      	movs	r0, #26
 800340c:	f002 f83b 	bl	8005486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003410:	201a      	movs	r0, #26
 8003412:	f002 f852 	bl	80054ba <HAL_NVIC_EnableIRQ>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40001400 	.word	0x40001400
 800342c:	40014400 	.word	0x40014400
 8003430:	40014800 	.word	0x40014800

08003434 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003444:	d10b      	bne.n	800345e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003446:	4b09      	ldr	r3, [pc, #36]	@ (800346c <HAL_TIM_PWM_MspInit+0x38>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	4a08      	ldr	r2, [pc, #32]	@ (800346c <HAL_TIM_PWM_MspInit+0x38>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6593      	str	r3, [r2, #88]	@ 0x58
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_TIM_PWM_MspInit+0x38>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000

08003470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	@ 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a43      	ldr	r2, [pc, #268]	@ (800359c <HAL_TIM_MspPostInit+0x12c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d130      	bne.n	80034f4 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003492:	4b43      	ldr	r3, [pc, #268]	@ (80035a0 <HAL_TIM_MspPostInit+0x130>)
 8003494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003496:	4a42      	ldr	r2, [pc, #264]	@ (80035a0 <HAL_TIM_MspPostInit+0x130>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800349e:	4b40      	ldr	r3, [pc, #256]	@ (80035a0 <HAL_TIM_MspPostInit+0x130>)
 80034a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80034aa:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80034ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80034bc:	2306      	movs	r3, #6
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4619      	mov	r1, r3
 80034c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ca:	f002 fa83 	bl	80059d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034dc:	2300      	movs	r3, #0
 80034de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80034e0:	230b      	movs	r3, #11
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ee:	f002 fa71 	bl	80059d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034f2:	e04f      	b.n	8003594 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fc:	d14a      	bne.n	8003594 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fe:	4b28      	ldr	r3, [pc, #160]	@ (80035a0 <HAL_TIM_MspPostInit+0x130>)
 8003500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003502:	4a27      	ldr	r2, [pc, #156]	@ (80035a0 <HAL_TIM_MspPostInit+0x130>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800350a:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <HAL_TIM_MspPostInit+0x130>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003516:	4b22      	ldr	r3, [pc, #136]	@ (80035a0 <HAL_TIM_MspPostInit+0x130>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	4a21      	ldr	r2, [pc, #132]	@ (80035a0 <HAL_TIM_MspPostInit+0x130>)
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003522:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <HAL_TIM_MspPostInit+0x130>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800352e:	2308      	movs	r3, #8
 8003530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2300      	movs	r3, #0
 800353c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800353e:	2301      	movs	r3, #1
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	4619      	mov	r1, r3
 8003548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800354c:	f002 fa42 	bl	80059d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355e:	2300      	movs	r3, #0
 8003560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8003562:	230a      	movs	r3, #10
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4619      	mov	r1, r3
 800356c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003570:	f002 fa30 	bl	80059d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003574:	2308      	movs	r3, #8
 8003576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003578:	2302      	movs	r3, #2
 800357a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003580:	2300      	movs	r3, #0
 8003582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003584:	2301      	movs	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	4805      	ldr	r0, [pc, #20]	@ (80035a4 <HAL_TIM_MspPostInit+0x134>)
 8003590:	f002 fa20 	bl	80059d4 <HAL_GPIO_Init>
}
 8003594:	bf00      	nop
 8003596:	3728      	adds	r7, #40	@ 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	48000400 	.word	0x48000400

080035a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b09a      	sub	sp, #104	@ 0x68
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	2244      	movs	r2, #68	@ 0x44
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f006 fcbd 	bl	8009f48 <memset>
  if(huart->Instance==USART1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1e      	ldr	r2, [pc, #120]	@ (800364c <HAL_UART_MspInit+0xa4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d135      	bne.n	8003644 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	4618      	mov	r0, r3
 80035e6:	f003 f9a1 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035f0:	f7fe fbfa 	bl	8001de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035f4:	4b16      	ldr	r3, [pc, #88]	@ (8003650 <HAL_UART_MspInit+0xa8>)
 80035f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f8:	4a15      	ldr	r2, [pc, #84]	@ (8003650 <HAL_UART_MspInit+0xa8>)
 80035fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003600:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <HAL_UART_MspInit+0xa8>)
 8003602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360c:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <HAL_UART_MspInit+0xa8>)
 800360e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003610:	4a0f      	ldr	r2, [pc, #60]	@ (8003650 <HAL_UART_MspInit+0xa8>)
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003618:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <HAL_UART_MspInit+0xa8>)
 800361a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003624:	23c0      	movs	r3, #192	@ 0xc0
 8003626:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003630:	2300      	movs	r3, #0
 8003632:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003634:	2307      	movs	r3, #7
 8003636:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003638:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800363c:	4619      	mov	r1, r3
 800363e:	4805      	ldr	r0, [pc, #20]	@ (8003654 <HAL_UART_MspInit+0xac>)
 8003640:	f002 f9c8 	bl	80059d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003644:	bf00      	nop
 8003646:	3768      	adds	r7, #104	@ 0x68
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40013800 	.word	0x40013800
 8003650:	40021000 	.word	0x40021000
 8003654:	48000400 	.word	0x48000400

08003658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <NMI_Handler+0x4>

08003660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <HardFault_Handler+0x4>

08003668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <MemManage_Handler+0x4>

08003670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <BusFault_Handler+0x4>

08003678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <UsageFault_Handler+0x4>

08003680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ae:	f000 f8c9 	bl	8003844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80036ba:	2010      	movs	r0, #16
 80036bc:	f002 fb3c 	bl	8005d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80036c0:	bf00      	nop
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036c8:	4802      	ldr	r0, [pc, #8]	@ (80036d4 <DMA1_Channel1_IRQHandler+0x10>)
 80036ca:	f002 f834 	bl	8005736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000654 	.word	0x20000654

080036d8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036dc:	4803      	ldr	r0, [pc, #12]	@ (80036ec <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80036de:	f004 fcc7 	bl	8008070 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80036e2:	4803      	ldr	r0, [pc, #12]	@ (80036f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80036e4:	f004 fcc4 	bl	8008070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200007a0 	.word	0x200007a0
 80036f0:	200008d0 	.word	0x200008d0

080036f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80036f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80036fc:	f002 fb1c 	bl	8005d38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003700:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003704:	f002 fb18 	bl	8005d38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003708:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800370c:	f002 fb14 	bl	8005d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}

08003714 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003718:	4802      	ldr	r0, [pc, #8]	@ (8003724 <TIM7_IRQHandler+0x10>)
 800371a:	f004 fca9 	bl	8008070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000838 	.word	0x20000838

08003728 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800372c:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <SystemInit+0x20>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	4a05      	ldr	r2, [pc, #20]	@ (8003748 <SystemInit+0x20>)
 8003734:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003738:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800374c:	480d      	ldr	r0, [pc, #52]	@ (8003784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800374e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003750:	f7ff ffea 	bl	8003728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003754:	480c      	ldr	r0, [pc, #48]	@ (8003788 <LoopForever+0x6>)
  ldr r1, =_edata
 8003756:	490d      	ldr	r1, [pc, #52]	@ (800378c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003758:	4a0d      	ldr	r2, [pc, #52]	@ (8003790 <LoopForever+0xe>)
  movs r3, #0
 800375a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800375c:	e002      	b.n	8003764 <LoopCopyDataInit>

0800375e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800375e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003762:	3304      	adds	r3, #4

08003764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003768:	d3f9      	bcc.n	800375e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376a:	4a0a      	ldr	r2, [pc, #40]	@ (8003794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800376c:	4c0a      	ldr	r4, [pc, #40]	@ (8003798 <LoopForever+0x16>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003770:	e001      	b.n	8003776 <LoopFillZerobss>

08003772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003774:	3204      	adds	r2, #4

08003776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003778:	d3fb      	bcc.n	8003772 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800377a:	f006 fbf3 	bl	8009f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800377e:	f7fd fbff 	bl	8000f80 <main>

08003782 <LoopForever>:

LoopForever:
    b LoopForever
 8003782:	e7fe      	b.n	8003782 <LoopForever>
  ldr   r0, =_estack
 8003784:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800378c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003790:	0800c5f8 	.word	0x0800c5f8
  ldr r2, =_sbss
 8003794:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003798:	20000c24 	.word	0x20000c24

0800379c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800379c:	e7fe      	b.n	800379c <ADC1_2_IRQHandler>

0800379e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a8:	2003      	movs	r0, #3
 80037aa:	f001 fe61 	bl	8005470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ae:	200f      	movs	r0, #15
 80037b0:	f000 f80e 	bl	80037d0 <HAL_InitTick>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	71fb      	strb	r3, [r7, #7]
 80037be:	e001      	b.n	80037c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037c0:	f7ff fbd8 	bl	8002f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037c4:	79fb      	ldrb	r3, [r7, #7]

}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80037dc:	4b16      	ldr	r3, [pc, #88]	@ (8003838 <HAL_InitTick+0x68>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d022      	beq.n	800382a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80037e4:	4b15      	ldr	r3, [pc, #84]	@ (800383c <HAL_InitTick+0x6c>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <HAL_InitTick+0x68>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80037f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fe6c 	bl	80054d6 <HAL_SYSTICK_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10f      	bne.n	8003824 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	d809      	bhi.n	800381e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800380a:	2200      	movs	r2, #0
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	f04f 30ff 	mov.w	r0, #4294967295
 8003812:	f001 fe38 	bl	8005486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003816:	4a0a      	ldr	r2, [pc, #40]	@ (8003840 <HAL_InitTick+0x70>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e007      	b.n	800382e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
 8003822:	e004      	b.n	800382e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	e001      	b.n	800382e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000054 	.word	0x20000054
 800383c:	2000004c 	.word	0x2000004c
 8003840:	20000050 	.word	0x20000050

08003844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <HAL_IncTick+0x1c>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <HAL_IncTick+0x20>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4413      	add	r3, r2
 8003852:	4a03      	ldr	r2, [pc, #12]	@ (8003860 <HAL_IncTick+0x1c>)
 8003854:	6013      	str	r3, [r2, #0]
}
 8003856:	bf00      	nop
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	20000ae8 	.word	0x20000ae8
 8003864:	20000054 	.word	0x20000054

08003868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return uwTick;
 800386c:	4b03      	ldr	r3, [pc, #12]	@ (800387c <HAL_GetTick+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000ae8 	.word	0x20000ae8

08003880 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	609a      	str	r2, [r3, #8]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3360      	adds	r3, #96	@ 0x60
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b08      	ldr	r3, [pc, #32]	@ (800392c <LL_ADC_SetOffset+0x44>)
 800390a:	4013      	ands	r3, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	03fff000 	.word	0x03fff000

08003930 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3360      	adds	r3, #96	@ 0x60
 800393e:	461a      	mov	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3360      	adds	r3, #96	@ 0x60
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	431a      	orrs	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003986:	bf00      	nop
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003992:	b480      	push	{r7}
 8003994:	b087      	sub	sp, #28
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3360      	adds	r3, #96	@ 0x60
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3360      	adds	r3, #96	@ 0x60
 80039d8:	461a      	mov	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	615a      	str	r2, [r3, #20]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b087      	sub	sp, #28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3330      	adds	r3, #48	@ 0x30
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	4413      	add	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	211f      	movs	r1, #31
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	0e9b      	lsrs	r3, r3, #26
 8003a82:	f003 011f 	and.w	r1, r3, #31
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	431a      	orrs	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b087      	sub	sp, #28
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	0e5b      	lsrs	r3, r3, #25
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	4413      	add	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	0d1b      	lsrs	r3, r3, #20
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2107      	movs	r1, #7
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	0d1b      	lsrs	r3, r3, #20
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b10:	43db      	mvns	r3, r3
 8003b12:	401a      	ands	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0318 	and.w	r3, r3, #24
 8003b1a:	4908      	ldr	r1, [pc, #32]	@ (8003b3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b1c:	40d9      	lsrs	r1, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	400b      	ands	r3, r1
 8003b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	0007ffff 	.word	0x0007ffff

08003b40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 031f 	and.w	r3, r3, #31
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6093      	str	r3, [r2, #8]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b94:	d101      	bne.n	8003b9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003bb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003be4:	d101      	bne.n	8003bea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c34:	f043 0202 	orr.w	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <LL_ADC_IsEnabled+0x18>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <LL_ADC_IsEnabled+0x1a>
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d101      	bne.n	8003c86 <LL_ADC_IsDisableOngoing+0x18>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_ADC_IsDisableOngoing+0x1a>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ca4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ca8:	f043 0204 	orr.w	r2, r3, #4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d101      	bne.n	8003cd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d101      	bne.n	8003cfa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	b089      	sub	sp, #36	@ 0x24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e167      	b.n	8003ff2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff f943 	bl	8002fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff19 	bl	8003b80 <LL_ADC_IsDeepPowerDownEnabled>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff feff 	bl	8003b5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff34 	bl	8003bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d115      	bne.n	8003d9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff ff18 	bl	8003ba8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d78:	4ba0      	ldr	r3, [pc, #640]	@ (8003ffc <HAL_ADC_Init+0x2f4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	099b      	lsrs	r3, r3, #6
 8003d7e:	4aa0      	ldr	r2, [pc, #640]	@ (8004000 <HAL_ADC_Init+0x2f8>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	099b      	lsrs	r3, r3, #6
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d8c:	e002      	b.n	8003d94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f9      	bne.n	8003d8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff16 	bl	8003bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dae:	f043 0210 	orr.w	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff76 	bl	8003cbc <LL_ADC_REG_IsConversionOngoing>
 8003dd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 8100 	bne.w	8003fe0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 80fc 	bne.w	8003fe0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003df0:	f043 0202 	orr.w	r2, r3, #2
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff23 	bl	8003c48 <LL_ADC_IsEnabled>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d111      	bne.n	8003e2c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e08:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e0c:	f7ff ff1c 	bl	8003c48 <LL_ADC_IsEnabled>
 8003e10:	4604      	mov	r4, r0
 8003e12:	487c      	ldr	r0, [pc, #496]	@ (8004004 <HAL_ADC_Init+0x2fc>)
 8003e14:	f7ff ff18 	bl	8003c48 <LL_ADC_IsEnabled>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4323      	orrs	r3, r4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4619      	mov	r1, r3
 8003e26:	4878      	ldr	r0, [pc, #480]	@ (8004008 <HAL_ADC_Init+0x300>)
 8003e28:	f7ff fd2a 	bl	8003880 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	7f5b      	ldrb	r3, [r3, #29]
 8003e30:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e36:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003e3c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003e42:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e4a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d106      	bne.n	8003e68 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	045b      	lsls	r3, r3, #17
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	4b60      	ldr	r3, [pc, #384]	@ (800400c <HAL_ADC_Init+0x304>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	69b9      	ldr	r1, [r7, #24]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff15 	bl	8003ce2 <LL_ADC_INJ_IsConversionOngoing>
 8003eb8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d16d      	bne.n	8003f9c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d16a      	bne.n	8003f9c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003eca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ed2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ee2:	f023 0302 	bic.w	r3, r3, #2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	69b9      	ldr	r1, [r7, #24]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f10:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6911      	ldr	r1, [r2, #16]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003f26:	e013      	b.n	8003f50 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f4c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d118      	bne.n	8003f8c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f70:	4311      	orrs	r1, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f76:	4311      	orrs	r1, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	611a      	str	r2, [r3, #16]
 8003f8a:	e007      	b.n	8003f9c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d10c      	bne.n	8003fbe <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	f023 010f 	bic.w	r1, r3, #15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fbc:	e007      	b.n	8003fce <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 020f 	bic.w	r2, r2, #15
 8003fcc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
 8003fd6:	f043 0201 	orr.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fde:	e007      	b.n	8003ff0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	f043 0210 	orr.w	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3724      	adds	r7, #36	@ 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd90      	pop	{r4, r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	2000004c 	.word	0x2000004c
 8004000:	053e2d63 	.word	0x053e2d63
 8004004:	50000100 	.word	0x50000100
 8004008:	50000300 	.word	0x50000300
 800400c:	fff04007 	.word	0xfff04007

08004010 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800401c:	4851      	ldr	r0, [pc, #324]	@ (8004164 <HAL_ADC_Start_DMA+0x154>)
 800401e:	f7ff fd8f 	bl	8003b40 <LL_ADC_GetMultimode>
 8004022:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fe47 	bl	8003cbc <LL_ADC_REG_IsConversionOngoing>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	f040 808f 	bne.w	8004154 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_ADC_Start_DMA+0x34>
 8004040:	2302      	movs	r3, #2
 8004042:	e08a      	b.n	800415a <HAL_ADC_Start_DMA+0x14a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b05      	cmp	r3, #5
 8004056:	d002      	beq.n	800405e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b09      	cmp	r3, #9
 800405c:	d173      	bne.n	8004146 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fc98 	bl	8004994 <ADC_Enable>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d166      	bne.n	800413c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004072:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a38      	ldr	r2, [pc, #224]	@ (8004168 <HAL_ADC_Start_DMA+0x158>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d002      	beq.n	8004092 <HAL_ADC_Start_DMA+0x82>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	e001      	b.n	8004096 <HAL_ADC_Start_DMA+0x86>
 8004092:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	4293      	cmp	r3, r2
 800409c:	d002      	beq.n	80040a4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c0:	f023 0206 	bic.w	r2, r3, #6
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80040c8:	e002      	b.n	80040d0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	4a25      	ldr	r2, [pc, #148]	@ (800416c <HAL_ADC_Start_DMA+0x15c>)
 80040d6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040dc:	4a24      	ldr	r2, [pc, #144]	@ (8004170 <HAL_ADC_Start_DMA+0x160>)
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e4:	4a23      	ldr	r2, [pc, #140]	@ (8004174 <HAL_ADC_Start_DMA+0x164>)
 80040e6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	221c      	movs	r2, #28
 80040ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0210 	orr.w	r2, r2, #16
 8004106:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3340      	adds	r3, #64	@ 0x40
 8004122:	4619      	mov	r1, r3
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f001 fa8a 	bl	8005640 <HAL_DMA_Start_IT>
 800412c:	4603      	mov	r3, r0
 800412e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fdad 	bl	8003c94 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800413a:	e00d      	b.n	8004158 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004144:	e008      	b.n	8004158 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004152:	e001      	b.n	8004158 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004154:	2302      	movs	r3, #2
 8004156:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004158:	7dfb      	ldrb	r3, [r7, #23]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	50000300 	.word	0x50000300
 8004168:	50000100 	.word	0x50000100
 800416c:	08004b5f 	.word	0x08004b5f
 8004170:	08004c37 	.word	0x08004c37
 8004174:	08004c53 	.word	0x08004c53

08004178 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b0b6      	sub	sp, #216	@ 0xd8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x22>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e3c8      	b.n	8004968 <HAL_ADC_ConfigChannel+0x7b4>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fd6a 	bl	8003cbc <LL_ADC_REG_IsConversionOngoing>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 83ad 	bne.w	800494a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	f7ff fc24 	bl	8003a4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fd58 	bl	8003cbc <LL_ADC_REG_IsConversionOngoing>
 800420c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fd64 	bl	8003ce2 <LL_ADC_INJ_IsConversionOngoing>
 800421a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800421e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 81d9 	bne.w	80045da <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 81d4 	bne.w	80045da <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800423a:	d10f      	bne.n	800425c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2200      	movs	r2, #0
 8004246:	4619      	mov	r1, r3
 8004248:	f7ff fc2b 	bl	8003aa2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fbd2 	bl	80039fe <LL_ADC_SetSamplingTimeCommonConfig>
 800425a:	e00e      	b.n	800427a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	461a      	mov	r2, r3
 800426a:	f7ff fc1a 	bl	8003aa2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fbc2 	bl	80039fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	08db      	lsrs	r3, r3, #3
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d022      	beq.n	80042e2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6919      	ldr	r1, [r3, #16]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042ac:	f7ff fb1c 	bl	80038e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6919      	ldr	r1, [r3, #16]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	461a      	mov	r2, r3
 80042be:	f7ff fb68 	bl	8003992 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x124>
 80042d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042d6:	e000      	b.n	80042da <HAL_ADC_ConfigChannel+0x126>
 80042d8:	2300      	movs	r3, #0
 80042da:	461a      	mov	r2, r3
 80042dc:	f7ff fb74 	bl	80039c8 <LL_ADC_SetOffsetSaturation>
 80042e0:	e17b      	b.n	80045da <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fb21 	bl	8003930 <LL_ADC_GetOffsetChannel>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <HAL_ADC_ConfigChannel+0x15a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fb16 	bl	8003930 <LL_ADC_GetOffsetChannel>
 8004304:	4603      	mov	r3, r0
 8004306:	0e9b      	lsrs	r3, r3, #26
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	e01e      	b.n	800434c <HAL_ADC_ConfigChannel+0x198>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2100      	movs	r1, #0
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fb0b 	bl	8003930 <LL_ADC_GetOffsetChannel>
 800431a:	4603      	mov	r3, r0
 800431c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800432c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004330:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800433c:	2320      	movs	r3, #32
 800433e:	e004      	b.n	800434a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x1b0>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	0e9b      	lsrs	r3, r3, #26
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	e018      	b.n	8004396 <HAL_ADC_ConfigChannel+0x1e2>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800437c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004388:	2320      	movs	r3, #32
 800438a:	e004      	b.n	8004396 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800438c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004396:	429a      	cmp	r2, r3
 8004398:	d106      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fada 	bl	800395c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2101      	movs	r1, #1
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fabe 	bl	8003930 <LL_ADC_GetOffsetChannel>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x220>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2101      	movs	r1, #1
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fab3 	bl	8003930 <LL_ADC_GetOffsetChannel>
 80043ca:	4603      	mov	r3, r0
 80043cc:	0e9b      	lsrs	r3, r3, #26
 80043ce:	f003 021f 	and.w	r2, r3, #31
 80043d2:	e01e      	b.n	8004412 <HAL_ADC_ConfigChannel+0x25e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff faa8 	bl	8003930 <LL_ADC_GetOffsetChannel>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80043f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80043fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004402:	2320      	movs	r3, #32
 8004404:	e004      	b.n	8004410 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441a:	2b00      	cmp	r3, #0
 800441c:	d105      	bne.n	800442a <HAL_ADC_ConfigChannel+0x276>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	0e9b      	lsrs	r3, r3, #26
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	e018      	b.n	800445c <HAL_ADC_ConfigChannel+0x2a8>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004436:	fa93 f3a3 	rbit	r3, r3
 800443a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800443e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004446:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800444e:	2320      	movs	r3, #32
 8004450:	e004      	b.n	800445c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004452:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800445c:	429a      	cmp	r2, r3
 800445e:	d106      	bne.n	800446e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2200      	movs	r2, #0
 8004466:	2101      	movs	r1, #1
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fa77 	bl	800395c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fa5b 	bl	8003930 <LL_ADC_GetOffsetChannel>
 800447a:	4603      	mov	r3, r0
 800447c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <HAL_ADC_ConfigChannel+0x2e6>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2102      	movs	r1, #2
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fa50 	bl	8003930 <LL_ADC_GetOffsetChannel>
 8004490:	4603      	mov	r3, r0
 8004492:	0e9b      	lsrs	r3, r3, #26
 8004494:	f003 021f 	and.w	r2, r3, #31
 8004498:	e01e      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x324>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2102      	movs	r1, #2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fa45 	bl	8003930 <LL_ADC_GetOffsetChannel>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80044b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80044c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80044c8:	2320      	movs	r3, #32
 80044ca:	e004      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80044cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044d0:	fab3 f383 	clz	r3, r3
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x33c>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	0e9b      	lsrs	r3, r3, #26
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	e016      	b.n	800451e <HAL_ADC_ConfigChannel+0x36a>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004502:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004510:	2320      	movs	r3, #32
 8004512:	e004      	b.n	800451e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800451e:	429a      	cmp	r2, r3
 8004520:	d106      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2200      	movs	r2, #0
 8004528:	2102      	movs	r1, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fa16 	bl	800395c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2103      	movs	r1, #3
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff f9fa 	bl	8003930 <LL_ADC_GetOffsetChannel>
 800453c:	4603      	mov	r3, r0
 800453e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <HAL_ADC_ConfigChannel+0x3a8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2103      	movs	r1, #3
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff f9ef 	bl	8003930 <LL_ADC_GetOffsetChannel>
 8004552:	4603      	mov	r3, r0
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	f003 021f 	and.w	r2, r3, #31
 800455a:	e017      	b.n	800458c <HAL_ADC_ConfigChannel+0x3d8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2103      	movs	r1, #3
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff f9e4 	bl	8003930 <LL_ADC_GetOffsetChannel>
 8004568:	4603      	mov	r3, r0
 800456a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800456e:	fa93 f3a3 	rbit	r3, r3
 8004572:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004576:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800457e:	2320      	movs	r3, #32
 8004580:	e003      	b.n	800458a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004582:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004584:	fab3 f383 	clz	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x3f0>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	0e9b      	lsrs	r3, r3, #26
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	e011      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x414>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045ac:	fa93 f3a3 	rbit	r3, r3
 80045b0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80045b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80045b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80045bc:	2320      	movs	r3, #32
 80045be:	e003      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80045c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045c2:	fab3 f383 	clz	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d106      	bne.n	80045da <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2200      	movs	r2, #0
 80045d2:	2103      	movs	r1, #3
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff f9c1 	bl	800395c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fb32 	bl	8003c48 <LL_ADC_IsEnabled>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 8140 	bne.w	800486c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	461a      	mov	r2, r3
 80045fa:	f7ff fa7d 	bl	8003af8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4a8f      	ldr	r2, [pc, #572]	@ (8004840 <HAL_ADC_ConfigChannel+0x68c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	f040 8131 	bne.w	800486c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x47e>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	0e9b      	lsrs	r3, r3, #26
 8004620:	3301      	adds	r3, #1
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2b09      	cmp	r3, #9
 8004628:	bf94      	ite	ls
 800462a:	2301      	movls	r3, #1
 800462c:	2300      	movhi	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	e019      	b.n	8004666 <HAL_ADC_ConfigChannel+0x4b2>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004642:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004644:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800464a:	2320      	movs	r3, #32
 800464c:	e003      	b.n	8004656 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800464e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2b09      	cmp	r3, #9
 800465e:	bf94      	ite	ls
 8004660:	2301      	movls	r3, #1
 8004662:	2300      	movhi	r3, #0
 8004664:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004666:	2b00      	cmp	r3, #0
 8004668:	d079      	beq.n	800475e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x4d2>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	0e9b      	lsrs	r3, r3, #26
 800467c:	3301      	adds	r3, #1
 800467e:	069b      	lsls	r3, r3, #26
 8004680:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004684:	e015      	b.n	80046b2 <HAL_ADC_ConfigChannel+0x4fe>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004696:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800469e:	2320      	movs	r3, #32
 80046a0:	e003      	b.n	80046aa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80046a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	069b      	lsls	r3, r3, #26
 80046ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x51e>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	0e9b      	lsrs	r3, r3, #26
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	e017      	b.n	8004702 <HAL_ADC_ConfigChannel+0x54e>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80046e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80046e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80046ea:	2320      	movs	r3, #32
 80046ec:	e003      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80046ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	3301      	adds	r3, #1
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	ea42 0103 	orr.w	r1, r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x574>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	0e9b      	lsrs	r3, r3, #26
 8004718:	3301      	adds	r3, #1
 800471a:	f003 021f 	and.w	r2, r3, #31
 800471e:	4613      	mov	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4413      	add	r3, r2
 8004724:	051b      	lsls	r3, r3, #20
 8004726:	e018      	b.n	800475a <HAL_ADC_ConfigChannel+0x5a6>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	fa93 f3a3 	rbit	r3, r3
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800473a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004740:	2320      	movs	r3, #32
 8004742:	e003      	b.n	800474c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004746:	fab3 f383 	clz	r3, r3
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3301      	adds	r3, #1
 800474e:	f003 021f 	and.w	r2, r3, #31
 8004752:	4613      	mov	r3, r2
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	4413      	add	r3, r2
 8004758:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800475a:	430b      	orrs	r3, r1
 800475c:	e081      	b.n	8004862 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004766:	2b00      	cmp	r3, #0
 8004768:	d107      	bne.n	800477a <HAL_ADC_ConfigChannel+0x5c6>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	0e9b      	lsrs	r3, r3, #26
 8004770:	3301      	adds	r3, #1
 8004772:	069b      	lsls	r3, r3, #26
 8004774:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004778:	e015      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x5f2>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004792:	2320      	movs	r3, #32
 8004794:	e003      	b.n	800479e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	fab3 f383 	clz	r3, r3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	3301      	adds	r3, #1
 80047a0:	069b      	lsls	r3, r3, #26
 80047a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x612>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	0e9b      	lsrs	r3, r3, #26
 80047b8:	3301      	adds	r3, #1
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2101      	movs	r1, #1
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	e017      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x642>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	61fb      	str	r3, [r7, #28]
  return result;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80047de:	2320      	movs	r3, #32
 80047e0:	e003      	b.n	80047ea <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	ea42 0103 	orr.w	r1, r2, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x66e>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0e9b      	lsrs	r3, r3, #26
 800480c:	3301      	adds	r3, #1
 800480e:	f003 021f 	and.w	r2, r3, #31
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	3b1e      	subs	r3, #30
 800481a:	051b      	lsls	r3, r3, #20
 800481c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004820:	e01e      	b.n	8004860 <HAL_ADC_ConfigChannel+0x6ac>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	613b      	str	r3, [r7, #16]
  return result;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800483a:	2320      	movs	r3, #32
 800483c:	e006      	b.n	800484c <HAL_ADC_ConfigChannel+0x698>
 800483e:	bf00      	nop
 8004840:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	fab3 f383 	clz	r3, r3
 800484a:	b2db      	uxtb	r3, r3
 800484c:	3301      	adds	r3, #1
 800484e:	f003 021f 	and.w	r2, r3, #31
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	3b1e      	subs	r3, #30
 800485a:	051b      	lsls	r3, r3, #20
 800485c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004860:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004866:	4619      	mov	r1, r3
 8004868:	f7ff f91b 	bl	8003aa2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b3f      	ldr	r3, [pc, #252]	@ (8004970 <HAL_ADC_ConfigChannel+0x7bc>)
 8004872:	4013      	ands	r3, r2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d071      	beq.n	800495c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004878:	483e      	ldr	r0, [pc, #248]	@ (8004974 <HAL_ADC_ConfigChannel+0x7c0>)
 800487a:	f7ff f827 	bl	80038cc <LL_ADC_GetCommonPathInternalCh>
 800487e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3c      	ldr	r2, [pc, #240]	@ (8004978 <HAL_ADC_ConfigChannel+0x7c4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_ADC_ConfigChannel+0x6e2>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a3a      	ldr	r2, [pc, #232]	@ (800497c <HAL_ADC_ConfigChannel+0x7c8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d127      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800489a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d121      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048aa:	d157      	bne.n	800495c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048b4:	4619      	mov	r1, r3
 80048b6:	482f      	ldr	r0, [pc, #188]	@ (8004974 <HAL_ADC_ConfigChannel+0x7c0>)
 80048b8:	f7fe fff5 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048bc:	4b30      	ldr	r3, [pc, #192]	@ (8004980 <HAL_ADC_ConfigChannel+0x7cc>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	099b      	lsrs	r3, r3, #6
 80048c2:	4a30      	ldr	r2, [pc, #192]	@ (8004984 <HAL_ADC_ConfigChannel+0x7d0>)
 80048c4:	fba2 2303 	umull	r2, r3, r2, r3
 80048c8:	099b      	lsrs	r3, r3, #6
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048d6:	e002      	b.n	80048de <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b01      	subs	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f9      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048e4:	e03a      	b.n	800495c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a27      	ldr	r2, [pc, #156]	@ (8004988 <HAL_ADC_ConfigChannel+0x7d4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d113      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10d      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a22      	ldr	r2, [pc, #136]	@ (800498c <HAL_ADC_ConfigChannel+0x7d8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02a      	beq.n	800495c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800490a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800490e:	4619      	mov	r1, r3
 8004910:	4818      	ldr	r0, [pc, #96]	@ (8004974 <HAL_ADC_ConfigChannel+0x7c0>)
 8004912:	f7fe ffc8 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004916:	e021      	b.n	800495c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <HAL_ADC_ConfigChannel+0x7dc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d11c      	bne.n	800495c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a16      	ldr	r2, [pc, #88]	@ (800498c <HAL_ADC_ConfigChannel+0x7d8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d011      	beq.n	800495c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800493c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004940:	4619      	mov	r1, r3
 8004942:	480c      	ldr	r0, [pc, #48]	@ (8004974 <HAL_ADC_ConfigChannel+0x7c0>)
 8004944:	f7fe ffaf 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
 8004948:	e008      	b.n	800495c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004964:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004968:	4618      	mov	r0, r3
 800496a:	37d8      	adds	r7, #216	@ 0xd8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	80080000 	.word	0x80080000
 8004974:	50000300 	.word	0x50000300
 8004978:	c3210000 	.word	0xc3210000
 800497c:	90c00010 	.word	0x90c00010
 8004980:	2000004c 	.word	0x2000004c
 8004984:	053e2d63 	.word	0x053e2d63
 8004988:	c7520000 	.word	0xc7520000
 800498c:	50000100 	.word	0x50000100
 8004990:	cb840000 	.word	0xcb840000

08004994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff f94f 	bl	8003c48 <LL_ADC_IsEnabled>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d169      	bne.n	8004a84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4b36      	ldr	r3, [pc, #216]	@ (8004a90 <ADC_Enable+0xfc>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c2:	f043 0210 	orr.w	r2, r3, #16
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e055      	b.n	8004a86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff f90a 	bl	8003bf8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80049e4:	482b      	ldr	r0, [pc, #172]	@ (8004a94 <ADC_Enable+0x100>)
 80049e6:	f7fe ff71 	bl	80038cc <LL_ADC_GetCommonPathInternalCh>
 80049ea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80049ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049f4:	4b28      	ldr	r3, [pc, #160]	@ (8004a98 <ADC_Enable+0x104>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	4a28      	ldr	r2, [pc, #160]	@ (8004a9c <ADC_Enable+0x108>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	099b      	lsrs	r3, r3, #6
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	4613      	mov	r3, r2
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a0e:	e002      	b.n	8004a16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f9      	bne.n	8004a10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a1c:	f7fe ff24 	bl	8003868 <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a22:	e028      	b.n	8004a76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff f90d 	bl	8003c48 <LL_ADC_IsEnabled>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff f8dd 	bl	8003bf8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a3e:	f7fe ff13 	bl	8003868 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d914      	bls.n	8004a76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d00d      	beq.n	8004a76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5e:	f043 0210 	orr.w	r2, r3, #16
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e007      	b.n	8004a86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d1cf      	bne.n	8004a24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	8000003f 	.word	0x8000003f
 8004a94:	50000300 	.word	0x50000300
 8004a98:	2000004c 	.word	0x2000004c
 8004a9c:	053e2d63 	.word	0x053e2d63

08004aa0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff f8de 	bl	8003c6e <LL_ADC_IsDisableOngoing>
 8004ab2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff f8c5 	bl	8003c48 <LL_ADC_IsEnabled>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d047      	beq.n	8004b54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d144      	bne.n	8004b54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 030d 	and.w	r3, r3, #13
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10c      	bne.n	8004af2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff f89f 	bl	8003c20 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aea:	f7fe febd 	bl	8003868 <HAL_GetTick>
 8004aee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004af0:	e029      	b.n	8004b46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af6:	f043 0210 	orr.w	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e023      	b.n	8004b56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b0e:	f7fe feab 	bl	8003868 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d914      	bls.n	8004b46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e007      	b.n	8004b56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1dc      	bne.n	8004b0e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b70:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d14b      	bne.n	8004c10 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d021      	beq.n	8004bd6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe ff44 	bl	8003a24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d032      	beq.n	8004c08 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d12b      	bne.n	8004c08 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11f      	bne.n	8004c08 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bcc:	f043 0201 	orr.w	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bd4:	e018      	b.n	8004c08 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d111      	bne.n	8004c08 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c00:	f043 0201 	orr.w	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7ff fab5 	bl	8004178 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c0e:	e00e      	b.n	8004c2e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff fabf 	bl	80041a0 <HAL_ADC_ErrorCallback>
}
 8004c22:	e004      	b.n	8004c2e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
}
 8004c2e:	bf00      	nop
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff faa1 	bl	800418c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c70:	f043 0204 	orr.w	r2, r3, #4
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff fa91 	bl	80041a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <LL_ADC_IsEnabled>:
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <LL_ADC_IsEnabled+0x18>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <LL_ADC_IsEnabled+0x1a>
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <LL_ADC_StartCalibration>:
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004cbe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_ADC_IsCalibrationOnGoing>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cf2:	d101      	bne.n	8004cf8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d101      	bne.n	8004d1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_ADCEx_Calibration_Start+0x1c>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e04d      	b.n	8004de4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fea5 	bl	8004aa0 <ADC_Disable>
 8004d56:	4603      	mov	r3, r0
 8004d58:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d136      	bne.n	8004dce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d64:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d68:	f023 0302 	bic.w	r3, r3, #2
 8004d6c:	f043 0202 	orr.w	r2, r3, #2
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ff96 	bl	8004cac <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d80:	e014      	b.n	8004dac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	3301      	adds	r3, #1
 8004d86:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	@ (8004dec <HAL_ADCEx_Calibration_Start+0xc0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d90d      	bls.n	8004dac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d94:	f023 0312 	bic.w	r3, r3, #18
 8004d98:	f043 0210 	orr.w	r2, r3, #16
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e01b      	b.n	8004de4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ff94 	bl	8004cde <LL_ADC_IsCalibrationOnGoing>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e2      	bne.n	8004d82 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc0:	f023 0303 	bic.w	r3, r3, #3
 8004dc4:	f043 0201 	orr.w	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dcc:	e005      	b.n	8004dda <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd2:	f043 0210 	orr.w	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	0004de01 	.word	0x0004de01

08004df0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b0a1      	sub	sp, #132	@ 0x84
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e08b      	b.n	8004f26 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e16:	2300      	movs	r3, #0
 8004e18:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e26:	d102      	bne.n	8004e2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e28:	4b41      	ldr	r3, [pc, #260]	@ (8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	e001      	b.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10b      	bne.n	8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e06a      	b.n	8004f26 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff ff57 	bl	8004d06 <LL_ADC_REG_IsConversionOngoing>
 8004e58:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff ff51 	bl	8004d06 <LL_ADC_REG_IsConversionOngoing>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d14c      	bne.n	8004f04 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004e6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d149      	bne.n	8004f04 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e70:	4b30      	ldr	r3, [pc, #192]	@ (8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004e72:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d028      	beq.n	8004ece <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e8e:	035b      	lsls	r3, r3, #13
 8004e90:	430b      	orrs	r3, r1
 8004e92:	431a      	orrs	r2, r3
 8004e94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e96:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e9c:	f7ff fef3 	bl	8004c86 <LL_ADC_IsEnabled>
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	4823      	ldr	r0, [pc, #140]	@ (8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ea4:	f7ff feef 	bl	8004c86 <LL_ADC_IsEnabled>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4323      	orrs	r3, r4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d133      	bne.n	8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004eb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004eb8:	f023 030f 	bic.w	r3, r3, #15
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	6811      	ldr	r1, [r2, #0]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	6892      	ldr	r2, [r2, #8]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eca:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ecc:	e024      	b.n	8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ece:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004eda:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ede:	f7ff fed2 	bl	8004c86 <LL_ADC_IsEnabled>
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4812      	ldr	r0, [pc, #72]	@ (8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ee6:	f7ff fece 	bl	8004c86 <LL_ADC_IsEnabled>
 8004eea:	4603      	mov	r3, r0
 8004eec:	4323      	orrs	r3, r4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d112      	bne.n	8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004efa:	f023 030f 	bic.w	r3, r3, #15
 8004efe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f02:	e009      	b.n	8004f18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f08:	f043 0220 	orr.w	r2, r3, #32
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004f16:	e000      	b.n	8004f1a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3784      	adds	r7, #132	@ 0x84
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd90      	pop	{r4, r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	50000100 	.word	0x50000100
 8004f34:	50000300 	.word	0x50000300

08004f38 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4904      	ldr	r1, [pc, #16]	@ (8004f58 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	600b      	str	r3, [r1, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40010400 	.word	0x40010400

08004f5c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004f64:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	4904      	ldr	r1, [pc, #16]	@ (8004f80 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010400 	.word	0x40010400

08004f84 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004f8c:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	4904      	ldr	r1, [pc, #16]	@ (8004fa4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]

}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004fb0:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <LL_EXTI_DisableEvent_0_31+0x24>)
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	4904      	ldr	r1, [pc, #16]	@ (8004fcc <LL_EXTI_DisableEvent_0_31+0x24>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40010400 	.word	0x40010400

08004fd0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004fd8:	4b05      	ldr	r3, [pc, #20]	@ (8004ff0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	4904      	ldr	r1, [pc, #16]	@ (8004ff0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]

}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40010400 	.word	0x40010400

08004ff4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004ffc:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	43db      	mvns	r3, r3
 8005004:	4904      	ldr	r1, [pc, #16]	@ (8005018 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005006:	4013      	ands	r3, r2
 8005008:	608b      	str	r3, [r1, #8]

}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40010400 	.word	0x40010400

0800501c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005024:	4b05      	ldr	r3, [pc, #20]	@ (800503c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	4904      	ldr	r1, [pc, #16]	@ (800503c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4313      	orrs	r3, r2
 800502e:	60cb      	str	r3, [r1, #12]
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40010400 	.word	0x40010400

08005040 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005048:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	43db      	mvns	r3, r3
 8005050:	4904      	ldr	r1, [pc, #16]	@ (8005064 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005052:	4013      	ands	r3, r2
 8005054:	60cb      	str	r3, [r1, #12]
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010400 	.word	0x40010400

08005068 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005070:	4a04      	ldr	r2, [pc, #16]	@ (8005084 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6153      	str	r3, [r2, #20]
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010400 	.word	0x40010400

08005088 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d102      	bne.n	80050a4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e0bc      	b.n	800521e <HAL_COMP_Init+0x196>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050b2:	d102      	bne.n	80050ba <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e0b1      	b.n	800521e <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7f5b      	ldrb	r3, [r3, #29]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d108      	bne.n	80050d6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fe f849 	bl	8003168 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050e0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b48      	ldr	r3, [pc, #288]	@ (8005228 <HAL_COMP_Init+0x1a0>)
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	6979      	ldr	r1, [r7, #20]
 8005110:	430b      	orrs	r3, r1
 8005112:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <HAL_COMP_Init+0xc8>
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d113      	bne.n	8005150 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005128:	4b40      	ldr	r3, [pc, #256]	@ (800522c <HAL_COMP_Init+0x1a4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	4a40      	ldr	r2, [pc, #256]	@ (8005230 <HAL_COMP_Init+0x1a8>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	099b      	lsrs	r3, r3, #6
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005142:	e002      	b.n	800514a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3b01      	subs	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f9      	bne.n	8005144 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a37      	ldr	r2, [pc, #220]	@ (8005234 <HAL_COMP_Init+0x1ac>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d012      	beq.n	8005180 <HAL_COMP_Init+0xf8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a36      	ldr	r2, [pc, #216]	@ (8005238 <HAL_COMP_Init+0x1b0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00a      	beq.n	800517a <HAL_COMP_Init+0xf2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a34      	ldr	r2, [pc, #208]	@ (800523c <HAL_COMP_Init+0x1b4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d102      	bne.n	8005174 <HAL_COMP_Init+0xec>
 800516e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005172:	e007      	b.n	8005184 <HAL_COMP_Init+0xfc>
 8005174:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005178:	e004      	b.n	8005184 <HAL_COMP_Init+0xfc>
 800517a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800517e:	e001      	b.n	8005184 <HAL_COMP_Init+0xfc>
 8005180:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005184:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d037      	beq.n	8005202 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800519e:	6938      	ldr	r0, [r7, #16]
 80051a0:	f7ff ff16 	bl	8004fd0 <LL_EXTI_EnableRisingTrig_0_31>
 80051a4:	e002      	b.n	80051ac <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80051a6:	6938      	ldr	r0, [r7, #16]
 80051a8:	f7ff ff24 	bl	8004ff4 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80051b8:	6938      	ldr	r0, [r7, #16]
 80051ba:	f7ff ff2f 	bl	800501c <LL_EXTI_EnableFallingTrig_0_31>
 80051be:	e002      	b.n	80051c6 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80051c0:	6938      	ldr	r0, [r7, #16]
 80051c2:	f7ff ff3d 	bl	8005040 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 80051c6:	6938      	ldr	r0, [r7, #16]
 80051c8:	f7ff ff4e 	bl	8005068 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80051d8:	6938      	ldr	r0, [r7, #16]
 80051da:	f7ff fed3 	bl	8004f84 <LL_EXTI_EnableEvent_0_31>
 80051de:	e002      	b.n	80051e6 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80051e0:	6938      	ldr	r0, [r7, #16]
 80051e2:	f7ff fee1 	bl	8004fa8 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80051f2:	6938      	ldr	r0, [r7, #16]
 80051f4:	f7ff fea0 	bl	8004f38 <LL_EXTI_EnableIT_0_31>
 80051f8:	e009      	b.n	800520e <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80051fa:	6938      	ldr	r0, [r7, #16]
 80051fc:	f7ff feae 	bl	8004f5c <LL_EXTI_DisableIT_0_31>
 8005200:	e005      	b.n	800520e <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005202:	6938      	ldr	r0, [r7, #16]
 8005204:	f7ff fed0 	bl	8004fa8 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8005208:	6938      	ldr	r0, [r7, #16]
 800520a:	f7ff fea7 	bl	8004f5c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	7f5b      	ldrb	r3, [r3, #29]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800521e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3720      	adds	r7, #32
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	ff007e0f 	.word	0xff007e0f
 800522c:	2000004c 	.word	0x2000004c
 8005230:	053e2d63 	.word	0x053e2d63
 8005234:	40010200 	.word	0x40010200
 8005238:	40010204 	.word	0x40010204
 800523c:	40010208 	.word	0x40010208

08005240 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	e02e      	b.n	80052ba <HAL_COMP_Start+0x7a>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005266:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800526a:	d102      	bne.n	8005272 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	e023      	b.n	80052ba <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	7f5b      	ldrb	r3, [r3, #29]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d11c      	bne.n	80052b6 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <HAL_COMP_Start+0x88>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a0d      	ldr	r2, [pc, #52]	@ (80052cc <HAL_COMP_Start+0x8c>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	0cda      	lsrs	r2, r3, #19
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052a6:	e002      	b.n	80052ae <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f9      	bne.n	80052a8 <HAL_COMP_Start+0x68>
 80052b4:	e001      	b.n	80052ba <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	2000004c 	.word	0x2000004c
 80052cc:	431bde83 	.word	0x431bde83

080052d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <__NVIC_SetPriorityGrouping+0x44>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052ec:	4013      	ands	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005302:	4a04      	ldr	r2, [pc, #16]	@ (8005314 <__NVIC_SetPriorityGrouping+0x44>)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	60d3      	str	r3, [r2, #12]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800531c:	4b04      	ldr	r3, [pc, #16]	@ (8005330 <__NVIC_GetPriorityGrouping+0x18>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	0a1b      	lsrs	r3, r3, #8
 8005322:	f003 0307 	and.w	r3, r3, #7
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	e000ed00 	.word	0xe000ed00

08005334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005342:	2b00      	cmp	r3, #0
 8005344:	db0b      	blt.n	800535e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	f003 021f 	and.w	r2, r3, #31
 800534c:	4907      	ldr	r1, [pc, #28]	@ (800536c <__NVIC_EnableIRQ+0x38>)
 800534e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	2001      	movs	r0, #1
 8005356:	fa00 f202 	lsl.w	r2, r0, r2
 800535a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	e000e100 	.word	0xe000e100

08005370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	6039      	str	r1, [r7, #0]
 800537a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800537c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005380:	2b00      	cmp	r3, #0
 8005382:	db0a      	blt.n	800539a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	490c      	ldr	r1, [pc, #48]	@ (80053bc <__NVIC_SetPriority+0x4c>)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	0112      	lsls	r2, r2, #4
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	440b      	add	r3, r1
 8005394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005398:	e00a      	b.n	80053b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	b2da      	uxtb	r2, r3
 800539e:	4908      	ldr	r1, [pc, #32]	@ (80053c0 <__NVIC_SetPriority+0x50>)
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	3b04      	subs	r3, #4
 80053a8:	0112      	lsls	r2, r2, #4
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	440b      	add	r3, r1
 80053ae:	761a      	strb	r2, [r3, #24]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000e100 	.word	0xe000e100
 80053c0:	e000ed00 	.word	0xe000ed00

080053c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b089      	sub	sp, #36	@ 0x24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f1c3 0307 	rsb	r3, r3, #7
 80053de:	2b04      	cmp	r3, #4
 80053e0:	bf28      	it	cs
 80053e2:	2304      	movcs	r3, #4
 80053e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2b06      	cmp	r3, #6
 80053ec:	d902      	bls.n	80053f4 <NVIC_EncodePriority+0x30>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	3b03      	subs	r3, #3
 80053f2:	e000      	b.n	80053f6 <NVIC_EncodePriority+0x32>
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f8:	f04f 32ff 	mov.w	r2, #4294967295
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	401a      	ands	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800540c:	f04f 31ff 	mov.w	r1, #4294967295
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	43d9      	mvns	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800541c:	4313      	orrs	r3, r2
         );
}
 800541e:	4618      	mov	r0, r3
 8005420:	3724      	adds	r7, #36	@ 0x24
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3b01      	subs	r3, #1
 8005438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800543c:	d301      	bcc.n	8005442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800543e:	2301      	movs	r3, #1
 8005440:	e00f      	b.n	8005462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005442:	4a0a      	ldr	r2, [pc, #40]	@ (800546c <SysTick_Config+0x40>)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3b01      	subs	r3, #1
 8005448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800544a:	210f      	movs	r1, #15
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	f7ff ff8e 	bl	8005370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005454:	4b05      	ldr	r3, [pc, #20]	@ (800546c <SysTick_Config+0x40>)
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800545a:	4b04      	ldr	r3, [pc, #16]	@ (800546c <SysTick_Config+0x40>)
 800545c:	2207      	movs	r2, #7
 800545e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	e000e010 	.word	0xe000e010

08005470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ff29 	bl	80052d0 <__NVIC_SetPriorityGrouping>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	4603      	mov	r3, r0
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005494:	f7ff ff40 	bl	8005318 <__NVIC_GetPriorityGrouping>
 8005498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	6978      	ldr	r0, [r7, #20]
 80054a0:	f7ff ff90 	bl	80053c4 <NVIC_EncodePriority>
 80054a4:	4602      	mov	r2, r0
 80054a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054aa:	4611      	mov	r1, r2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff ff5f 	bl	8005370 <__NVIC_SetPriority>
}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	4603      	mov	r3, r0
 80054c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff ff33 	bl	8005334 <__NVIC_EnableIRQ>
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ffa4 	bl	800542c <SysTick_Config>
 80054e4:	4603      	mov	r3, r0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e08d      	b.n	800561e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	4b47      	ldr	r3, [pc, #284]	@ (8005628 <HAL_DMA_Init+0x138>)
 800550a:	429a      	cmp	r2, r3
 800550c:	d80f      	bhi.n	800552e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	4b45      	ldr	r3, [pc, #276]	@ (800562c <HAL_DMA_Init+0x13c>)
 8005516:	4413      	add	r3, r2
 8005518:	4a45      	ldr	r2, [pc, #276]	@ (8005630 <HAL_DMA_Init+0x140>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	009a      	lsls	r2, r3, #2
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a42      	ldr	r2, [pc, #264]	@ (8005634 <HAL_DMA_Init+0x144>)
 800552a:	641a      	str	r2, [r3, #64]	@ 0x40
 800552c:	e00e      	b.n	800554c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	4b40      	ldr	r3, [pc, #256]	@ (8005638 <HAL_DMA_Init+0x148>)
 8005536:	4413      	add	r3, r2
 8005538:	4a3d      	ldr	r2, [pc, #244]	@ (8005630 <HAL_DMA_Init+0x140>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	009a      	lsls	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a3c      	ldr	r2, [pc, #240]	@ (800563c <HAL_DMA_Init+0x14c>)
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005566:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800557c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9b6 	bl	8005910 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ac:	d102      	bne.n	80055b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055c8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d010      	beq.n	80055f4 <HAL_DMA_Init+0x104>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d80c      	bhi.n	80055f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f9d6 	bl	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	e008      	b.n	8005606 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40020407 	.word	0x40020407
 800562c:	bffdfff8 	.word	0xbffdfff8
 8005630:	cccccccd 	.word	0xcccccccd
 8005634:	40020000 	.word	0x40020000
 8005638:	bffdfbf8 	.word	0xbffdfbf8
 800563c:	40020400 	.word	0x40020400

08005640 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_DMA_Start_IT+0x20>
 800565c:	2302      	movs	r3, #2
 800565e:	e066      	b.n	800572e <HAL_DMA_Start_IT+0xee>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	d155      	bne.n	8005720 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f8fb 	bl	8005894 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 020e 	orr.w	r2, r2, #14
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e00f      	b.n	80056d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0204 	bic.w	r2, r2, #4
 80056c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 020a 	orr.w	r2, r2, #10
 80056d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d007      	beq.n	80056f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800570c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e005      	b.n	800572c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005728:	2302      	movs	r3, #2
 800572a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800572c:	7dfb      	ldrb	r3, [r7, #23]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2204      	movs	r2, #4
 8005758:	409a      	lsls	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4013      	ands	r3, r2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d026      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x7a>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d021      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d107      	bne.n	800578a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0204 	bic.w	r2, r2, #4
 8005788:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578e:	f003 021f 	and.w	r2, r3, #31
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	2104      	movs	r1, #4
 8005798:	fa01 f202 	lsl.w	r2, r1, r2
 800579c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d071      	beq.n	800588a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80057ae:	e06c      	b.n	800588a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	2202      	movs	r2, #2
 80057ba:	409a      	lsls	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02e      	beq.n	8005822 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d029      	beq.n	8005822 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 020a 	bic.w	r2, r2, #10
 80057ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f8:	f003 021f 	and.w	r2, r3, #31
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	2102      	movs	r1, #2
 8005802:	fa01 f202 	lsl.w	r2, r1, r2
 8005806:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d038      	beq.n	800588a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005820:	e033      	b.n	800588a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	2208      	movs	r2, #8
 800582c:	409a      	lsls	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d02a      	beq.n	800588c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d025      	beq.n	800588c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 020e 	bic.w	r2, r2, #14
 800584e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005854:	f003 021f 	and.w	r2, r3, #31
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	2101      	movs	r1, #1
 800585e:	fa01 f202 	lsl.w	r2, r1, r2
 8005862:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587e:	2b00      	cmp	r3, #0
 8005880:	d004      	beq.n	800588c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800588a:	bf00      	nop
 800588c:	bf00      	nop
}
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c2:	f003 021f 	and.w	r2, r3, #31
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ca:	2101      	movs	r1, #1
 80058cc:	fa01 f202 	lsl.w	r2, r1, r2
 80058d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d108      	bne.n	80058f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058f2:	e007      	b.n	8005904 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]
}
 8005904:	bf00      	nop
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	4b16      	ldr	r3, [pc, #88]	@ (8005978 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005920:	429a      	cmp	r2, r3
 8005922:	d802      	bhi.n	800592a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005924:	4b15      	ldr	r3, [pc, #84]	@ (800597c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e001      	b.n	800592e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800592a:	4b15      	ldr	r3, [pc, #84]	@ (8005980 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800592c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	3b08      	subs	r3, #8
 800593a:	4a12      	ldr	r2, [pc, #72]	@ (8005984 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	009a      	lsls	r2, r3, #2
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4413      	add	r3, r2
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a0b      	ldr	r2, [pc, #44]	@ (8005988 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800595a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 031f 	and.w	r3, r3, #31
 8005962:	2201      	movs	r2, #1
 8005964:	409a      	lsls	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40020407 	.word	0x40020407
 800597c:	40020800 	.word	0x40020800
 8005980:	40020820 	.word	0x40020820
 8005984:	cccccccd 	.word	0xcccccccd
 8005988:	40020880 	.word	0x40020880

0800598c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	461a      	mov	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a08      	ldr	r2, [pc, #32]	@ (80059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80059ae:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2201      	movs	r2, #1
 80059ba:	409a      	lsls	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	1000823f 	.word	0x1000823f
 80059d0:	40020940 	.word	0x40020940

080059d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059e2:	e15a      	b.n	8005c9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	2101      	movs	r1, #1
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	4013      	ands	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 814c 	beq.w	8005c94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d005      	beq.n	8005a14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d130      	bne.n	8005a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	2203      	movs	r2, #3
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4013      	ands	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	f003 0201 	and.w	r2, r3, #1
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d017      	beq.n	8005ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4013      	ands	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d123      	bne.n	8005b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	08da      	lsrs	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3208      	adds	r2, #8
 8005ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	220f      	movs	r2, #15
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	08da      	lsrs	r2, r3, #3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3208      	adds	r2, #8
 8005b00:	6939      	ldr	r1, [r7, #16]
 8005b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	2203      	movs	r2, #3
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	43db      	mvns	r3, r3
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f003 0203 	and.w	r2, r3, #3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80a6 	beq.w	8005c94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b48:	4b5b      	ldr	r3, [pc, #364]	@ (8005cb8 <HAL_GPIO_Init+0x2e4>)
 8005b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4c:	4a5a      	ldr	r2, [pc, #360]	@ (8005cb8 <HAL_GPIO_Init+0x2e4>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b54:	4b58      	ldr	r3, [pc, #352]	@ (8005cb8 <HAL_GPIO_Init+0x2e4>)
 8005b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b60:	4a56      	ldr	r2, [pc, #344]	@ (8005cbc <HAL_GPIO_Init+0x2e8>)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	089b      	lsrs	r3, r3, #2
 8005b66:	3302      	adds	r3, #2
 8005b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	220f      	movs	r2, #15
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b8a:	d01f      	beq.n	8005bcc <HAL_GPIO_Init+0x1f8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a4c      	ldr	r2, [pc, #304]	@ (8005cc0 <HAL_GPIO_Init+0x2ec>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d019      	beq.n	8005bc8 <HAL_GPIO_Init+0x1f4>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a4b      	ldr	r2, [pc, #300]	@ (8005cc4 <HAL_GPIO_Init+0x2f0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <HAL_GPIO_Init+0x1f0>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a4a      	ldr	r2, [pc, #296]	@ (8005cc8 <HAL_GPIO_Init+0x2f4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00d      	beq.n	8005bc0 <HAL_GPIO_Init+0x1ec>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a49      	ldr	r2, [pc, #292]	@ (8005ccc <HAL_GPIO_Init+0x2f8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <HAL_GPIO_Init+0x1e8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a48      	ldr	r2, [pc, #288]	@ (8005cd0 <HAL_GPIO_Init+0x2fc>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_GPIO_Init+0x1e4>
 8005bb4:	2305      	movs	r3, #5
 8005bb6:	e00a      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bb8:	2306      	movs	r3, #6
 8005bba:	e008      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	e006      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e004      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e002      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <HAL_GPIO_Init+0x1fa>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	f002 0203 	and.w	r2, r2, #3
 8005bd4:	0092      	lsls	r2, r2, #2
 8005bd6:	4093      	lsls	r3, r2
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bde:	4937      	ldr	r1, [pc, #220]	@ (8005cbc <HAL_GPIO_Init+0x2e8>)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	3302      	adds	r3, #2
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bec:	4b39      	ldr	r3, [pc, #228]	@ (8005cd4 <HAL_GPIO_Init+0x300>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c10:	4a30      	ldr	r2, [pc, #192]	@ (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c16:	4b2f      	ldr	r3, [pc, #188]	@ (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4013      	ands	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c3a:	4a26      	ldr	r2, [pc, #152]	@ (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c40:	4b24      	ldr	r3, [pc, #144]	@ (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c64:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c8e:	4a11      	ldr	r2, [pc, #68]	@ (8005cd4 <HAL_GPIO_Init+0x300>)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	3301      	adds	r3, #1
 8005c98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f47f ae9d 	bne.w	80059e4 <HAL_GPIO_Init+0x10>
  }
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	48000400 	.word	0x48000400
 8005cc4:	48000800 	.word	0x48000800
 8005cc8:	48000c00 	.word	0x48000c00
 8005ccc:	48001000 	.word	0x48001000
 8005cd0:	48001400 	.word	0x48001400
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	887b      	ldrh	r3, [r7, #2]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
 8005cf4:	e001      	b.n	8005cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	807b      	strh	r3, [r7, #2]
 8005d14:	4613      	mov	r3, r2
 8005d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d18:	787b      	ldrb	r3, [r7, #1]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d1e:	887a      	ldrh	r2, [r7, #2]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d24:	e002      	b.n	8005d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d26:	887a      	ldrh	r2, [r7, #2]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d42:	4b08      	ldr	r3, [pc, #32]	@ (8005d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d44:	695a      	ldr	r2, [r3, #20]
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d006      	beq.n	8005d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d4e:	4a05      	ldr	r2, [pc, #20]	@ (8005d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fb f83c 	bl	8000dd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40010400 	.word	0x40010400

08005d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d141      	bne.n	8005dfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d76:	4b4b      	ldr	r3, [pc, #300]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d82:	d131      	bne.n	8005de8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d84:	4b47      	ldr	r3, [pc, #284]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8a:	4a46      	ldr	r2, [pc, #280]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d94:	4b43      	ldr	r3, [pc, #268]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d9c:	4a41      	ldr	r2, [pc, #260]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005da2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005da4:	4b40      	ldr	r3, [pc, #256]	@ (8005ea8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2232      	movs	r2, #50	@ 0x32
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	4a3f      	ldr	r2, [pc, #252]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	0c9b      	lsrs	r3, r3, #18
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dba:	e002      	b.n	8005dc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dc2:	4b38      	ldr	r3, [pc, #224]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dce:	d102      	bne.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f2      	bne.n	8005dbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dd6:	4b33      	ldr	r3, [pc, #204]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de2:	d158      	bne.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e057      	b.n	8005e98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005de8:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dee:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005df4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005df8:	e04d      	b.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e00:	d141      	bne.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e02:	4b28      	ldr	r3, [pc, #160]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e0e:	d131      	bne.n	8005e74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e10:	4b24      	ldr	r3, [pc, #144]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e16:	4a23      	ldr	r2, [pc, #140]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e20:	4b20      	ldr	r3, [pc, #128]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e28:	4a1e      	ldr	r2, [pc, #120]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2232      	movs	r2, #50	@ 0x32
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005eac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e40:	0c9b      	lsrs	r3, r3, #18
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e46:	e002      	b.n	8005e4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5a:	d102      	bne.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f2      	bne.n	8005e48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e62:	4b10      	ldr	r3, [pc, #64]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e6e:	d112      	bne.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e011      	b.n	8005e98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e84:	e007      	b.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e86:	4b07      	ldr	r3, [pc, #28]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e8e:	4a05      	ldr	r2, [pc, #20]	@ (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40007000 	.word	0x40007000
 8005ea8:	2000004c 	.word	0x2000004c
 8005eac:	431bde83 	.word	0x431bde83

08005eb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005eb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4a04      	ldr	r2, [pc, #16]	@ (8005ecc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005eba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ebe:	6093      	str	r3, [r2, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40007000 	.word	0x40007000

08005ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e2fe      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d075      	beq.n	8005fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eee:	4b97      	ldr	r3, [pc, #604]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ef8:	4b94      	ldr	r3, [pc, #592]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b0c      	cmp	r3, #12
 8005f06:	d102      	bne.n	8005f0e <HAL_RCC_OscConfig+0x3e>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d002      	beq.n	8005f14 <HAL_RCC_OscConfig+0x44>
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d10b      	bne.n	8005f2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	4b8d      	ldr	r3, [pc, #564]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d05b      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x108>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d157      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e2d9      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f34:	d106      	bne.n	8005f44 <HAL_RCC_OscConfig+0x74>
 8005f36:	4b85      	ldr	r3, [pc, #532]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a84      	ldr	r2, [pc, #528]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e01d      	b.n	8005f80 <HAL_RCC_OscConfig+0xb0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCC_OscConfig+0x98>
 8005f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a7e      	ldr	r2, [pc, #504]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4b7c      	ldr	r3, [pc, #496]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a7b      	ldr	r2, [pc, #492]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e00b      	b.n	8005f80 <HAL_RCC_OscConfig+0xb0>
 8005f68:	4b78      	ldr	r3, [pc, #480]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a77      	ldr	r2, [pc, #476]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	4b75      	ldr	r3, [pc, #468]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a74      	ldr	r2, [pc, #464]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d013      	beq.n	8005fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fd fc6e 	bl	8003868 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f90:	f7fd fc6a 	bl	8003868 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b64      	cmp	r3, #100	@ 0x64
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e29e      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0xc0>
 8005fae:	e014      	b.n	8005fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fd fc5a 	bl	8003868 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb8:	f7fd fc56 	bl	8003868 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b64      	cmp	r3, #100	@ 0x64
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e28a      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fca:	4b60      	ldr	r3, [pc, #384]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0xe8>
 8005fd6:	e000      	b.n	8005fda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d075      	beq.n	80060d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe6:	4b59      	ldr	r3, [pc, #356]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 030c 	and.w	r3, r3, #12
 8005fee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ff0:	4b56      	ldr	r3, [pc, #344]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	d102      	bne.n	8006006 <HAL_RCC_OscConfig+0x136>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d002      	beq.n	800600c <HAL_RCC_OscConfig+0x13c>
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b04      	cmp	r3, #4
 800600a:	d11f      	bne.n	800604c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800600c:	4b4f      	ldr	r3, [pc, #316]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_OscConfig+0x154>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e25d      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006024:	4b49      	ldr	r3, [pc, #292]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	4946      	ldr	r1, [pc, #280]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006038:	4b45      	ldr	r3, [pc, #276]	@ (8006150 <HAL_RCC_OscConfig+0x280>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f7fd fbc7 	bl	80037d0 <HAL_InitTick>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d043      	beq.n	80060d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e249      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d023      	beq.n	800609c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006054:	4b3d      	ldr	r3, [pc, #244]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a3c      	ldr	r2, [pc, #240]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 800605a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800605e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006060:	f7fd fc02 	bl	8003868 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006068:	f7fd fbfe 	bl	8003868 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e232      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800607a:	4b34      	ldr	r3, [pc, #208]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006086:	4b31      	ldr	r3, [pc, #196]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	061b      	lsls	r3, r3, #24
 8006094:	492d      	ldr	r1, [pc, #180]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]
 800609a:	e01a      	b.n	80060d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800609c:	4b2b      	ldr	r3, [pc, #172]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2a      	ldr	r2, [pc, #168]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 80060a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fd fbde 	bl	8003868 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b0:	f7fd fbda 	bl	8003868 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e20e      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060c2:	4b22      	ldr	r3, [pc, #136]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x1e0>
 80060ce:	e000      	b.n	80060d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d041      	beq.n	8006162 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01c      	beq.n	8006120 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060e6:	4b19      	ldr	r3, [pc, #100]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 80060e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ec:	4a17      	ldr	r2, [pc, #92]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f6:	f7fd fbb7 	bl	8003868 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060fe:	f7fd fbb3 	bl	8003868 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e1e7      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006110:	4b0e      	ldr	r3, [pc, #56]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8006112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0ef      	beq.n	80060fe <HAL_RCC_OscConfig+0x22e>
 800611e:	e020      	b.n	8006162 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006120:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006126:	4a09      	ldr	r2, [pc, #36]	@ (800614c <HAL_RCC_OscConfig+0x27c>)
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006130:	f7fd fb9a 	bl	8003868 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006136:	e00d      	b.n	8006154 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006138:	f7fd fb96 	bl	8003868 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d906      	bls.n	8006154 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e1ca      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
 800614a:	bf00      	nop
 800614c:	40021000 	.word	0x40021000
 8006150:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006154:	4b8c      	ldr	r3, [pc, #560]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1ea      	bne.n	8006138 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80a6 	beq.w	80062bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006170:	2300      	movs	r3, #0
 8006172:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006174:	4b84      	ldr	r3, [pc, #528]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_RCC_OscConfig+0x2b4>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_RCC_OscConfig+0x2b6>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800618a:	4b7f      	ldr	r3, [pc, #508]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800618c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618e:	4a7e      	ldr	r2, [pc, #504]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006194:	6593      	str	r3, [r2, #88]	@ 0x58
 8006196:	4b7c      	ldr	r3, [pc, #496]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80061a2:	2301      	movs	r3, #1
 80061a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061a6:	4b79      	ldr	r3, [pc, #484]	@ (800638c <HAL_RCC_OscConfig+0x4bc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d118      	bne.n	80061e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061b2:	4b76      	ldr	r3, [pc, #472]	@ (800638c <HAL_RCC_OscConfig+0x4bc>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a75      	ldr	r2, [pc, #468]	@ (800638c <HAL_RCC_OscConfig+0x4bc>)
 80061b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061be:	f7fd fb53 	bl	8003868 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c6:	f7fd fb4f 	bl	8003868 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e183      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061d8:	4b6c      	ldr	r3, [pc, #432]	@ (800638c <HAL_RCC_OscConfig+0x4bc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0f0      	beq.n	80061c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d108      	bne.n	80061fe <HAL_RCC_OscConfig+0x32e>
 80061ec:	4b66      	ldr	r3, [pc, #408]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f2:	4a65      	ldr	r2, [pc, #404]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061fc:	e024      	b.n	8006248 <HAL_RCC_OscConfig+0x378>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b05      	cmp	r3, #5
 8006204:	d110      	bne.n	8006228 <HAL_RCC_OscConfig+0x358>
 8006206:	4b60      	ldr	r3, [pc, #384]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620c:	4a5e      	ldr	r2, [pc, #376]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800620e:	f043 0304 	orr.w	r3, r3, #4
 8006212:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006216:	4b5c      	ldr	r3, [pc, #368]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621c:	4a5a      	ldr	r2, [pc, #360]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800621e:	f043 0301 	orr.w	r3, r3, #1
 8006222:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006226:	e00f      	b.n	8006248 <HAL_RCC_OscConfig+0x378>
 8006228:	4b57      	ldr	r3, [pc, #348]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622e:	4a56      	ldr	r2, [pc, #344]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006238:	4b53      	ldr	r3, [pc, #332]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623e:	4a52      	ldr	r2, [pc, #328]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006240:	f023 0304 	bic.w	r3, r3, #4
 8006244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d016      	beq.n	800627e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006250:	f7fd fb0a 	bl	8003868 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006256:	e00a      	b.n	800626e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006258:	f7fd fb06 	bl	8003868 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e138      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800626e:	4b46      	ldr	r3, [pc, #280]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0ed      	beq.n	8006258 <HAL_RCC_OscConfig+0x388>
 800627c:	e015      	b.n	80062aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627e:	f7fd faf3 	bl	8003868 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006284:	e00a      	b.n	800629c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006286:	f7fd faef 	bl	8003868 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e121      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800629c:	4b3a      	ldr	r3, [pc, #232]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1ed      	bne.n	8006286 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062aa:	7ffb      	ldrb	r3, [r7, #31]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d105      	bne.n	80062bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b0:	4b35      	ldr	r3, [pc, #212]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b4:	4a34      	ldr	r2, [pc, #208]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d03c      	beq.n	8006342 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01c      	beq.n	800630a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e0:	f7fd fac2 	bl	8003868 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062e8:	f7fd fabe 	bl	8003868 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e0f2      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062fa:	4b23      	ldr	r3, [pc, #140]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0ef      	beq.n	80062e8 <HAL_RCC_OscConfig+0x418>
 8006308:	e01b      	b.n	8006342 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800630a:	4b1f      	ldr	r3, [pc, #124]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800630c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006310:	4a1d      	ldr	r2, [pc, #116]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006312:	f023 0301 	bic.w	r3, r3, #1
 8006316:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631a:	f7fd faa5 	bl	8003868 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006322:	f7fd faa1 	bl	8003868 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e0d5      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006334:	4b14      	ldr	r3, [pc, #80]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ef      	bne.n	8006322 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80c9 	beq.w	80064de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800634c:	4b0e      	ldr	r3, [pc, #56]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b0c      	cmp	r3, #12
 8006356:	f000 8083 	beq.w	8006460 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d15e      	bne.n	8006420 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006362:	4b09      	ldr	r3, [pc, #36]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a08      	ldr	r2, [pc, #32]	@ (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006368:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800636c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636e:	f7fd fa7b 	bl	8003868 <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006374:	e00c      	b.n	8006390 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006376:	f7fd fa77 	bl	8003868 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d905      	bls.n	8006390 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e0ab      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
 8006388:	40021000 	.word	0x40021000
 800638c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006390:	4b55      	ldr	r3, [pc, #340]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1ec      	bne.n	8006376 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800639c:	4b52      	ldr	r3, [pc, #328]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	4b52      	ldr	r3, [pc, #328]	@ (80064ec <HAL_RCC_OscConfig+0x61c>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6a11      	ldr	r1, [r2, #32]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063ac:	3a01      	subs	r2, #1
 80063ae:	0112      	lsls	r2, r2, #4
 80063b0:	4311      	orrs	r1, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80063b6:	0212      	lsls	r2, r2, #8
 80063b8:	4311      	orrs	r1, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063be:	0852      	lsrs	r2, r2, #1
 80063c0:	3a01      	subs	r2, #1
 80063c2:	0552      	lsls	r2, r2, #21
 80063c4:	4311      	orrs	r1, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063ca:	0852      	lsrs	r2, r2, #1
 80063cc:	3a01      	subs	r2, #1
 80063ce:	0652      	lsls	r2, r2, #25
 80063d0:	4311      	orrs	r1, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063d6:	06d2      	lsls	r2, r2, #27
 80063d8:	430a      	orrs	r2, r1
 80063da:	4943      	ldr	r1, [pc, #268]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063e0:	4b41      	ldr	r3, [pc, #260]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a40      	ldr	r2, [pc, #256]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063ec:	4b3e      	ldr	r3, [pc, #248]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4a3d      	ldr	r2, [pc, #244]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fd fa36 	bl	8003868 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006400:	f7fd fa32 	bl	8003868 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e066      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006412:	4b35      	ldr	r3, [pc, #212]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x530>
 800641e:	e05e      	b.n	80064de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006420:	4b31      	ldr	r3, [pc, #196]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a30      	ldr	r2, [pc, #192]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006426:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800642a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642c:	f7fd fa1c 	bl	8003868 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006434:	f7fd fa18 	bl	8003868 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e04c      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006446:	4b28      	ldr	r3, [pc, #160]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006452:	4b25      	ldr	r3, [pc, #148]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	4924      	ldr	r1, [pc, #144]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006458:	4b25      	ldr	r3, [pc, #148]	@ (80064f0 <HAL_RCC_OscConfig+0x620>)
 800645a:	4013      	ands	r3, r2
 800645c:	60cb      	str	r3, [r1, #12]
 800645e:	e03e      	b.n	80064de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e039      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800646c:	4b1e      	ldr	r3, [pc, #120]	@ (80064e8 <HAL_RCC_OscConfig+0x618>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f003 0203 	and.w	r2, r3, #3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	429a      	cmp	r2, r3
 800647e:	d12c      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648a:	3b01      	subs	r3, #1
 800648c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648e:	429a      	cmp	r2, r3
 8006490:	d123      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d11b      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d113      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	3b01      	subs	r3, #1
 80064c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d109      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	3b01      	subs	r3, #1
 80064d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d001      	beq.n	80064de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3720      	adds	r7, #32
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40021000 	.word	0x40021000
 80064ec:	019f800c 	.word	0x019f800c
 80064f0:	feeefffc 	.word	0xfeeefffc

080064f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e11e      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800650c:	4b91      	ldr	r3, [pc, #580]	@ (8006754 <HAL_RCC_ClockConfig+0x260>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d910      	bls.n	800653c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651a:	4b8e      	ldr	r3, [pc, #568]	@ (8006754 <HAL_RCC_ClockConfig+0x260>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 020f 	bic.w	r2, r3, #15
 8006522:	498c      	ldr	r1, [pc, #560]	@ (8006754 <HAL_RCC_ClockConfig+0x260>)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	4313      	orrs	r3, r2
 8006528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652a:	4b8a      	ldr	r3, [pc, #552]	@ (8006754 <HAL_RCC_ClockConfig+0x260>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d001      	beq.n	800653c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e106      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d073      	beq.n	8006630 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d129      	bne.n	80065a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006550:	4b81      	ldr	r3, [pc, #516]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e0f4      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006560:	f000 f99e 	bl	80068a0 <RCC_GetSysClockFreqFromPLLSource>
 8006564:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4a7c      	ldr	r2, [pc, #496]	@ (800675c <HAL_RCC_ClockConfig+0x268>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d93f      	bls.n	80065ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800656e:	4b7a      	ldr	r3, [pc, #488]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006582:	2b00      	cmp	r3, #0
 8006584:	d033      	beq.n	80065ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800658a:	2b00      	cmp	r3, #0
 800658c:	d12f      	bne.n	80065ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800658e:	4b72      	ldr	r3, [pc, #456]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006596:	4a70      	ldr	r2, [pc, #448]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800659c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800659e:	2380      	movs	r3, #128	@ 0x80
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e024      	b.n	80065ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d107      	bne.n	80065bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ac:	4b6a      	ldr	r3, [pc, #424]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0c6      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065bc:	4b66      	ldr	r3, [pc, #408]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0be      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80065cc:	f000 f8ce 	bl	800676c <HAL_RCC_GetSysClockFreq>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4a61      	ldr	r2, [pc, #388]	@ (800675c <HAL_RCC_ClockConfig+0x268>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d909      	bls.n	80065ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065da:	4b5f      	ldr	r3, [pc, #380]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065e2:	4a5d      	ldr	r2, [pc, #372]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065ea:	2380      	movs	r3, #128	@ 0x80
 80065ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065ee:	4b5a      	ldr	r3, [pc, #360]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f023 0203 	bic.w	r2, r3, #3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4957      	ldr	r1, [pc, #348]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006600:	f7fd f932 	bl	8003868 <HAL_GetTick>
 8006604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006606:	e00a      	b.n	800661e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006608:	f7fd f92e 	bl	8003868 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006616:	4293      	cmp	r3, r2
 8006618:	d901      	bls.n	800661e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e095      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800661e:	4b4e      	ldr	r3, [pc, #312]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 020c 	and.w	r2, r3, #12
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	429a      	cmp	r2, r3
 800662e:	d1eb      	bne.n	8006608 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d023      	beq.n	8006684 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006648:	4b43      	ldr	r3, [pc, #268]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	4a42      	ldr	r2, [pc, #264]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 800664e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006652:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006660:	4b3d      	ldr	r3, [pc, #244]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006668:	4a3b      	ldr	r2, [pc, #236]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 800666a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800666e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006670:	4b39      	ldr	r3, [pc, #228]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4936      	ldr	r1, [pc, #216]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 800667e:	4313      	orrs	r3, r2
 8006680:	608b      	str	r3, [r1, #8]
 8006682:	e008      	b.n	8006696 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b80      	cmp	r3, #128	@ 0x80
 8006688:	d105      	bne.n	8006696 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800668a:	4b33      	ldr	r3, [pc, #204]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4a32      	ldr	r2, [pc, #200]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006690:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006694:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006696:	4b2f      	ldr	r3, [pc, #188]	@ (8006754 <HAL_RCC_ClockConfig+0x260>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d21d      	bcs.n	80066e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006754 <HAL_RCC_ClockConfig+0x260>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f023 020f 	bic.w	r2, r3, #15
 80066ac:	4929      	ldr	r1, [pc, #164]	@ (8006754 <HAL_RCC_ClockConfig+0x260>)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80066b4:	f7fd f8d8 	bl	8003868 <HAL_GetTick>
 80066b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ba:	e00a      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066bc:	f7fd f8d4 	bl	8003868 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e03b      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d2:	4b20      	ldr	r3, [pc, #128]	@ (8006754 <HAL_RCC_ClockConfig+0x260>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d1ed      	bne.n	80066bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4917      	ldr	r1, [pc, #92]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d009      	beq.n	800671e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800670a:	4b13      	ldr	r3, [pc, #76]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	490f      	ldr	r1, [pc, #60]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800671e:	f000 f825 	bl	800676c <HAL_RCC_GetSysClockFreq>
 8006722:	4602      	mov	r2, r0
 8006724:	4b0c      	ldr	r3, [pc, #48]	@ (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	490c      	ldr	r1, [pc, #48]	@ (8006760 <HAL_RCC_ClockConfig+0x26c>)
 8006730:	5ccb      	ldrb	r3, [r1, r3]
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	fa22 f303 	lsr.w	r3, r2, r3
 800673a:	4a0a      	ldr	r2, [pc, #40]	@ (8006764 <HAL_RCC_ClockConfig+0x270>)
 800673c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800673e:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <HAL_RCC_ClockConfig+0x274>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f7fd f844 	bl	80037d0 <HAL_InitTick>
 8006748:	4603      	mov	r3, r0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40022000 	.word	0x40022000
 8006758:	40021000 	.word	0x40021000
 800675c:	04c4b400 	.word	0x04c4b400
 8006760:	0800bfc8 	.word	0x0800bfc8
 8006764:	2000004c 	.word	0x2000004c
 8006768:	20000050 	.word	0x20000050

0800676c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006772:	4b2c      	ldr	r3, [pc, #176]	@ (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	2b04      	cmp	r3, #4
 800677c:	d102      	bne.n	8006784 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800677e:	4b2a      	ldr	r3, [pc, #168]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	e047      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006784:	4b27      	ldr	r3, [pc, #156]	@ (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 030c 	and.w	r3, r3, #12
 800678c:	2b08      	cmp	r3, #8
 800678e:	d102      	bne.n	8006796 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006790:	4b26      	ldr	r3, [pc, #152]	@ (800682c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	e03e      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006796:	4b23      	ldr	r3, [pc, #140]	@ (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 030c 	and.w	r3, r3, #12
 800679e:	2b0c      	cmp	r3, #12
 80067a0:	d136      	bne.n	8006810 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067a2:	4b20      	ldr	r3, [pc, #128]	@ (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	091b      	lsrs	r3, r3, #4
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	3301      	adds	r3, #1
 80067b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d10c      	bne.n	80067da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067c0:	4a1a      	ldr	r2, [pc, #104]	@ (800682c <HAL_RCC_GetSysClockFreq+0xc0>)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	4a16      	ldr	r2, [pc, #88]	@ (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ca:	68d2      	ldr	r2, [r2, #12]
 80067cc:	0a12      	lsrs	r2, r2, #8
 80067ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	617b      	str	r3, [r7, #20]
      break;
 80067d8:	e00c      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067da:	4a13      	ldr	r2, [pc, #76]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e2:	4a10      	ldr	r2, [pc, #64]	@ (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067e4:	68d2      	ldr	r2, [r2, #12]
 80067e6:	0a12      	lsrs	r2, r2, #8
 80067e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
      break;
 80067f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	0e5b      	lsrs	r3, r3, #25
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	3301      	adds	r3, #1
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	e001      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006814:	693b      	ldr	r3, [r7, #16]
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40021000 	.word	0x40021000
 8006828:	00f42400 	.word	0x00f42400
 800682c:	007a1200 	.word	0x007a1200

08006830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006834:	4b03      	ldr	r3, [pc, #12]	@ (8006844 <HAL_RCC_GetHCLKFreq+0x14>)
 8006836:	681b      	ldr	r3, [r3, #0]
}
 8006838:	4618      	mov	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	2000004c 	.word	0x2000004c

08006848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800684c:	f7ff fff0 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 8006850:	4602      	mov	r2, r0
 8006852:	4b06      	ldr	r3, [pc, #24]	@ (800686c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	4904      	ldr	r1, [pc, #16]	@ (8006870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800685e:	5ccb      	ldrb	r3, [r1, r3]
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006868:	4618      	mov	r0, r3
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40021000 	.word	0x40021000
 8006870:	0800bfd8 	.word	0x0800bfd8

08006874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006878:	f7ff ffda 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 800687c:	4602      	mov	r2, r0
 800687e:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	0adb      	lsrs	r3, r3, #11
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	4904      	ldr	r1, [pc, #16]	@ (800689c <HAL_RCC_GetPCLK2Freq+0x28>)
 800688a:	5ccb      	ldrb	r3, [r1, r3]
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006894:	4618      	mov	r0, r3
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40021000 	.word	0x40021000
 800689c:	0800bfd8 	.word	0x0800bfd8

080068a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	091b      	lsrs	r3, r3, #4
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d10c      	bne.n	80068de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068c4:	4a17      	ldr	r2, [pc, #92]	@ (8006924 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	4a14      	ldr	r2, [pc, #80]	@ (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068ce:	68d2      	ldr	r2, [r2, #12]
 80068d0:	0a12      	lsrs	r2, r2, #8
 80068d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068d6:	fb02 f303 	mul.w	r3, r2, r3
 80068da:	617b      	str	r3, [r7, #20]
    break;
 80068dc:	e00c      	b.n	80068f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068de:	4a12      	ldr	r2, [pc, #72]	@ (8006928 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068e8:	68d2      	ldr	r2, [r2, #12]
 80068ea:	0a12      	lsrs	r2, r2, #8
 80068ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068f0:	fb02 f303 	mul.w	r3, r2, r3
 80068f4:	617b      	str	r3, [r7, #20]
    break;
 80068f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068f8:	4b09      	ldr	r3, [pc, #36]	@ (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	0e5b      	lsrs	r3, r3, #25
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	3301      	adds	r3, #1
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006910:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006912:	687b      	ldr	r3, [r7, #4]
}
 8006914:	4618      	mov	r0, r3
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	40021000 	.word	0x40021000
 8006924:	007a1200 	.word	0x007a1200
 8006928:	00f42400 	.word	0x00f42400

0800692c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006934:	2300      	movs	r3, #0
 8006936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006938:	2300      	movs	r3, #0
 800693a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8098 	beq.w	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800694a:	2300      	movs	r3, #0
 800694c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800694e:	4b43      	ldr	r3, [pc, #268]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10d      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800695a:	4b40      	ldr	r3, [pc, #256]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800695c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695e:	4a3f      	ldr	r2, [pc, #252]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006964:	6593      	str	r3, [r2, #88]	@ 0x58
 8006966:	4b3d      	ldr	r3, [pc, #244]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006972:	2301      	movs	r3, #1
 8006974:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006976:	4b3a      	ldr	r3, [pc, #232]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a39      	ldr	r2, [pc, #228]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800697c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006982:	f7fc ff71 	bl	8003868 <HAL_GetTick>
 8006986:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006988:	e009      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800698a:	f7fc ff6d 	bl	8003868 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d902      	bls.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	74fb      	strb	r3, [r7, #19]
        break;
 800699c:	e005      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800699e:	4b30      	ldr	r3, [pc, #192]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0ef      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80069aa:	7cfb      	ldrb	r3, [r7, #19]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d159      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069b0:	4b2a      	ldr	r3, [pc, #168]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01e      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d019      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069cc:	4b23      	ldr	r3, [pc, #140]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069d8:	4b20      	ldr	r3, [pc, #128]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069de:	4a1f      	ldr	r2, [pc, #124]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069e8:	4b1c      	ldr	r3, [pc, #112]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ee:	4a1b      	ldr	r2, [pc, #108]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069f8:	4a18      	ldr	r2, [pc, #96]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fc ff2d 	bl	8003868 <HAL_GetTick>
 8006a0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a10:	e00b      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a12:	f7fc ff29 	bl	8003868 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d902      	bls.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	74fb      	strb	r3, [r7, #19]
            break;
 8006a28:	e006      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0ec      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a38:	7cfb      	ldrb	r3, [r7, #19]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a3e:	4b07      	ldr	r3, [pc, #28]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4c:	4903      	ldr	r1, [pc, #12]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006a54:	e008      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a56:	7cfb      	ldrb	r3, [r7, #19]
 8006a58:	74bb      	strb	r3, [r7, #18]
 8006a5a:	e005      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a64:	7cfb      	ldrb	r3, [r7, #19]
 8006a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a68:	7c7b      	ldrb	r3, [r7, #17]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d105      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a6e:	4ba6      	ldr	r3, [pc, #664]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a72:	4aa5      	ldr	r2, [pc, #660]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a86:	4ba0      	ldr	r3, [pc, #640]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8c:	f023 0203 	bic.w	r2, r3, #3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	499c      	ldr	r1, [pc, #624]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006aa8:	4b97      	ldr	r3, [pc, #604]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aae:	f023 020c 	bic.w	r2, r3, #12
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	4994      	ldr	r1, [pc, #592]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006aca:	4b8f      	ldr	r3, [pc, #572]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	498b      	ldr	r1, [pc, #556]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006aec:	4b86      	ldr	r3, [pc, #536]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	4983      	ldr	r1, [pc, #524]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b0e:	4b7e      	ldr	r3, [pc, #504]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b14:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	497a      	ldr	r1, [pc, #488]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b30:	4b75      	ldr	r3, [pc, #468]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	4972      	ldr	r1, [pc, #456]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b52:	4b6d      	ldr	r3, [pc, #436]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	4969      	ldr	r1, [pc, #420]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00a      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b74:	4b64      	ldr	r3, [pc, #400]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	4961      	ldr	r1, [pc, #388]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b96:	4b5c      	ldr	r3, [pc, #368]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba4:	4958      	ldr	r1, [pc, #352]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d015      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bb8:	4b53      	ldr	r3, [pc, #332]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	4950      	ldr	r1, [pc, #320]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bd6:	d105      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006be2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d015      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bf0:	4b45      	ldr	r3, [pc, #276]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	4942      	ldr	r1, [pc, #264]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c0e:	d105      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c10:	4b3d      	ldr	r3, [pc, #244]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4a3c      	ldr	r2, [pc, #240]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d015      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c28:	4b37      	ldr	r3, [pc, #220]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c36:	4934      	ldr	r1, [pc, #208]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c46:	d105      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c48:	4b2f      	ldr	r3, [pc, #188]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d015      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c60:	4b29      	ldr	r3, [pc, #164]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c6e:	4926      	ldr	r1, [pc, #152]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c7e:	d105      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c80:	4b21      	ldr	r3, [pc, #132]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	4a20      	ldr	r2, [pc, #128]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d015      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c98:	4b1b      	ldr	r3, [pc, #108]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca6:	4918      	ldr	r1, [pc, #96]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb6:	d105      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cb8:	4b13      	ldr	r3, [pc, #76]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4a12      	ldr	r2, [pc, #72]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cde:	490a      	ldr	r1, [pc, #40]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cee:	d105      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4a04      	ldr	r2, [pc, #16]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40021000 	.word	0x40021000

08006d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e09d      	b.n	8006e5a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d108      	bne.n	8006d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d2e:	d009      	beq.n	8006d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	61da      	str	r2, [r3, #28]
 8006d36:	e005      	b.n	8006d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fc fa46 	bl	80031f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d84:	d902      	bls.n	8006d8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	e002      	b.n	8006d92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d9a:	d007      	beq.n	8006dac <HAL_SPI_Init+0xa0>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006da4:	d002      	beq.n	8006dac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dee:	ea42 0103 	orr.w	r1, r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	0c1b      	lsrs	r3, r3, #16
 8006e08:	f003 0204 	and.w	r2, r3, #4
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e28:	ea42 0103 	orr.w	r1, r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b088      	sub	sp, #32
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	603b      	str	r3, [r7, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_SPI_Transmit+0x22>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e15f      	b.n	8007144 <HAL_SPI_Transmit+0x2e2>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e8c:	f7fc fcec 	bl	8003868 <HAL_GetTick>
 8006e90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d002      	beq.n	8006ea8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ea6:	e148      	b.n	800713a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_SPI_Transmit+0x52>
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eb8:	e13f      	b.n	800713a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	88fa      	ldrh	r2, [r7, #6]
 8006ed2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f04:	d10f      	bne.n	8006f26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f30:	2b40      	cmp	r3, #64	@ 0x40
 8006f32:	d007      	beq.n	8006f44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f4c:	d94f      	bls.n	8006fee <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <HAL_SPI_Transmit+0xfa>
 8006f56:	8afb      	ldrh	r3, [r7, #22]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d142      	bne.n	8006fe2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f60:	881a      	ldrh	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	1c9a      	adds	r2, r3, #2
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f80:	e02f      	b.n	8006fe2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d112      	bne.n	8006fb6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f94:	881a      	ldrh	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa0:	1c9a      	adds	r2, r3, #2
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fb4:	e015      	b.n	8006fe2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb6:	f7fc fc57 	bl	8003868 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d803      	bhi.n	8006fce <HAL_SPI_Transmit+0x16c>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d102      	bne.n	8006fd4 <HAL_SPI_Transmit+0x172>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006fe0:	e0ab      	b.n	800713a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1ca      	bne.n	8006f82 <HAL_SPI_Transmit+0x120>
 8006fec:	e080      	b.n	80070f0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <HAL_SPI_Transmit+0x19a>
 8006ff6:	8afb      	ldrh	r3, [r7, #22]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d174      	bne.n	80070e6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	d912      	bls.n	800702c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700a:	881a      	ldrh	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b02      	subs	r3, #2
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800702a:	e05c      	b.n	80070e6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007052:	e048      	b.n	80070e6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b02      	cmp	r3, #2
 8007060:	d12b      	bne.n	80070ba <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d912      	bls.n	8007092 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007070:	881a      	ldrh	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	1c9a      	adds	r2, r3, #2
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b02      	subs	r3, #2
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007090:	e029      	b.n	80070e6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	330c      	adds	r3, #12
 800709c:	7812      	ldrb	r2, [r2, #0]
 800709e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070b8:	e015      	b.n	80070e6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ba:	f7fc fbd5 	bl	8003868 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d803      	bhi.n	80070d2 <HAL_SPI_Transmit+0x270>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d0:	d102      	bne.n	80070d8 <HAL_SPI_Transmit+0x276>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80070e4:	e029      	b.n	800713a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1b1      	bne.n	8007054 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fcf9 	bl	8007aec <SPI_EndRxTxTransaction>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2220      	movs	r2, #32
 8007104:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e003      	b.n	800713a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007142:	7ffb      	ldrb	r3, [r7, #31]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3720      	adds	r7, #32
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af02      	add	r7, sp, #8
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	4613      	mov	r3, r2
 800715a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b01      	cmp	r3, #1
 800716a:	d002      	beq.n	8007172 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800716c:	2302      	movs	r3, #2
 800716e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007170:	e11a      	b.n	80073a8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800717a:	d112      	bne.n	80071a2 <HAL_SPI_Receive+0x56>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10e      	bne.n	80071a2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2204      	movs	r2, #4
 8007188:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800718c:	88fa      	ldrh	r2, [r7, #6]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	4613      	mov	r3, r2
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f90e 	bl	80073ba <HAL_SPI_TransmitReceive>
 800719e:	4603      	mov	r3, r0
 80071a0:	e107      	b.n	80073b2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_SPI_Receive+0x64>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e100      	b.n	80073b2 <HAL_SPI_Receive+0x266>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071b8:	f7fc fb56 	bl	8003868 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <HAL_SPI_Receive+0x7e>
 80071c4:	88fb      	ldrh	r3, [r7, #6]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d102      	bne.n	80071d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071ce:	e0eb      	b.n	80073a8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2204      	movs	r2, #4
 80071d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800721a:	d908      	bls.n	800722e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800722a:	605a      	str	r2, [r3, #4]
 800722c:	e007      	b.n	800723e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800723c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007246:	d10f      	bne.n	8007268 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007256:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007266:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007272:	2b40      	cmp	r3, #64	@ 0x40
 8007274:	d007      	beq.n	8007286 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007284:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800728e:	d86f      	bhi.n	8007370 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007290:	e034      	b.n	80072fc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b01      	cmp	r3, #1
 800729e:	d117      	bne.n	80072d0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f103 020c 	add.w	r2, r3, #12
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ac:	7812      	ldrb	r2, [r2, #0]
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80072ce:	e015      	b.n	80072fc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072d0:	f7fc faca 	bl	8003868 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d803      	bhi.n	80072e8 <HAL_SPI_Receive+0x19c>
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e6:	d102      	bne.n	80072ee <HAL_SPI_Receive+0x1a2>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d106      	bne.n	80072fc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80072fa:	e055      	b.n	80073a8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1c4      	bne.n	8007292 <HAL_SPI_Receive+0x146>
 8007308:	e038      	b.n	800737c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b01      	cmp	r3, #1
 8007316:	d115      	bne.n	8007344 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	b292      	uxth	r2, r2
 8007324:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	1c9a      	adds	r2, r3, #2
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b01      	subs	r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007342:	e015      	b.n	8007370 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007344:	f7fc fa90 	bl	8003868 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d803      	bhi.n	800735c <HAL_SPI_Receive+0x210>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735a:	d102      	bne.n	8007362 <HAL_SPI_Receive+0x216>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800736e:	e01b      	b.n	80073a8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1c6      	bne.n	800730a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fb5b 	bl	8007a3c <SPI_EndRxTransaction>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	75fb      	strb	r3, [r7, #23]
 800739e:	e003      	b.n	80073a8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b08a      	sub	sp, #40	@ 0x28
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
 80073c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073c8:	2301      	movs	r3, #1
 80073ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_SPI_TransmitReceive+0x26>
 80073dc:	2302      	movs	r3, #2
 80073de:	e20a      	b.n	80077f6 <HAL_SPI_TransmitReceive+0x43c>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073e8:	f7fc fa3e 	bl	8003868 <HAL_GetTick>
 80073ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80073fc:	887b      	ldrh	r3, [r7, #2]
 80073fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007400:	887b      	ldrh	r3, [r7, #2]
 8007402:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007404:	7efb      	ldrb	r3, [r7, #27]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d00e      	beq.n	8007428 <HAL_SPI_TransmitReceive+0x6e>
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007410:	d106      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x66>
 800741a:	7efb      	ldrb	r3, [r7, #27]
 800741c:	2b04      	cmp	r3, #4
 800741e:	d003      	beq.n	8007428 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007420:	2302      	movs	r3, #2
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007426:	e1e0      	b.n	80077ea <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_SPI_TransmitReceive+0x80>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_SPI_TransmitReceive+0x80>
 8007434:	887b      	ldrh	r3, [r7, #2]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d103      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007440:	e1d3      	b.n	80077ea <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b04      	cmp	r3, #4
 800744c:	d003      	beq.n	8007456 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2205      	movs	r2, #5
 8007452:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	887a      	ldrh	r2, [r7, #2]
 8007466:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	887a      	ldrh	r2, [r7, #2]
 800746e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	887a      	ldrh	r2, [r7, #2]
 800747c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	887a      	ldrh	r2, [r7, #2]
 8007482:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007498:	d802      	bhi.n	80074a0 <HAL_SPI_TransmitReceive+0xe6>
 800749a:	8a3b      	ldrh	r3, [r7, #16]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d908      	bls.n	80074b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80074ae:	605a      	str	r2, [r3, #4]
 80074b0:	e007      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80074c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074cc:	2b40      	cmp	r3, #64	@ 0x40
 80074ce:	d007      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074e8:	f240 8081 	bls.w	80075ee <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <HAL_SPI_TransmitReceive+0x140>
 80074f4:	8a7b      	ldrh	r3, [r7, #18]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d16d      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750a:	1c9a      	adds	r2, r3, #2
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800751e:	e05a      	b.n	80075d6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d11b      	bne.n	8007566 <HAL_SPI_TransmitReceive+0x1ac>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d016      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x1ac>
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	2b01      	cmp	r3, #1
 800753c:	d113      	bne.n	8007566 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	881a      	ldrh	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800754e:	1c9a      	adds	r2, r3, #2
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b01      	cmp	r3, #1
 8007572:	d11c      	bne.n	80075ae <HAL_SPI_TransmitReceive+0x1f4>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d016      	beq.n	80075ae <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	b292      	uxth	r2, r2
 800758c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007592:	1c9a      	adds	r2, r3, #2
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075aa:	2301      	movs	r3, #1
 80075ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075ae:	f7fc f95b 	bl	8003868 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d80b      	bhi.n	80075d6 <HAL_SPI_TransmitReceive+0x21c>
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c4:	d007      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80075d4:	e109      	b.n	80077ea <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d19f      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x166>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d199      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x166>
 80075ec:	e0e3      	b.n	80077b6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_SPI_TransmitReceive+0x244>
 80075f6:	8a7b      	ldrh	r3, [r7, #18]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	f040 80cf 	bne.w	800779c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d912      	bls.n	800762e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760c:	881a      	ldrh	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007618:	1c9a      	adds	r2, r3, #2
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b02      	subs	r3, #2
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800762c:	e0b6      	b.n	800779c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	330c      	adds	r3, #12
 8007638:	7812      	ldrb	r2, [r2, #0]
 800763a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007654:	e0a2      	b.n	800779c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b02      	cmp	r3, #2
 8007662:	d134      	bne.n	80076ce <HAL_SPI_TransmitReceive+0x314>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d02f      	beq.n	80076ce <HAL_SPI_TransmitReceive+0x314>
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	2b01      	cmp	r3, #1
 8007672:	d12c      	bne.n	80076ce <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007678:	b29b      	uxth	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	d912      	bls.n	80076a4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007682:	881a      	ldrh	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768e:	1c9a      	adds	r2, r3, #2
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b02      	subs	r3, #2
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076a2:	e012      	b.n	80076ca <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	330c      	adds	r3, #12
 80076ae:	7812      	ldrb	r2, [r2, #0]
 80076b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d148      	bne.n	800776e <HAL_SPI_TransmitReceive+0x3b4>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d042      	beq.n	800776e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d923      	bls.n	800773c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fe:	b292      	uxth	r2, r2
 8007700:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	1c9a      	adds	r2, r3, #2
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b02      	subs	r3, #2
 8007716:	b29a      	uxth	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b01      	cmp	r3, #1
 8007728:	d81f      	bhi.n	800776a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007738:	605a      	str	r2, [r3, #4]
 800773a:	e016      	b.n	800776a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f103 020c 	add.w	r2, r3, #12
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	7812      	ldrb	r2, [r2, #0]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800776a:	2301      	movs	r3, #1
 800776c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800776e:	f7fc f87b 	bl	8003868 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800777a:	429a      	cmp	r2, r3
 800777c:	d803      	bhi.n	8007786 <HAL_SPI_TransmitReceive+0x3cc>
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d102      	bne.n	800778c <HAL_SPI_TransmitReceive+0x3d2>
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	2b00      	cmp	r3, #0
 800778a:	d107      	bne.n	800779c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800779a:	e026      	b.n	80077ea <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f47f af57 	bne.w	8007656 <HAL_SPI_TransmitReceive+0x29c>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f47f af50 	bne.w	8007656 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 f996 	bl	8007aec <SPI_EndRxTxTransaction>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2220      	movs	r2, #32
 80077d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077e0:	e003      	b.n	80077ea <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80077f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3728      	adds	r7, #40	@ 0x28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	4613      	mov	r3, r2
 800780e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007810:	f7fc f82a 	bl	8003868 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007818:	1a9b      	subs	r3, r3, r2
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	4413      	add	r3, r2
 800781e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007820:	f7fc f822 	bl	8003868 <HAL_GetTick>
 8007824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007826:	4b39      	ldr	r3, [pc, #228]	@ (800790c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	015b      	lsls	r3, r3, #5
 800782c:	0d1b      	lsrs	r3, r3, #20
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	fb02 f303 	mul.w	r3, r2, r3
 8007834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007836:	e054      	b.n	80078e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783e:	d050      	beq.n	80078e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007840:	f7fc f812 	bl	8003868 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	429a      	cmp	r2, r3
 800784e:	d902      	bls.n	8007856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d13d      	bne.n	80078d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800786e:	d111      	bne.n	8007894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007878:	d004      	beq.n	8007884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007882:	d107      	bne.n	8007894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800789c:	d10f      	bne.n	80078be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e017      	b.n	8007902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	3b01      	subs	r3, #1
 80078e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4013      	ands	r3, r2
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	bf0c      	ite	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	2300      	movne	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d19b      	bne.n	8007838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3720      	adds	r7, #32
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	2000004c 	.word	0x2000004c

08007910 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	@ 0x28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007922:	f7fb ffa1 	bl	8003868 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	4413      	add	r3, r2
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007932:	f7fb ff99 	bl	8003868 <HAL_GetTick>
 8007936:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	330c      	adds	r3, #12
 800793e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007940:	4b3d      	ldr	r3, [pc, #244]	@ (8007a38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	00da      	lsls	r2, r3, #3
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	0d1b      	lsrs	r3, r3, #20
 8007950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007952:	fb02 f303 	mul.w	r3, r2, r3
 8007956:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007958:	e060      	b.n	8007a1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007960:	d107      	bne.n	8007972 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d104      	bne.n	8007972 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007970:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007978:	d050      	beq.n	8007a1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800797a:	f7fb ff75 	bl	8003868 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007986:	429a      	cmp	r2, r3
 8007988:	d902      	bls.n	8007990 <SPI_WaitFifoStateUntilTimeout+0x80>
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	d13d      	bne.n	8007a0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800799e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079a8:	d111      	bne.n	80079ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079b2:	d004      	beq.n	80079be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079bc:	d107      	bne.n	80079ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079d6:	d10f      	bne.n	80079f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e010      	b.n	8007a2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	4013      	ands	r3, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d196      	bne.n	800795a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3728      	adds	r7, #40	@ 0x28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	2000004c 	.word	0x2000004c

08007a3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a50:	d111      	bne.n	8007a76 <SPI_EndRxTransaction+0x3a>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a5a:	d004      	beq.n	8007a66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a64:	d107      	bne.n	8007a76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2180      	movs	r1, #128	@ 0x80
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f7ff febd 	bl	8007800 <SPI_WaitFlagStateUntilTimeout>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d007      	beq.n	8007a9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a90:	f043 0220 	orr.w	r2, r3, #32
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e023      	b.n	8007ae4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aa4:	d11d      	bne.n	8007ae2 <SPI_EndRxTransaction+0xa6>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aae:	d004      	beq.n	8007aba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ab8:	d113      	bne.n	8007ae2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff ff22 	bl	8007910 <SPI_WaitFifoStateUntilTimeout>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d007      	beq.n	8007ae2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ad6:	f043 0220 	orr.w	r2, r3, #32
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e000      	b.n	8007ae4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff ff03 	bl	8007910 <SPI_WaitFifoStateUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b14:	f043 0220 	orr.w	r2, r3, #32
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e027      	b.n	8007b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	2180      	movs	r1, #128	@ 0x80
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff fe68 	bl	8007800 <SPI_WaitFlagStateUntilTimeout>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b3a:	f043 0220 	orr.w	r2, r3, #32
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e014      	b.n	8007b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff fedc 	bl	8007910 <SPI_WaitFifoStateUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e000      	b.n	8007b70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e049      	b.n	8007c1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fb fbd6 	bl	8003350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f000 fde0 	bl	800877c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d001      	beq.n	8007c40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e042      	b.n	8007cc6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a21      	ldr	r2, [pc, #132]	@ (8007cd4 <HAL_TIM_Base_Start+0xac>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d018      	beq.n	8007c84 <HAL_TIM_Base_Start+0x5c>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c5a:	d013      	beq.n	8007c84 <HAL_TIM_Base_Start+0x5c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd8 <HAL_TIM_Base_Start+0xb0>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d00e      	beq.n	8007c84 <HAL_TIM_Base_Start+0x5c>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8007cdc <HAL_TIM_Base_Start+0xb4>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d009      	beq.n	8007c84 <HAL_TIM_Base_Start+0x5c>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce0 <HAL_TIM_Base_Start+0xb8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d004      	beq.n	8007c84 <HAL_TIM_Base_Start+0x5c>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a19      	ldr	r2, [pc, #100]	@ (8007ce4 <HAL_TIM_Base_Start+0xbc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d115      	bne.n	8007cb0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	4b17      	ldr	r3, [pc, #92]	@ (8007ce8 <HAL_TIM_Base_Start+0xc0>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b06      	cmp	r3, #6
 8007c94:	d015      	beq.n	8007cc2 <HAL_TIM_Base_Start+0x9a>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c9c:	d011      	beq.n	8007cc2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0201 	orr.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cae:	e008      	b.n	8007cc2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0201 	orr.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	e000      	b.n	8007cc4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40000400 	.word	0x40000400
 8007cdc:	40000800 	.word	0x40000800
 8007ce0:	40013400 	.word	0x40013400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	00010007 	.word	0x00010007

08007cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d001      	beq.n	8007d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e04a      	b.n	8007d9a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0201 	orr.w	r2, r2, #1
 8007d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a21      	ldr	r2, [pc, #132]	@ (8007da8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d018      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0x6c>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d2e:	d013      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0x6c>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1d      	ldr	r2, [pc, #116]	@ (8007dac <HAL_TIM_Base_Start_IT+0xc0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d00e      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0x6c>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007db0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d009      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0x6c>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1a      	ldr	r2, [pc, #104]	@ (8007db4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0x6c>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a19      	ldr	r2, [pc, #100]	@ (8007db8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d115      	bne.n	8007d84 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	4b17      	ldr	r3, [pc, #92]	@ (8007dbc <HAL_TIM_Base_Start_IT+0xd0>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b06      	cmp	r3, #6
 8007d68:	d015      	beq.n	8007d96 <HAL_TIM_Base_Start_IT+0xaa>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d70:	d011      	beq.n	8007d96 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f042 0201 	orr.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d82:	e008      	b.n	8007d96 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	e000      	b.n	8007d98 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40012c00 	.word	0x40012c00
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40013400 	.word	0x40013400
 8007db8:	40014000 	.word	0x40014000
 8007dbc:	00010007 	.word	0x00010007

08007dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e049      	b.n	8007e66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fb fb24 	bl	8003434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	f000 fcbc 	bl	800877c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d109      	bne.n	8007e94 <HAL_TIM_PWM_Start+0x24>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	bf14      	ite	ne
 8007e8c:	2301      	movne	r3, #1
 8007e8e:	2300      	moveq	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	e03c      	b.n	8007f0e <HAL_TIM_PWM_Start+0x9e>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d109      	bne.n	8007eae <HAL_TIM_PWM_Start+0x3e>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	bf14      	ite	ne
 8007ea6:	2301      	movne	r3, #1
 8007ea8:	2300      	moveq	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	e02f      	b.n	8007f0e <HAL_TIM_PWM_Start+0x9e>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d109      	bne.n	8007ec8 <HAL_TIM_PWM_Start+0x58>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	bf14      	ite	ne
 8007ec0:	2301      	movne	r3, #1
 8007ec2:	2300      	moveq	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	e022      	b.n	8007f0e <HAL_TIM_PWM_Start+0x9e>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b0c      	cmp	r3, #12
 8007ecc:	d109      	bne.n	8007ee2 <HAL_TIM_PWM_Start+0x72>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	bf14      	ite	ne
 8007eda:	2301      	movne	r3, #1
 8007edc:	2300      	moveq	r3, #0
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	e015      	b.n	8007f0e <HAL_TIM_PWM_Start+0x9e>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b10      	cmp	r3, #16
 8007ee6:	d109      	bne.n	8007efc <HAL_TIM_PWM_Start+0x8c>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	bf14      	ite	ne
 8007ef4:	2301      	movne	r3, #1
 8007ef6:	2300      	moveq	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	e008      	b.n	8007f0e <HAL_TIM_PWM_Start+0x9e>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	bf14      	ite	ne
 8007f08:	2301      	movne	r3, #1
 8007f0a:	2300      	moveq	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e097      	b.n	8008046 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <HAL_TIM_PWM_Start+0xb6>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f24:	e023      	b.n	8007f6e <HAL_TIM_PWM_Start+0xfe>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d104      	bne.n	8007f36 <HAL_TIM_PWM_Start+0xc6>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f34:	e01b      	b.n	8007f6e <HAL_TIM_PWM_Start+0xfe>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d104      	bne.n	8007f46 <HAL_TIM_PWM_Start+0xd6>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f44:	e013      	b.n	8007f6e <HAL_TIM_PWM_Start+0xfe>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b0c      	cmp	r3, #12
 8007f4a:	d104      	bne.n	8007f56 <HAL_TIM_PWM_Start+0xe6>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f54:	e00b      	b.n	8007f6e <HAL_TIM_PWM_Start+0xfe>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d104      	bne.n	8007f66 <HAL_TIM_PWM_Start+0xf6>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f64:	e003      	b.n	8007f6e <HAL_TIM_PWM_Start+0xfe>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2202      	movs	r2, #2
 8007f6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2201      	movs	r2, #1
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 f82e 	bl	8008fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a33      	ldr	r2, [pc, #204]	@ (8008050 <HAL_TIM_PWM_Start+0x1e0>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <HAL_TIM_PWM_Start+0x13e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a32      	ldr	r2, [pc, #200]	@ (8008054 <HAL_TIM_PWM_Start+0x1e4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00e      	beq.n	8007fae <HAL_TIM_PWM_Start+0x13e>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a30      	ldr	r2, [pc, #192]	@ (8008058 <HAL_TIM_PWM_Start+0x1e8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d009      	beq.n	8007fae <HAL_TIM_PWM_Start+0x13e>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800805c <HAL_TIM_PWM_Start+0x1ec>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d004      	beq.n	8007fae <HAL_TIM_PWM_Start+0x13e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8008060 <HAL_TIM_PWM_Start+0x1f0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d101      	bne.n	8007fb2 <HAL_TIM_PWM_Start+0x142>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <HAL_TIM_PWM_Start+0x144>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d007      	beq.n	8007fc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a20      	ldr	r2, [pc, #128]	@ (8008050 <HAL_TIM_PWM_Start+0x1e0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d018      	beq.n	8008004 <HAL_TIM_PWM_Start+0x194>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fda:	d013      	beq.n	8008004 <HAL_TIM_PWM_Start+0x194>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a20      	ldr	r2, [pc, #128]	@ (8008064 <HAL_TIM_PWM_Start+0x1f4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00e      	beq.n	8008004 <HAL_TIM_PWM_Start+0x194>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a1f      	ldr	r2, [pc, #124]	@ (8008068 <HAL_TIM_PWM_Start+0x1f8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d009      	beq.n	8008004 <HAL_TIM_PWM_Start+0x194>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a17      	ldr	r2, [pc, #92]	@ (8008054 <HAL_TIM_PWM_Start+0x1e4>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d004      	beq.n	8008004 <HAL_TIM_PWM_Start+0x194>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a16      	ldr	r2, [pc, #88]	@ (8008058 <HAL_TIM_PWM_Start+0x1e8>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d115      	bne.n	8008030 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	4b18      	ldr	r3, [pc, #96]	@ (800806c <HAL_TIM_PWM_Start+0x1fc>)
 800800c:	4013      	ands	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b06      	cmp	r3, #6
 8008014:	d015      	beq.n	8008042 <HAL_TIM_PWM_Start+0x1d2>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800801c:	d011      	beq.n	8008042 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0201 	orr.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802e:	e008      	b.n	8008042 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	e000      	b.n	8008044 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008042:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	40012c00 	.word	0x40012c00
 8008054:	40013400 	.word	0x40013400
 8008058:	40014000 	.word	0x40014000
 800805c:	40014400 	.word	0x40014400
 8008060:	40014800 	.word	0x40014800
 8008064:	40000400 	.word	0x40000400
 8008068:	40000800 	.word	0x40000800
 800806c:	00010007 	.word	0x00010007

08008070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d020      	beq.n	80080d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01b      	beq.n	80080d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f06f 0202 	mvn.w	r2, #2
 80080a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fb40 	bl	8008740 <HAL_TIM_IC_CaptureCallback>
 80080c0:	e005      	b.n	80080ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fb32 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fb43 	bl	8008754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d020      	beq.n	8008120 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01b      	beq.n	8008120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0204 	mvn.w	r2, #4
 80080f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2202      	movs	r2, #2
 80080f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fb1a 	bl	8008740 <HAL_TIM_IC_CaptureCallback>
 800810c:	e005      	b.n	800811a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fb0c 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fb1d 	bl	8008754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d020      	beq.n	800816c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01b      	beq.n	800816c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0208 	mvn.w	r2, #8
 800813c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2204      	movs	r2, #4
 8008142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 faf4 	bl	8008740 <HAL_TIM_IC_CaptureCallback>
 8008158:	e005      	b.n	8008166 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fae6 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 faf7 	bl	8008754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f003 0310 	and.w	r3, r3, #16
 8008172:	2b00      	cmp	r3, #0
 8008174:	d020      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01b      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f06f 0210 	mvn.w	r2, #16
 8008188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2208      	movs	r2, #8
 800818e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 face 	bl	8008740 <HAL_TIM_IC_CaptureCallback>
 80081a4:	e005      	b.n	80081b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fac0 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fad1 	bl	8008754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00c      	beq.n	80081dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d007      	beq.n	80081dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f06f 0201 	mvn.w	r2, #1
 80081d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7f8 fe32 	bl	8000e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00c      	beq.n	800820a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 f825 	bl	8009254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00c      	beq.n	800822e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 f81d 	bl	8009268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800824a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fa8b 	bl	8008768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00c      	beq.n	8008276 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f003 0320 	and.w	r3, r3, #32
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f06f 0220 	mvn.w	r2, #32
 800826e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 ffe5 	bl	8009240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00c      	beq.n	800829a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fff1 	bl	800927c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80082b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 ffe9 	bl	8009290 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00c      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d007      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80082da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 ffe1 	bl	80092a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00c      	beq.n	8008306 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d007      	beq.n	8008306 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80082fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 ffd9 	bl	80092b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008306:	bf00      	nop
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008326:	2b01      	cmp	r3, #1
 8008328:	d101      	bne.n	800832e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800832a:	2302      	movs	r3, #2
 800832c:	e0ff      	b.n	800852e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b14      	cmp	r3, #20
 800833a:	f200 80f0 	bhi.w	800851e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800833e:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	08008399 	.word	0x08008399
 8008348:	0800851f 	.word	0x0800851f
 800834c:	0800851f 	.word	0x0800851f
 8008350:	0800851f 	.word	0x0800851f
 8008354:	080083d9 	.word	0x080083d9
 8008358:	0800851f 	.word	0x0800851f
 800835c:	0800851f 	.word	0x0800851f
 8008360:	0800851f 	.word	0x0800851f
 8008364:	0800841b 	.word	0x0800841b
 8008368:	0800851f 	.word	0x0800851f
 800836c:	0800851f 	.word	0x0800851f
 8008370:	0800851f 	.word	0x0800851f
 8008374:	0800845b 	.word	0x0800845b
 8008378:	0800851f 	.word	0x0800851f
 800837c:	0800851f 	.word	0x0800851f
 8008380:	0800851f 	.word	0x0800851f
 8008384:	0800849d 	.word	0x0800849d
 8008388:	0800851f 	.word	0x0800851f
 800838c:	0800851f 	.word	0x0800851f
 8008390:	0800851f 	.word	0x0800851f
 8008394:	080084dd 	.word	0x080084dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68b9      	ldr	r1, [r7, #8]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fa88 	bl	80088b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699a      	ldr	r2, [r3, #24]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0208 	orr.w	r2, r2, #8
 80083b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699a      	ldr	r2, [r3, #24]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0204 	bic.w	r2, r2, #4
 80083c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6999      	ldr	r1, [r3, #24]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	619a      	str	r2, [r3, #24]
      break;
 80083d6:	e0a5      	b.n	8008524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68b9      	ldr	r1, [r7, #8]
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 faf8 	bl	80089d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6999      	ldr	r1, [r3, #24]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	021a      	lsls	r2, r3, #8
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	619a      	str	r2, [r3, #24]
      break;
 8008418:	e084      	b.n	8008524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fb61 	bl	8008ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69da      	ldr	r2, [r3, #28]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f042 0208 	orr.w	r2, r2, #8
 8008434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69da      	ldr	r2, [r3, #28]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 0204 	bic.w	r2, r2, #4
 8008444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69d9      	ldr	r1, [r3, #28]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	61da      	str	r2, [r3, #28]
      break;
 8008458:	e064      	b.n	8008524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fbc9 	bl	8008bf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69da      	ldr	r2, [r3, #28]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69d9      	ldr	r1, [r3, #28]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	021a      	lsls	r2, r3, #8
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	61da      	str	r2, [r3, #28]
      break;
 800849a:	e043      	b.n	8008524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fc32 	bl	8008d0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0208 	orr.w	r2, r2, #8
 80084b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0204 	bic.w	r2, r2, #4
 80084c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	691a      	ldr	r2, [r3, #16]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80084da:	e023      	b.n	8008524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fc76 	bl	8008dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008506:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	021a      	lsls	r2, r3, #8
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800851c:	e002      	b.n	8008524 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	75fb      	strb	r3, [r7, #23]
      break;
 8008522:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800852c:	7dfb      	ldrb	r3, [r7, #23]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop

08008538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800854c:	2b01      	cmp	r3, #1
 800854e:	d101      	bne.n	8008554 <HAL_TIM_ConfigClockSource+0x1c>
 8008550:	2302      	movs	r3, #2
 8008552:	e0de      	b.n	8008712 <HAL_TIM_ConfigClockSource+0x1da>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008572:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800857e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a63      	ldr	r2, [pc, #396]	@ (800871c <HAL_TIM_ConfigClockSource+0x1e4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	f000 80a9 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008594:	4a61      	ldr	r2, [pc, #388]	@ (800871c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	f200 80ae 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 800859c:	4a60      	ldr	r2, [pc, #384]	@ (8008720 <HAL_TIM_ConfigClockSource+0x1e8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	f000 80a1 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80085a4:	4a5e      	ldr	r2, [pc, #376]	@ (8008720 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	f200 80a6 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80085ac:	4a5d      	ldr	r2, [pc, #372]	@ (8008724 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	f000 8099 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80085b4:	4a5b      	ldr	r2, [pc, #364]	@ (8008724 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	f200 809e 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80085bc:	4a5a      	ldr	r2, [pc, #360]	@ (8008728 <HAL_TIM_ConfigClockSource+0x1f0>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	f000 8091 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80085c4:	4a58      	ldr	r2, [pc, #352]	@ (8008728 <HAL_TIM_ConfigClockSource+0x1f0>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	f200 8096 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80085cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085d0:	f000 8089 	beq.w	80086e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80085d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085d8:	f200 808e 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80085dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e0:	d03e      	beq.n	8008660 <HAL_TIM_ConfigClockSource+0x128>
 80085e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e6:	f200 8087 	bhi.w	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80085ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ee:	f000 8086 	beq.w	80086fe <HAL_TIM_ConfigClockSource+0x1c6>
 80085f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085f6:	d87f      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80085f8:	2b70      	cmp	r3, #112	@ 0x70
 80085fa:	d01a      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0xfa>
 80085fc:	2b70      	cmp	r3, #112	@ 0x70
 80085fe:	d87b      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008600:	2b60      	cmp	r3, #96	@ 0x60
 8008602:	d050      	beq.n	80086a6 <HAL_TIM_ConfigClockSource+0x16e>
 8008604:	2b60      	cmp	r3, #96	@ 0x60
 8008606:	d877      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008608:	2b50      	cmp	r3, #80	@ 0x50
 800860a:	d03c      	beq.n	8008686 <HAL_TIM_ConfigClockSource+0x14e>
 800860c:	2b50      	cmp	r3, #80	@ 0x50
 800860e:	d873      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008610:	2b40      	cmp	r3, #64	@ 0x40
 8008612:	d058      	beq.n	80086c6 <HAL_TIM_ConfigClockSource+0x18e>
 8008614:	2b40      	cmp	r3, #64	@ 0x40
 8008616:	d86f      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008618:	2b30      	cmp	r3, #48	@ 0x30
 800861a:	d064      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0x1ae>
 800861c:	2b30      	cmp	r3, #48	@ 0x30
 800861e:	d86b      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008620:	2b20      	cmp	r3, #32
 8008622:	d060      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008624:	2b20      	cmp	r3, #32
 8008626:	d867      	bhi.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008628:	2b00      	cmp	r3, #0
 800862a:	d05c      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0x1ae>
 800862c:	2b10      	cmp	r3, #16
 800862e:	d05a      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008630:	e062      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008642:	f000 fca9 	bl	8008f98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	609a      	str	r2, [r3, #8]
      break;
 800865e:	e04f      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008670:	f000 fc92 	bl	8008f98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008682:	609a      	str	r2, [r3, #8]
      break;
 8008684:	e03c      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008692:	461a      	mov	r2, r3
 8008694:	f000 fc04 	bl	8008ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2150      	movs	r1, #80	@ 0x50
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fc5d 	bl	8008f5e <TIM_ITRx_SetConfig>
      break;
 80086a4:	e02c      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086b2:	461a      	mov	r2, r3
 80086b4:	f000 fc23 	bl	8008efe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2160      	movs	r1, #96	@ 0x60
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fc4d 	bl	8008f5e <TIM_ITRx_SetConfig>
      break;
 80086c4:	e01c      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d2:	461a      	mov	r2, r3
 80086d4:	f000 fbe4 	bl	8008ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2140      	movs	r1, #64	@ 0x40
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fc3d 	bl	8008f5e <TIM_ITRx_SetConfig>
      break;
 80086e4:	e00c      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f000 fc34 	bl	8008f5e <TIM_ITRx_SetConfig>
      break;
 80086f6:	e003      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	73fb      	strb	r3, [r7, #15]
      break;
 80086fc:	e000      	b.n	8008700 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80086fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	00100070 	.word	0x00100070
 8008720:	00100040 	.word	0x00100040
 8008724:	00100030 	.word	0x00100030
 8008728:	00100020 	.word	0x00100020

0800872c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a42      	ldr	r2, [pc, #264]	@ (8008898 <TIM_Base_SetConfig+0x11c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d00f      	beq.n	80087b4 <TIM_Base_SetConfig+0x38>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800879a:	d00b      	beq.n	80087b4 <TIM_Base_SetConfig+0x38>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a3f      	ldr	r2, [pc, #252]	@ (800889c <TIM_Base_SetConfig+0x120>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d007      	beq.n	80087b4 <TIM_Base_SetConfig+0x38>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a3e      	ldr	r2, [pc, #248]	@ (80088a0 <TIM_Base_SetConfig+0x124>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d003      	beq.n	80087b4 <TIM_Base_SetConfig+0x38>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3d      	ldr	r2, [pc, #244]	@ (80088a4 <TIM_Base_SetConfig+0x128>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d108      	bne.n	80087c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a33      	ldr	r2, [pc, #204]	@ (8008898 <TIM_Base_SetConfig+0x11c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d01b      	beq.n	8008806 <TIM_Base_SetConfig+0x8a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087d4:	d017      	beq.n	8008806 <TIM_Base_SetConfig+0x8a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a30      	ldr	r2, [pc, #192]	@ (800889c <TIM_Base_SetConfig+0x120>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <TIM_Base_SetConfig+0x8a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a2f      	ldr	r2, [pc, #188]	@ (80088a0 <TIM_Base_SetConfig+0x124>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00f      	beq.n	8008806 <TIM_Base_SetConfig+0x8a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2e      	ldr	r2, [pc, #184]	@ (80088a4 <TIM_Base_SetConfig+0x128>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00b      	beq.n	8008806 <TIM_Base_SetConfig+0x8a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2d      	ldr	r2, [pc, #180]	@ (80088a8 <TIM_Base_SetConfig+0x12c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d007      	beq.n	8008806 <TIM_Base_SetConfig+0x8a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2c      	ldr	r2, [pc, #176]	@ (80088ac <TIM_Base_SetConfig+0x130>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d003      	beq.n	8008806 <TIM_Base_SetConfig+0x8a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a2b      	ldr	r2, [pc, #172]	@ (80088b0 <TIM_Base_SetConfig+0x134>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d108      	bne.n	8008818 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800880c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a16      	ldr	r2, [pc, #88]	@ (8008898 <TIM_Base_SetConfig+0x11c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d00f      	beq.n	8008864 <TIM_Base_SetConfig+0xe8>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a17      	ldr	r2, [pc, #92]	@ (80088a4 <TIM_Base_SetConfig+0x128>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d00b      	beq.n	8008864 <TIM_Base_SetConfig+0xe8>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a16      	ldr	r2, [pc, #88]	@ (80088a8 <TIM_Base_SetConfig+0x12c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d007      	beq.n	8008864 <TIM_Base_SetConfig+0xe8>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a15      	ldr	r2, [pc, #84]	@ (80088ac <TIM_Base_SetConfig+0x130>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d003      	beq.n	8008864 <TIM_Base_SetConfig+0xe8>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a14      	ldr	r2, [pc, #80]	@ (80088b0 <TIM_Base_SetConfig+0x134>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d103      	bne.n	800886c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b01      	cmp	r3, #1
 800887c:	d105      	bne.n	800888a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f023 0201 	bic.w	r2, r3, #1
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	611a      	str	r2, [r3, #16]
  }
}
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40012c00 	.word	0x40012c00
 800889c:	40000400 	.word	0x40000400
 80088a0:	40000800 	.word	0x40000800
 80088a4:	40013400 	.word	0x40013400
 80088a8:	40014000 	.word	0x40014000
 80088ac:	40014400 	.word	0x40014400
 80088b0:	40014800 	.word	0x40014800

080088b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	f023 0201 	bic.w	r2, r3, #1
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0303 	bic.w	r3, r3, #3
 80088ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 0302 	bic.w	r3, r3, #2
 8008900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a2c      	ldr	r2, [pc, #176]	@ (80089c0 <TIM_OC1_SetConfig+0x10c>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00f      	beq.n	8008934 <TIM_OC1_SetConfig+0x80>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a2b      	ldr	r2, [pc, #172]	@ (80089c4 <TIM_OC1_SetConfig+0x110>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d00b      	beq.n	8008934 <TIM_OC1_SetConfig+0x80>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a2a      	ldr	r2, [pc, #168]	@ (80089c8 <TIM_OC1_SetConfig+0x114>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d007      	beq.n	8008934 <TIM_OC1_SetConfig+0x80>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a29      	ldr	r2, [pc, #164]	@ (80089cc <TIM_OC1_SetConfig+0x118>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d003      	beq.n	8008934 <TIM_OC1_SetConfig+0x80>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a28      	ldr	r2, [pc, #160]	@ (80089d0 <TIM_OC1_SetConfig+0x11c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d10c      	bne.n	800894e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f023 0308 	bic.w	r3, r3, #8
 800893a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f023 0304 	bic.w	r3, r3, #4
 800894c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a1b      	ldr	r2, [pc, #108]	@ (80089c0 <TIM_OC1_SetConfig+0x10c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d00f      	beq.n	8008976 <TIM_OC1_SetConfig+0xc2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1a      	ldr	r2, [pc, #104]	@ (80089c4 <TIM_OC1_SetConfig+0x110>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00b      	beq.n	8008976 <TIM_OC1_SetConfig+0xc2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a19      	ldr	r2, [pc, #100]	@ (80089c8 <TIM_OC1_SetConfig+0x114>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d007      	beq.n	8008976 <TIM_OC1_SetConfig+0xc2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a18      	ldr	r2, [pc, #96]	@ (80089cc <TIM_OC1_SetConfig+0x118>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d003      	beq.n	8008976 <TIM_OC1_SetConfig+0xc2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a17      	ldr	r2, [pc, #92]	@ (80089d0 <TIM_OC1_SetConfig+0x11c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d111      	bne.n	800899a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800897c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	4313      	orrs	r3, r2
 800898e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4313      	orrs	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	621a      	str	r2, [r3, #32]
}
 80089b4:	bf00      	nop
 80089b6:	371c      	adds	r7, #28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	40012c00 	.word	0x40012c00
 80089c4:	40013400 	.word	0x40013400
 80089c8:	40014000 	.word	0x40014000
 80089cc:	40014400 	.word	0x40014400
 80089d0:	40014800 	.word	0x40014800

080089d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	f023 0210 	bic.w	r2, r3, #16
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f023 0320 	bic.w	r3, r3, #32
 8008a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a28      	ldr	r2, [pc, #160]	@ (8008ad4 <TIM_OC2_SetConfig+0x100>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d003      	beq.n	8008a40 <TIM_OC2_SetConfig+0x6c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a27      	ldr	r2, [pc, #156]	@ (8008ad8 <TIM_OC2_SetConfig+0x104>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10d      	bne.n	8008a5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad4 <TIM_OC2_SetConfig+0x100>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d00f      	beq.n	8008a84 <TIM_OC2_SetConfig+0xb0>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a1c      	ldr	r2, [pc, #112]	@ (8008ad8 <TIM_OC2_SetConfig+0x104>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00b      	beq.n	8008a84 <TIM_OC2_SetConfig+0xb0>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8008adc <TIM_OC2_SetConfig+0x108>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d007      	beq.n	8008a84 <TIM_OC2_SetConfig+0xb0>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a1a      	ldr	r2, [pc, #104]	@ (8008ae0 <TIM_OC2_SetConfig+0x10c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <TIM_OC2_SetConfig+0xb0>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a19      	ldr	r2, [pc, #100]	@ (8008ae4 <TIM_OC2_SetConfig+0x110>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d113      	bne.n	8008aac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	621a      	str	r2, [r3, #32]
}
 8008ac6:	bf00      	nop
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40012c00 	.word	0x40012c00
 8008ad8:	40013400 	.word	0x40013400
 8008adc:	40014000 	.word	0x40014000
 8008ae0:	40014400 	.word	0x40014400
 8008ae4:	40014800 	.word	0x40014800

08008ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f023 0303 	bic.w	r3, r3, #3
 8008b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	021b      	lsls	r3, r3, #8
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a27      	ldr	r2, [pc, #156]	@ (8008be4 <TIM_OC3_SetConfig+0xfc>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d003      	beq.n	8008b52 <TIM_OC3_SetConfig+0x6a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a26      	ldr	r2, [pc, #152]	@ (8008be8 <TIM_OC3_SetConfig+0x100>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d10d      	bne.n	8008b6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a1c      	ldr	r2, [pc, #112]	@ (8008be4 <TIM_OC3_SetConfig+0xfc>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00f      	beq.n	8008b96 <TIM_OC3_SetConfig+0xae>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a1b      	ldr	r2, [pc, #108]	@ (8008be8 <TIM_OC3_SetConfig+0x100>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00b      	beq.n	8008b96 <TIM_OC3_SetConfig+0xae>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a1a      	ldr	r2, [pc, #104]	@ (8008bec <TIM_OC3_SetConfig+0x104>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d007      	beq.n	8008b96 <TIM_OC3_SetConfig+0xae>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a19      	ldr	r2, [pc, #100]	@ (8008bf0 <TIM_OC3_SetConfig+0x108>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d003      	beq.n	8008b96 <TIM_OC3_SetConfig+0xae>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a18      	ldr	r2, [pc, #96]	@ (8008bf4 <TIM_OC3_SetConfig+0x10c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d113      	bne.n	8008bbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	011b      	lsls	r3, r3, #4
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	621a      	str	r2, [r3, #32]
}
 8008bd8:	bf00      	nop
 8008bda:	371c      	adds	r7, #28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	40012c00 	.word	0x40012c00
 8008be8:	40013400 	.word	0x40013400
 8008bec:	40014000 	.word	0x40014000
 8008bf0:	40014400 	.word	0x40014400
 8008bf4:	40014800 	.word	0x40014800

08008bf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	69db      	ldr	r3, [r3, #28]
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	031b      	lsls	r3, r3, #12
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a28      	ldr	r2, [pc, #160]	@ (8008cf8 <TIM_OC4_SetConfig+0x100>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_OC4_SetConfig+0x6c>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a27      	ldr	r2, [pc, #156]	@ (8008cfc <TIM_OC4_SetConfig+0x104>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d10d      	bne.n	8008c80 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	031b      	lsls	r3, r3, #12
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf8 <TIM_OC4_SetConfig+0x100>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00f      	beq.n	8008ca8 <TIM_OC4_SetConfig+0xb0>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cfc <TIM_OC4_SetConfig+0x104>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d00b      	beq.n	8008ca8 <TIM_OC4_SetConfig+0xb0>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a1b      	ldr	r2, [pc, #108]	@ (8008d00 <TIM_OC4_SetConfig+0x108>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d007      	beq.n	8008ca8 <TIM_OC4_SetConfig+0xb0>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008d04 <TIM_OC4_SetConfig+0x10c>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d003      	beq.n	8008ca8 <TIM_OC4_SetConfig+0xb0>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a19      	ldr	r2, [pc, #100]	@ (8008d08 <TIM_OC4_SetConfig+0x110>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d113      	bne.n	8008cd0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008cb6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	019b      	lsls	r3, r3, #6
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	019b      	lsls	r3, r3, #6
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	40012c00 	.word	0x40012c00
 8008cfc:	40013400 	.word	0x40013400
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40014400 	.word	0x40014400
 8008d08:	40014800 	.word	0x40014800

08008d0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008d50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	041b      	lsls	r3, r3, #16
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a17      	ldr	r2, [pc, #92]	@ (8008dc0 <TIM_OC5_SetConfig+0xb4>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00f      	beq.n	8008d86 <TIM_OC5_SetConfig+0x7a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a16      	ldr	r2, [pc, #88]	@ (8008dc4 <TIM_OC5_SetConfig+0xb8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00b      	beq.n	8008d86 <TIM_OC5_SetConfig+0x7a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a15      	ldr	r2, [pc, #84]	@ (8008dc8 <TIM_OC5_SetConfig+0xbc>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d007      	beq.n	8008d86 <TIM_OC5_SetConfig+0x7a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a14      	ldr	r2, [pc, #80]	@ (8008dcc <TIM_OC5_SetConfig+0xc0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_OC5_SetConfig+0x7a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a13      	ldr	r2, [pc, #76]	@ (8008dd0 <TIM_OC5_SetConfig+0xc4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d109      	bne.n	8008d9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	621a      	str	r2, [r3, #32]
}
 8008db4:	bf00      	nop
 8008db6:	371c      	adds	r7, #28
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	40012c00 	.word	0x40012c00
 8008dc4:	40013400 	.word	0x40013400
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	40014400 	.word	0x40014400
 8008dd0:	40014800 	.word	0x40014800

08008dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	051b      	lsls	r3, r3, #20
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a18      	ldr	r2, [pc, #96]	@ (8008e8c <TIM_OC6_SetConfig+0xb8>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00f      	beq.n	8008e50 <TIM_OC6_SetConfig+0x7c>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a17      	ldr	r2, [pc, #92]	@ (8008e90 <TIM_OC6_SetConfig+0xbc>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00b      	beq.n	8008e50 <TIM_OC6_SetConfig+0x7c>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a16      	ldr	r2, [pc, #88]	@ (8008e94 <TIM_OC6_SetConfig+0xc0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d007      	beq.n	8008e50 <TIM_OC6_SetConfig+0x7c>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a15      	ldr	r2, [pc, #84]	@ (8008e98 <TIM_OC6_SetConfig+0xc4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <TIM_OC6_SetConfig+0x7c>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a14      	ldr	r2, [pc, #80]	@ (8008e9c <TIM_OC6_SetConfig+0xc8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d109      	bne.n	8008e64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	029b      	lsls	r3, r3, #10
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	621a      	str	r2, [r3, #32]
}
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	40012c00 	.word	0x40012c00
 8008e90:	40013400 	.word	0x40013400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f023 0201 	bic.w	r2, r3, #1
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f023 030a 	bic.w	r3, r3, #10
 8008edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	621a      	str	r2, [r3, #32]
}
 8008ef2:	bf00      	nop
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b087      	sub	sp, #28
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	f023 0210 	bic.w	r2, r3, #16
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	031b      	lsls	r3, r3, #12
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	621a      	str	r2, [r3, #32]
}
 8008f52:	bf00      	nop
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f043 0307 	orr.w	r3, r3, #7
 8008f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	609a      	str	r2, [r3, #8]
}
 8008f8c:	bf00      	nop
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	021a      	lsls	r2, r3, #8
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	371c      	adds	r7, #28
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f003 031f 	and.w	r3, r3, #31
 8008fea:	2201      	movs	r2, #1
 8008fec:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a1a      	ldr	r2, [r3, #32]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	43db      	mvns	r3, r3
 8008ffa:	401a      	ands	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a1a      	ldr	r2, [r3, #32]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f003 031f 	and.w	r3, r3, #31
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	fa01 f303 	lsl.w	r3, r1, r3
 8009010:	431a      	orrs	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
	...

08009024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009038:	2302      	movs	r3, #2
 800903a:	e065      	b.n	8009108 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a2c      	ldr	r2, [pc, #176]	@ (8009114 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d004      	beq.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a2b      	ldr	r2, [pc, #172]	@ (8009118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d108      	bne.n	8009082 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009076:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800908c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009114 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d018      	beq.n	80090dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b2:	d013      	beq.n	80090dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a18      	ldr	r2, [pc, #96]	@ (800911c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00e      	beq.n	80090dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a17      	ldr	r2, [pc, #92]	@ (8009120 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d009      	beq.n	80090dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a12      	ldr	r2, [pc, #72]	@ (8009118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d004      	beq.n	80090dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a13      	ldr	r2, [pc, #76]	@ (8009124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d10c      	bne.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	40012c00 	.word	0x40012c00
 8009118:	40013400 	.word	0x40013400
 800911c:	40000400 	.word	0x40000400
 8009120:	40000800 	.word	0x40000800
 8009124:	40014000 	.word	0x40014000

08009128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800913c:	2b01      	cmp	r3, #1
 800913e:	d101      	bne.n	8009144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009140:	2302      	movs	r3, #2
 8009142:	e073      	b.n	800922c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	4313      	orrs	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4313      	orrs	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	695b      	ldr	r3, [r3, #20]
 800919c:	4313      	orrs	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	041b      	lsls	r3, r3, #16
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a19      	ldr	r2, [pc, #100]	@ (8009238 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d004      	beq.n	80091e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a18      	ldr	r2, [pc, #96]	@ (800923c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d11c      	bne.n	800921a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ea:	051b      	lsls	r3, r3, #20
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009208:	4313      	orrs	r3, r2
 800920a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	40012c00 	.word	0x40012c00
 800923c:	40013400 	.word	0x40013400

08009240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e042      	b.n	8009364 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d106      	bne.n	80092f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7fa f959 	bl	80035a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2224      	movs	r2, #36	@ 0x24
 80092fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0201 	bic.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 faf4 	bl	8009904 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f825 	bl	800936c <UART_SetConfig>
 8009322:	4603      	mov	r3, r0
 8009324:	2b01      	cmp	r3, #1
 8009326:	d101      	bne.n	800932c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e01b      	b.n	8009364 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800933a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800934a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0201 	orr.w	r2, r2, #1
 800935a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fb73 	bl	8009a48 <UART_CheckIdleState>
 8009362:	4603      	mov	r3, r0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800936c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009370:	b08c      	sub	sp, #48	@ 0x30
 8009372:	af00      	add	r7, sp, #0
 8009374:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	431a      	orrs	r2, r3
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	431a      	orrs	r2, r3
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	4313      	orrs	r3, r2
 8009392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	4bab      	ldr	r3, [pc, #684]	@ (8009648 <UART_SetConfig+0x2dc>)
 800939c:	4013      	ands	r3, r2
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4aa0      	ldr	r2, [pc, #640]	@ (800964c <UART_SetConfig+0x2e0>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d004      	beq.n	80093d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093d4:	4313      	orrs	r3, r2
 80093d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80093e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	6812      	ldr	r2, [r2, #0]
 80093ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093ec:	430b      	orrs	r3, r1
 80093ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f6:	f023 010f 	bic.w	r1, r3, #15
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a91      	ldr	r2, [pc, #580]	@ (8009650 <UART_SetConfig+0x2e4>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d125      	bne.n	800945c <UART_SetConfig+0xf0>
 8009410:	4b90      	ldr	r3, [pc, #576]	@ (8009654 <UART_SetConfig+0x2e8>)
 8009412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009416:	f003 0303 	and.w	r3, r3, #3
 800941a:	2b03      	cmp	r3, #3
 800941c:	d81a      	bhi.n	8009454 <UART_SetConfig+0xe8>
 800941e:	a201      	add	r2, pc, #4	@ (adr r2, 8009424 <UART_SetConfig+0xb8>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	08009435 	.word	0x08009435
 8009428:	08009445 	.word	0x08009445
 800942c:	0800943d 	.word	0x0800943d
 8009430:	0800944d 	.word	0x0800944d
 8009434:	2301      	movs	r3, #1
 8009436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800943a:	e0d6      	b.n	80095ea <UART_SetConfig+0x27e>
 800943c:	2302      	movs	r3, #2
 800943e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009442:	e0d2      	b.n	80095ea <UART_SetConfig+0x27e>
 8009444:	2304      	movs	r3, #4
 8009446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800944a:	e0ce      	b.n	80095ea <UART_SetConfig+0x27e>
 800944c:	2308      	movs	r3, #8
 800944e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009452:	e0ca      	b.n	80095ea <UART_SetConfig+0x27e>
 8009454:	2310      	movs	r3, #16
 8009456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800945a:	e0c6      	b.n	80095ea <UART_SetConfig+0x27e>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a7d      	ldr	r2, [pc, #500]	@ (8009658 <UART_SetConfig+0x2ec>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d138      	bne.n	80094d8 <UART_SetConfig+0x16c>
 8009466:	4b7b      	ldr	r3, [pc, #492]	@ (8009654 <UART_SetConfig+0x2e8>)
 8009468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800946c:	f003 030c 	and.w	r3, r3, #12
 8009470:	2b0c      	cmp	r3, #12
 8009472:	d82d      	bhi.n	80094d0 <UART_SetConfig+0x164>
 8009474:	a201      	add	r2, pc, #4	@ (adr r2, 800947c <UART_SetConfig+0x110>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	080094b1 	.word	0x080094b1
 8009480:	080094d1 	.word	0x080094d1
 8009484:	080094d1 	.word	0x080094d1
 8009488:	080094d1 	.word	0x080094d1
 800948c:	080094c1 	.word	0x080094c1
 8009490:	080094d1 	.word	0x080094d1
 8009494:	080094d1 	.word	0x080094d1
 8009498:	080094d1 	.word	0x080094d1
 800949c:	080094b9 	.word	0x080094b9
 80094a0:	080094d1 	.word	0x080094d1
 80094a4:	080094d1 	.word	0x080094d1
 80094a8:	080094d1 	.word	0x080094d1
 80094ac:	080094c9 	.word	0x080094c9
 80094b0:	2300      	movs	r3, #0
 80094b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094b6:	e098      	b.n	80095ea <UART_SetConfig+0x27e>
 80094b8:	2302      	movs	r3, #2
 80094ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094be:	e094      	b.n	80095ea <UART_SetConfig+0x27e>
 80094c0:	2304      	movs	r3, #4
 80094c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094c6:	e090      	b.n	80095ea <UART_SetConfig+0x27e>
 80094c8:	2308      	movs	r3, #8
 80094ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ce:	e08c      	b.n	80095ea <UART_SetConfig+0x27e>
 80094d0:	2310      	movs	r3, #16
 80094d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094d6:	e088      	b.n	80095ea <UART_SetConfig+0x27e>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a5f      	ldr	r2, [pc, #380]	@ (800965c <UART_SetConfig+0x2f0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d125      	bne.n	800952e <UART_SetConfig+0x1c2>
 80094e2:	4b5c      	ldr	r3, [pc, #368]	@ (8009654 <UART_SetConfig+0x2e8>)
 80094e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094ec:	2b30      	cmp	r3, #48	@ 0x30
 80094ee:	d016      	beq.n	800951e <UART_SetConfig+0x1b2>
 80094f0:	2b30      	cmp	r3, #48	@ 0x30
 80094f2:	d818      	bhi.n	8009526 <UART_SetConfig+0x1ba>
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d00a      	beq.n	800950e <UART_SetConfig+0x1a2>
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	d814      	bhi.n	8009526 <UART_SetConfig+0x1ba>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <UART_SetConfig+0x19a>
 8009500:	2b10      	cmp	r3, #16
 8009502:	d008      	beq.n	8009516 <UART_SetConfig+0x1aa>
 8009504:	e00f      	b.n	8009526 <UART_SetConfig+0x1ba>
 8009506:	2300      	movs	r3, #0
 8009508:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800950c:	e06d      	b.n	80095ea <UART_SetConfig+0x27e>
 800950e:	2302      	movs	r3, #2
 8009510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009514:	e069      	b.n	80095ea <UART_SetConfig+0x27e>
 8009516:	2304      	movs	r3, #4
 8009518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800951c:	e065      	b.n	80095ea <UART_SetConfig+0x27e>
 800951e:	2308      	movs	r3, #8
 8009520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009524:	e061      	b.n	80095ea <UART_SetConfig+0x27e>
 8009526:	2310      	movs	r3, #16
 8009528:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800952c:	e05d      	b.n	80095ea <UART_SetConfig+0x27e>
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a4b      	ldr	r2, [pc, #300]	@ (8009660 <UART_SetConfig+0x2f4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d125      	bne.n	8009584 <UART_SetConfig+0x218>
 8009538:	4b46      	ldr	r3, [pc, #280]	@ (8009654 <UART_SetConfig+0x2e8>)
 800953a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800953e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009542:	2bc0      	cmp	r3, #192	@ 0xc0
 8009544:	d016      	beq.n	8009574 <UART_SetConfig+0x208>
 8009546:	2bc0      	cmp	r3, #192	@ 0xc0
 8009548:	d818      	bhi.n	800957c <UART_SetConfig+0x210>
 800954a:	2b80      	cmp	r3, #128	@ 0x80
 800954c:	d00a      	beq.n	8009564 <UART_SetConfig+0x1f8>
 800954e:	2b80      	cmp	r3, #128	@ 0x80
 8009550:	d814      	bhi.n	800957c <UART_SetConfig+0x210>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <UART_SetConfig+0x1f0>
 8009556:	2b40      	cmp	r3, #64	@ 0x40
 8009558:	d008      	beq.n	800956c <UART_SetConfig+0x200>
 800955a:	e00f      	b.n	800957c <UART_SetConfig+0x210>
 800955c:	2300      	movs	r3, #0
 800955e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009562:	e042      	b.n	80095ea <UART_SetConfig+0x27e>
 8009564:	2302      	movs	r3, #2
 8009566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800956a:	e03e      	b.n	80095ea <UART_SetConfig+0x27e>
 800956c:	2304      	movs	r3, #4
 800956e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009572:	e03a      	b.n	80095ea <UART_SetConfig+0x27e>
 8009574:	2308      	movs	r3, #8
 8009576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800957a:	e036      	b.n	80095ea <UART_SetConfig+0x27e>
 800957c:	2310      	movs	r3, #16
 800957e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009582:	e032      	b.n	80095ea <UART_SetConfig+0x27e>
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a30      	ldr	r2, [pc, #192]	@ (800964c <UART_SetConfig+0x2e0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d12a      	bne.n	80095e4 <UART_SetConfig+0x278>
 800958e:	4b31      	ldr	r3, [pc, #196]	@ (8009654 <UART_SetConfig+0x2e8>)
 8009590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009594:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009598:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800959c:	d01a      	beq.n	80095d4 <UART_SetConfig+0x268>
 800959e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095a2:	d81b      	bhi.n	80095dc <UART_SetConfig+0x270>
 80095a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095a8:	d00c      	beq.n	80095c4 <UART_SetConfig+0x258>
 80095aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095ae:	d815      	bhi.n	80095dc <UART_SetConfig+0x270>
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <UART_SetConfig+0x250>
 80095b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095b8:	d008      	beq.n	80095cc <UART_SetConfig+0x260>
 80095ba:	e00f      	b.n	80095dc <UART_SetConfig+0x270>
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095c2:	e012      	b.n	80095ea <UART_SetConfig+0x27e>
 80095c4:	2302      	movs	r3, #2
 80095c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ca:	e00e      	b.n	80095ea <UART_SetConfig+0x27e>
 80095cc:	2304      	movs	r3, #4
 80095ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095d2:	e00a      	b.n	80095ea <UART_SetConfig+0x27e>
 80095d4:	2308      	movs	r3, #8
 80095d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095da:	e006      	b.n	80095ea <UART_SetConfig+0x27e>
 80095dc:	2310      	movs	r3, #16
 80095de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095e2:	e002      	b.n	80095ea <UART_SetConfig+0x27e>
 80095e4:	2310      	movs	r3, #16
 80095e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a17      	ldr	r2, [pc, #92]	@ (800964c <UART_SetConfig+0x2e0>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	f040 80a8 	bne.w	8009746 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d834      	bhi.n	8009668 <UART_SetConfig+0x2fc>
 80095fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009604 <UART_SetConfig+0x298>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009629 	.word	0x08009629
 8009608:	08009669 	.word	0x08009669
 800960c:	08009631 	.word	0x08009631
 8009610:	08009669 	.word	0x08009669
 8009614:	08009637 	.word	0x08009637
 8009618:	08009669 	.word	0x08009669
 800961c:	08009669 	.word	0x08009669
 8009620:	08009669 	.word	0x08009669
 8009624:	0800963f 	.word	0x0800963f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009628:	f7fd f90e 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 800962c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800962e:	e021      	b.n	8009674 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009630:	4b0c      	ldr	r3, [pc, #48]	@ (8009664 <UART_SetConfig+0x2f8>)
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009634:	e01e      	b.n	8009674 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009636:	f7fd f899 	bl	800676c <HAL_RCC_GetSysClockFreq>
 800963a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800963c:	e01a      	b.n	8009674 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800963e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009642:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009644:	e016      	b.n	8009674 <UART_SetConfig+0x308>
 8009646:	bf00      	nop
 8009648:	cfff69f3 	.word	0xcfff69f3
 800964c:	40008000 	.word	0x40008000
 8009650:	40013800 	.word	0x40013800
 8009654:	40021000 	.word	0x40021000
 8009658:	40004400 	.word	0x40004400
 800965c:	40004800 	.word	0x40004800
 8009660:	40004c00 	.word	0x40004c00
 8009664:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009672:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 812a 	beq.w	80098d0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009680:	4a9e      	ldr	r2, [pc, #632]	@ (80098fc <UART_SetConfig+0x590>)
 8009682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009686:	461a      	mov	r2, r3
 8009688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968a:	fbb3 f3f2 	udiv	r3, r3, r2
 800968e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	4613      	mov	r3, r2
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	4413      	add	r3, r2
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	429a      	cmp	r2, r3
 800969e:	d305      	bcc.n	80096ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096a6:	69ba      	ldr	r2, [r7, #24]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d903      	bls.n	80096b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80096b2:	e10d      	b.n	80098d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b6:	2200      	movs	r2, #0
 80096b8:	60bb      	str	r3, [r7, #8]
 80096ba:	60fa      	str	r2, [r7, #12]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c0:	4a8e      	ldr	r2, [pc, #568]	@ (80098fc <UART_SetConfig+0x590>)
 80096c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2200      	movs	r2, #0
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096d6:	f7f7 f9a5 	bl	8000a24 <__aeabi_uldivmod>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4610      	mov	r0, r2
 80096e0:	4619      	mov	r1, r3
 80096e2:	f04f 0200 	mov.w	r2, #0
 80096e6:	f04f 0300 	mov.w	r3, #0
 80096ea:	020b      	lsls	r3, r1, #8
 80096ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096f0:	0202      	lsls	r2, r0, #8
 80096f2:	6979      	ldr	r1, [r7, #20]
 80096f4:	6849      	ldr	r1, [r1, #4]
 80096f6:	0849      	lsrs	r1, r1, #1
 80096f8:	2000      	movs	r0, #0
 80096fa:	460c      	mov	r4, r1
 80096fc:	4605      	mov	r5, r0
 80096fe:	eb12 0804 	adds.w	r8, r2, r4
 8009702:	eb43 0905 	adc.w	r9, r3, r5
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	469a      	mov	sl, r3
 800970e:	4693      	mov	fp, r2
 8009710:	4652      	mov	r2, sl
 8009712:	465b      	mov	r3, fp
 8009714:	4640      	mov	r0, r8
 8009716:	4649      	mov	r1, r9
 8009718:	f7f7 f984 	bl	8000a24 <__aeabi_uldivmod>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4613      	mov	r3, r2
 8009722:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800972a:	d308      	bcc.n	800973e <UART_SetConfig+0x3d2>
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009732:	d204      	bcs.n	800973e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6a3a      	ldr	r2, [r7, #32]
 800973a:	60da      	str	r2, [r3, #12]
 800973c:	e0c8      	b.n	80098d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009744:	e0c4      	b.n	80098d0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800974e:	d167      	bne.n	8009820 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009750:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009754:	2b08      	cmp	r3, #8
 8009756:	d828      	bhi.n	80097aa <UART_SetConfig+0x43e>
 8009758:	a201      	add	r2, pc, #4	@ (adr r2, 8009760 <UART_SetConfig+0x3f4>)
 800975a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975e:	bf00      	nop
 8009760:	08009785 	.word	0x08009785
 8009764:	0800978d 	.word	0x0800978d
 8009768:	08009795 	.word	0x08009795
 800976c:	080097ab 	.word	0x080097ab
 8009770:	0800979b 	.word	0x0800979b
 8009774:	080097ab 	.word	0x080097ab
 8009778:	080097ab 	.word	0x080097ab
 800977c:	080097ab 	.word	0x080097ab
 8009780:	080097a3 	.word	0x080097a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009784:	f7fd f860 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8009788:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800978a:	e014      	b.n	80097b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800978c:	f7fd f872 	bl	8006874 <HAL_RCC_GetPCLK2Freq>
 8009790:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009792:	e010      	b.n	80097b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009794:	4b5a      	ldr	r3, [pc, #360]	@ (8009900 <UART_SetConfig+0x594>)
 8009796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009798:	e00d      	b.n	80097b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800979a:	f7fc ffe7 	bl	800676c <HAL_RCC_GetSysClockFreq>
 800979e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097a0:	e009      	b.n	80097b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80097a8:	e005      	b.n	80097b6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 8089 	beq.w	80098d0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c2:	4a4e      	ldr	r2, [pc, #312]	@ (80098fc <UART_SetConfig+0x590>)
 80097c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c8:	461a      	mov	r2, r3
 80097ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80097d0:	005a      	lsls	r2, r3, #1
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	085b      	lsrs	r3, r3, #1
 80097d8:	441a      	add	r2, r3
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	2b0f      	cmp	r3, #15
 80097e8:	d916      	bls.n	8009818 <UART_SetConfig+0x4ac>
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097f0:	d212      	bcs.n	8009818 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	f023 030f 	bic.w	r3, r3, #15
 80097fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	b29b      	uxth	r3, r3
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	b29a      	uxth	r2, r3
 8009808:	8bfb      	ldrh	r3, [r7, #30]
 800980a:	4313      	orrs	r3, r2
 800980c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	8bfa      	ldrh	r2, [r7, #30]
 8009814:	60da      	str	r2, [r3, #12]
 8009816:	e05b      	b.n	80098d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800981e:	e057      	b.n	80098d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009820:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009824:	2b08      	cmp	r3, #8
 8009826:	d828      	bhi.n	800987a <UART_SetConfig+0x50e>
 8009828:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <UART_SetConfig+0x4c4>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	08009855 	.word	0x08009855
 8009834:	0800985d 	.word	0x0800985d
 8009838:	08009865 	.word	0x08009865
 800983c:	0800987b 	.word	0x0800987b
 8009840:	0800986b 	.word	0x0800986b
 8009844:	0800987b 	.word	0x0800987b
 8009848:	0800987b 	.word	0x0800987b
 800984c:	0800987b 	.word	0x0800987b
 8009850:	08009873 	.word	0x08009873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009854:	f7fc fff8 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8009858:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800985a:	e014      	b.n	8009886 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800985c:	f7fd f80a 	bl	8006874 <HAL_RCC_GetPCLK2Freq>
 8009860:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009862:	e010      	b.n	8009886 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009864:	4b26      	ldr	r3, [pc, #152]	@ (8009900 <UART_SetConfig+0x594>)
 8009866:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009868:	e00d      	b.n	8009886 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800986a:	f7fc ff7f 	bl	800676c <HAL_RCC_GetSysClockFreq>
 800986e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009870:	e009      	b.n	8009886 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009878:	e005      	b.n	8009886 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009884:	bf00      	nop
    }

    if (pclk != 0U)
 8009886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009888:	2b00      	cmp	r3, #0
 800988a:	d021      	beq.n	80098d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009890:	4a1a      	ldr	r2, [pc, #104]	@ (80098fc <UART_SetConfig+0x590>)
 8009892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009896:	461a      	mov	r2, r3
 8009898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989a:	fbb3 f2f2 	udiv	r2, r3, r2
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	085b      	lsrs	r3, r3, #1
 80098a4:	441a      	add	r2, r3
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	2b0f      	cmp	r3, #15
 80098b4:	d909      	bls.n	80098ca <UART_SetConfig+0x55e>
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098bc:	d205      	bcs.n	80098ca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60da      	str	r2, [r3, #12]
 80098c8:	e002      	b.n	80098d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	2201      	movs	r2, #1
 80098dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	2200      	movs	r2, #0
 80098e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2200      	movs	r2, #0
 80098ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80098ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3730      	adds	r7, #48	@ 0x30
 80098f4:	46bd      	mov	sp, r7
 80098f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098fa:	bf00      	nop
 80098fc:	0800bfe0 	.word	0x0800bfe0
 8009900:	00f42400 	.word	0x00f42400

08009904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00a      	beq.n	800992e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009954:	f003 0302 	and.w	r3, r3, #2
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00a      	beq.n	8009972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009976:	f003 0304 	and.w	r3, r3, #4
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009998:	f003 0310 	and.w	r3, r3, #16
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00a      	beq.n	80099b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00a      	beq.n	80099d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	430a      	orrs	r2, r1
 80099d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01a      	beq.n	8009a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	430a      	orrs	r2, r1
 80099f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a02:	d10a      	bne.n	8009a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00a      	beq.n	8009a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	605a      	str	r2, [r3, #4]
  }
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b098      	sub	sp, #96	@ 0x60
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a58:	f7f9 ff06 	bl	8003868 <HAL_GetTick>
 8009a5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0308 	and.w	r3, r3, #8
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d12f      	bne.n	8009acc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a74:	2200      	movs	r2, #0
 8009a76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f88e 	bl	8009b9c <UART_WaitOnFlagUntilTimeout>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d022      	beq.n	8009acc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009aa6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e6      	bne.n	8009a86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2220      	movs	r2, #32
 8009abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	e063      	b.n	8009b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0304 	and.w	r3, r3, #4
 8009ad6:	2b04      	cmp	r3, #4
 8009ad8:	d149      	bne.n	8009b6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ada:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f857 	bl	8009b9c <UART_WaitOnFlagUntilTimeout>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d03c      	beq.n	8009b6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	623b      	str	r3, [r7, #32]
   return(result);
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b12:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e6      	bne.n	8009af4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3308      	adds	r3, #8
 8009b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	e853 3f00 	ldrex	r3, [r3]
 8009b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f023 0301 	bic.w	r3, r3, #1
 8009b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3308      	adds	r3, #8
 8009b44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b46:	61fa      	str	r2, [r7, #28]
 8009b48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4a:	69b9      	ldr	r1, [r7, #24]
 8009b4c:	69fa      	ldr	r2, [r7, #28]
 8009b4e:	e841 2300 	strex	r3, r2, [r1]
 8009b52:	617b      	str	r3, [r7, #20]
   return(result);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1e5      	bne.n	8009b26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e012      	b.n	8009b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3758      	adds	r7, #88	@ 0x58
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bac:	e04f      	b.n	8009c4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb4:	d04b      	beq.n	8009c4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bb6:	f7f9 fe57 	bl	8003868 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	69ba      	ldr	r2, [r7, #24]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d302      	bcc.n	8009bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e04e      	b.n	8009c6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d037      	beq.n	8009c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b80      	cmp	r3, #128	@ 0x80
 8009be2:	d034      	beq.n	8009c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2b40      	cmp	r3, #64	@ 0x40
 8009be8:	d031      	beq.n	8009c4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	f003 0308 	and.w	r3, r3, #8
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d110      	bne.n	8009c1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2208      	movs	r2, #8
 8009bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f838 	bl	8009c76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2208      	movs	r2, #8
 8009c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e029      	b.n	8009c6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c28:	d111      	bne.n	8009c4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 f81e 	bl	8009c76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e00f      	b.n	8009c6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	69da      	ldr	r2, [r3, #28]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4013      	ands	r3, r2
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	bf0c      	ite	eq
 8009c5e:	2301      	moveq	r3, #1
 8009c60:	2300      	movne	r3, #0
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d0a0      	beq.n	8009bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b095      	sub	sp, #84	@ 0x54
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c86:	e853 3f00 	ldrex	r3, [r3]
 8009c8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ca2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ca4:	e841 2300 	strex	r3, r2, [r1]
 8009ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1e6      	bne.n	8009c7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	e853 3f00 	ldrex	r3, [r3]
 8009cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cc6:	f023 0301 	bic.w	r3, r3, #1
 8009cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cdc:	e841 2300 	strex	r3, r2, [r1]
 8009ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1e3      	bne.n	8009cb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d118      	bne.n	8009d22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	e853 3f00 	ldrex	r3, [r3]
 8009cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f023 0310 	bic.w	r3, r3, #16
 8009d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d0e:	61bb      	str	r3, [r7, #24]
 8009d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	6979      	ldr	r1, [r7, #20]
 8009d14:	69ba      	ldr	r2, [r7, #24]
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e6      	bne.n	8009cf0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2220      	movs	r2, #32
 8009d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009d36:	bf00      	nop
 8009d38:	3754      	adds	r7, #84	@ 0x54
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d101      	bne.n	8009d58 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d54:	2302      	movs	r3, #2
 8009d56:	e027      	b.n	8009da8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2224      	movs	r2, #36	@ 0x24
 8009d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 0201 	bic.w	r2, r2, #1
 8009d7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e02d      	b.n	8009e28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2224      	movs	r2, #36	@ 0x24
 8009dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0201 	bic.w	r2, r2, #1
 8009df2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f84f 	bl	8009eac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d101      	bne.n	8009e48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e44:	2302      	movs	r3, #2
 8009e46:	e02d      	b.n	8009ea4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2224      	movs	r2, #36	@ 0x24
 8009e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 0201 	bic.w	r2, r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	430a      	orrs	r2, r1
 8009e82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f811 	bl	8009eac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2220      	movs	r2, #32
 8009e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d108      	bne.n	8009ece <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ecc:	e031      	b.n	8009f32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ece:	2308      	movs	r3, #8
 8009ed0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ed2:	2308      	movs	r3, #8
 8009ed4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	0e5b      	lsrs	r3, r3, #25
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	0f5b      	lsrs	r3, r3, #29
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	f003 0307 	and.w	r3, r3, #7
 8009ef4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	7b3a      	ldrb	r2, [r7, #12]
 8009efa:	4911      	ldr	r1, [pc, #68]	@ (8009f40 <UARTEx_SetNbDataToProcess+0x94>)
 8009efc:	5c8a      	ldrb	r2, [r1, r2]
 8009efe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f02:	7b3a      	ldrb	r2, [r7, #12]
 8009f04:	490f      	ldr	r1, [pc, #60]	@ (8009f44 <UARTEx_SetNbDataToProcess+0x98>)
 8009f06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f08:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	7b7a      	ldrb	r2, [r7, #13]
 8009f18:	4909      	ldr	r1, [pc, #36]	@ (8009f40 <UARTEx_SetNbDataToProcess+0x94>)
 8009f1a:	5c8a      	ldrb	r2, [r1, r2]
 8009f1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f20:	7b7a      	ldrb	r2, [r7, #13]
 8009f22:	4908      	ldr	r1, [pc, #32]	@ (8009f44 <UARTEx_SetNbDataToProcess+0x98>)
 8009f24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009f32:	bf00      	nop
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	0800bff8 	.word	0x0800bff8
 8009f44:	0800c000 	.word	0x0800c000

08009f48 <memset>:
 8009f48:	4402      	add	r2, r0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d100      	bne.n	8009f52 <memset+0xa>
 8009f50:	4770      	bx	lr
 8009f52:	f803 1b01 	strb.w	r1, [r3], #1
 8009f56:	e7f9      	b.n	8009f4c <memset+0x4>

08009f58 <__errno>:
 8009f58:	4b01      	ldr	r3, [pc, #4]	@ (8009f60 <__errno+0x8>)
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	20000058 	.word	0x20000058

08009f64 <__libc_init_array>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4d0d      	ldr	r5, [pc, #52]	@ (8009f9c <__libc_init_array+0x38>)
 8009f68:	4c0d      	ldr	r4, [pc, #52]	@ (8009fa0 <__libc_init_array+0x3c>)
 8009f6a:	1b64      	subs	r4, r4, r5
 8009f6c:	10a4      	asrs	r4, r4, #2
 8009f6e:	2600      	movs	r6, #0
 8009f70:	42a6      	cmp	r6, r4
 8009f72:	d109      	bne.n	8009f88 <__libc_init_array+0x24>
 8009f74:	4d0b      	ldr	r5, [pc, #44]	@ (8009fa4 <__libc_init_array+0x40>)
 8009f76:	4c0c      	ldr	r4, [pc, #48]	@ (8009fa8 <__libc_init_array+0x44>)
 8009f78:	f002 f80a 	bl	800bf90 <_init>
 8009f7c:	1b64      	subs	r4, r4, r5
 8009f7e:	10a4      	asrs	r4, r4, #2
 8009f80:	2600      	movs	r6, #0
 8009f82:	42a6      	cmp	r6, r4
 8009f84:	d105      	bne.n	8009f92 <__libc_init_array+0x2e>
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f8c:	4798      	blx	r3
 8009f8e:	3601      	adds	r6, #1
 8009f90:	e7ee      	b.n	8009f70 <__libc_init_array+0xc>
 8009f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f96:	4798      	blx	r3
 8009f98:	3601      	adds	r6, #1
 8009f9a:	e7f2      	b.n	8009f82 <__libc_init_array+0x1e>
 8009f9c:	0800c5f0 	.word	0x0800c5f0
 8009fa0:	0800c5f0 	.word	0x0800c5f0
 8009fa4:	0800c5f0 	.word	0x0800c5f0
 8009fa8:	0800c5f4 	.word	0x0800c5f4
 8009fac:	00000000 	.word	0x00000000

08009fb0 <cos>:
 8009fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fb2:	ec53 2b10 	vmov	r2, r3, d0
 8009fb6:	4826      	ldr	r0, [pc, #152]	@ (800a050 <cos+0xa0>)
 8009fb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fbc:	4281      	cmp	r1, r0
 8009fbe:	d806      	bhi.n	8009fce <cos+0x1e>
 8009fc0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a048 <cos+0x98>
 8009fc4:	b005      	add	sp, #20
 8009fc6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fca:	f000 b99d 	b.w	800a308 <__kernel_cos>
 8009fce:	4821      	ldr	r0, [pc, #132]	@ (800a054 <cos+0xa4>)
 8009fd0:	4281      	cmp	r1, r0
 8009fd2:	d908      	bls.n	8009fe6 <cos+0x36>
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	f7f6 fa4c 	bl	8000474 <__aeabi_dsub>
 8009fdc:	ec41 0b10 	vmov	d0, r0, r1
 8009fe0:	b005      	add	sp, #20
 8009fe2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fe6:	4668      	mov	r0, sp
 8009fe8:	f000 fb12 	bl	800a610 <__ieee754_rem_pio2>
 8009fec:	f000 0003 	and.w	r0, r0, #3
 8009ff0:	2801      	cmp	r0, #1
 8009ff2:	d00b      	beq.n	800a00c <cos+0x5c>
 8009ff4:	2802      	cmp	r0, #2
 8009ff6:	d015      	beq.n	800a024 <cos+0x74>
 8009ff8:	b9d8      	cbnz	r0, 800a032 <cos+0x82>
 8009ffa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ffe:	ed9d 0b00 	vldr	d0, [sp]
 800a002:	f000 f981 	bl	800a308 <__kernel_cos>
 800a006:	ec51 0b10 	vmov	r0, r1, d0
 800a00a:	e7e7      	b.n	8009fdc <cos+0x2c>
 800a00c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a010:	ed9d 0b00 	vldr	d0, [sp]
 800a014:	f000 fa40 	bl	800a498 <__kernel_sin>
 800a018:	ec53 2b10 	vmov	r2, r3, d0
 800a01c:	4610      	mov	r0, r2
 800a01e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a022:	e7db      	b.n	8009fdc <cos+0x2c>
 800a024:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a028:	ed9d 0b00 	vldr	d0, [sp]
 800a02c:	f000 f96c 	bl	800a308 <__kernel_cos>
 800a030:	e7f2      	b.n	800a018 <cos+0x68>
 800a032:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a036:	ed9d 0b00 	vldr	d0, [sp]
 800a03a:	2001      	movs	r0, #1
 800a03c:	f000 fa2c 	bl	800a498 <__kernel_sin>
 800a040:	e7e1      	b.n	800a006 <cos+0x56>
 800a042:	bf00      	nop
 800a044:	f3af 8000 	nop.w
	...
 800a050:	3fe921fb 	.word	0x3fe921fb
 800a054:	7fefffff 	.word	0x7fefffff

0800a058 <sin>:
 800a058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a05a:	ec53 2b10 	vmov	r2, r3, d0
 800a05e:	4826      	ldr	r0, [pc, #152]	@ (800a0f8 <sin+0xa0>)
 800a060:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a064:	4281      	cmp	r1, r0
 800a066:	d807      	bhi.n	800a078 <sin+0x20>
 800a068:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a0f0 <sin+0x98>
 800a06c:	2000      	movs	r0, #0
 800a06e:	b005      	add	sp, #20
 800a070:	f85d eb04 	ldr.w	lr, [sp], #4
 800a074:	f000 ba10 	b.w	800a498 <__kernel_sin>
 800a078:	4820      	ldr	r0, [pc, #128]	@ (800a0fc <sin+0xa4>)
 800a07a:	4281      	cmp	r1, r0
 800a07c:	d908      	bls.n	800a090 <sin+0x38>
 800a07e:	4610      	mov	r0, r2
 800a080:	4619      	mov	r1, r3
 800a082:	f7f6 f9f7 	bl	8000474 <__aeabi_dsub>
 800a086:	ec41 0b10 	vmov	d0, r0, r1
 800a08a:	b005      	add	sp, #20
 800a08c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a090:	4668      	mov	r0, sp
 800a092:	f000 fabd 	bl	800a610 <__ieee754_rem_pio2>
 800a096:	f000 0003 	and.w	r0, r0, #3
 800a09a:	2801      	cmp	r0, #1
 800a09c:	d00c      	beq.n	800a0b8 <sin+0x60>
 800a09e:	2802      	cmp	r0, #2
 800a0a0:	d011      	beq.n	800a0c6 <sin+0x6e>
 800a0a2:	b9e8      	cbnz	r0, 800a0e0 <sin+0x88>
 800a0a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0a8:	ed9d 0b00 	vldr	d0, [sp]
 800a0ac:	2001      	movs	r0, #1
 800a0ae:	f000 f9f3 	bl	800a498 <__kernel_sin>
 800a0b2:	ec51 0b10 	vmov	r0, r1, d0
 800a0b6:	e7e6      	b.n	800a086 <sin+0x2e>
 800a0b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0bc:	ed9d 0b00 	vldr	d0, [sp]
 800a0c0:	f000 f922 	bl	800a308 <__kernel_cos>
 800a0c4:	e7f5      	b.n	800a0b2 <sin+0x5a>
 800a0c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0ca:	ed9d 0b00 	vldr	d0, [sp]
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	f000 f9e2 	bl	800a498 <__kernel_sin>
 800a0d4:	ec53 2b10 	vmov	r2, r3, d0
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a0de:	e7d2      	b.n	800a086 <sin+0x2e>
 800a0e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0e4:	ed9d 0b00 	vldr	d0, [sp]
 800a0e8:	f000 f90e 	bl	800a308 <__kernel_cos>
 800a0ec:	e7f2      	b.n	800a0d4 <sin+0x7c>
 800a0ee:	bf00      	nop
	...
 800a0f8:	3fe921fb 	.word	0x3fe921fb
 800a0fc:	7fefffff 	.word	0x7fefffff

0800a100 <atan2f>:
 800a100:	f000 bd2a 	b.w	800ab58 <__ieee754_atan2f>

0800a104 <sqrtf>:
 800a104:	b508      	push	{r3, lr}
 800a106:	ed2d 8b02 	vpush	{d8}
 800a10a:	eeb0 8a40 	vmov.f32	s16, s0
 800a10e:	f000 f8b1 	bl	800a274 <__ieee754_sqrtf>
 800a112:	eeb4 8a48 	vcmp.f32	s16, s16
 800a116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11a:	d60c      	bvs.n	800a136 <sqrtf+0x32>
 800a11c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a13c <sqrtf+0x38>
 800a120:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a128:	d505      	bpl.n	800a136 <sqrtf+0x32>
 800a12a:	f7ff ff15 	bl	8009f58 <__errno>
 800a12e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a132:	2321      	movs	r3, #33	@ 0x21
 800a134:	6003      	str	r3, [r0, #0]
 800a136:	ecbd 8b02 	vpop	{d8}
 800a13a:	bd08      	pop	{r3, pc}
 800a13c:	00000000 	.word	0x00000000

0800a140 <cosf>:
 800a140:	ee10 3a10 	vmov	r3, s0
 800a144:	b507      	push	{r0, r1, r2, lr}
 800a146:	4a1e      	ldr	r2, [pc, #120]	@ (800a1c0 <cosf+0x80>)
 800a148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d806      	bhi.n	800a15e <cosf+0x1e>
 800a150:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a1c4 <cosf+0x84>
 800a154:	b003      	add	sp, #12
 800a156:	f85d eb04 	ldr.w	lr, [sp], #4
 800a15a:	f000 bc5d 	b.w	800aa18 <__kernel_cosf>
 800a15e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a162:	d304      	bcc.n	800a16e <cosf+0x2e>
 800a164:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a168:	b003      	add	sp, #12
 800a16a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a16e:	4668      	mov	r0, sp
 800a170:	f000 fd92 	bl	800ac98 <__ieee754_rem_pio2f>
 800a174:	f000 0003 	and.w	r0, r0, #3
 800a178:	2801      	cmp	r0, #1
 800a17a:	d009      	beq.n	800a190 <cosf+0x50>
 800a17c:	2802      	cmp	r0, #2
 800a17e:	d010      	beq.n	800a1a2 <cosf+0x62>
 800a180:	b9b0      	cbnz	r0, 800a1b0 <cosf+0x70>
 800a182:	eddd 0a01 	vldr	s1, [sp, #4]
 800a186:	ed9d 0a00 	vldr	s0, [sp]
 800a18a:	f000 fc45 	bl	800aa18 <__kernel_cosf>
 800a18e:	e7eb      	b.n	800a168 <cosf+0x28>
 800a190:	eddd 0a01 	vldr	s1, [sp, #4]
 800a194:	ed9d 0a00 	vldr	s0, [sp]
 800a198:	f000 fc96 	bl	800aac8 <__kernel_sinf>
 800a19c:	eeb1 0a40 	vneg.f32	s0, s0
 800a1a0:	e7e2      	b.n	800a168 <cosf+0x28>
 800a1a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1a6:	ed9d 0a00 	vldr	s0, [sp]
 800a1aa:	f000 fc35 	bl	800aa18 <__kernel_cosf>
 800a1ae:	e7f5      	b.n	800a19c <cosf+0x5c>
 800a1b0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1b4:	ed9d 0a00 	vldr	s0, [sp]
 800a1b8:	2001      	movs	r0, #1
 800a1ba:	f000 fc85 	bl	800aac8 <__kernel_sinf>
 800a1be:	e7d3      	b.n	800a168 <cosf+0x28>
 800a1c0:	3f490fd8 	.word	0x3f490fd8
 800a1c4:	00000000 	.word	0x00000000

0800a1c8 <fmaxf>:
 800a1c8:	b508      	push	{r3, lr}
 800a1ca:	ed2d 8b02 	vpush	{d8}
 800a1ce:	eeb0 8a40 	vmov.f32	s16, s0
 800a1d2:	eef0 8a60 	vmov.f32	s17, s1
 800a1d6:	f000 f831 	bl	800a23c <__fpclassifyf>
 800a1da:	b930      	cbnz	r0, 800a1ea <fmaxf+0x22>
 800a1dc:	eeb0 8a68 	vmov.f32	s16, s17
 800a1e0:	eeb0 0a48 	vmov.f32	s0, s16
 800a1e4:	ecbd 8b02 	vpop	{d8}
 800a1e8:	bd08      	pop	{r3, pc}
 800a1ea:	eeb0 0a68 	vmov.f32	s0, s17
 800a1ee:	f000 f825 	bl	800a23c <__fpclassifyf>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d0f4      	beq.n	800a1e0 <fmaxf+0x18>
 800a1f6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fe:	dded      	ble.n	800a1dc <fmaxf+0x14>
 800a200:	e7ee      	b.n	800a1e0 <fmaxf+0x18>

0800a202 <fminf>:
 800a202:	b508      	push	{r3, lr}
 800a204:	ed2d 8b02 	vpush	{d8}
 800a208:	eeb0 8a40 	vmov.f32	s16, s0
 800a20c:	eef0 8a60 	vmov.f32	s17, s1
 800a210:	f000 f814 	bl	800a23c <__fpclassifyf>
 800a214:	b930      	cbnz	r0, 800a224 <fminf+0x22>
 800a216:	eeb0 8a68 	vmov.f32	s16, s17
 800a21a:	eeb0 0a48 	vmov.f32	s0, s16
 800a21e:	ecbd 8b02 	vpop	{d8}
 800a222:	bd08      	pop	{r3, pc}
 800a224:	eeb0 0a68 	vmov.f32	s0, s17
 800a228:	f000 f808 	bl	800a23c <__fpclassifyf>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d0f4      	beq.n	800a21a <fminf+0x18>
 800a230:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a238:	d5ed      	bpl.n	800a216 <fminf+0x14>
 800a23a:	e7ee      	b.n	800a21a <fminf+0x18>

0800a23c <__fpclassifyf>:
 800a23c:	ee10 3a10 	vmov	r3, s0
 800a240:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a244:	d00d      	beq.n	800a262 <__fpclassifyf+0x26>
 800a246:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a24a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a24e:	d30a      	bcc.n	800a266 <__fpclassifyf+0x2a>
 800a250:	4b07      	ldr	r3, [pc, #28]	@ (800a270 <__fpclassifyf+0x34>)
 800a252:	1e42      	subs	r2, r0, #1
 800a254:	429a      	cmp	r2, r3
 800a256:	d908      	bls.n	800a26a <__fpclassifyf+0x2e>
 800a258:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a25c:	4258      	negs	r0, r3
 800a25e:	4158      	adcs	r0, r3
 800a260:	4770      	bx	lr
 800a262:	2002      	movs	r0, #2
 800a264:	4770      	bx	lr
 800a266:	2004      	movs	r0, #4
 800a268:	4770      	bx	lr
 800a26a:	2003      	movs	r0, #3
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	007ffffe 	.word	0x007ffffe

0800a274 <__ieee754_sqrtf>:
 800a274:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a278:	4770      	bx	lr
	...

0800a27c <round>:
 800a27c:	ec51 0b10 	vmov	r0, r1, d0
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a286:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a28a:	2a13      	cmp	r2, #19
 800a28c:	460b      	mov	r3, r1
 800a28e:	4605      	mov	r5, r0
 800a290:	dc1b      	bgt.n	800a2ca <round+0x4e>
 800a292:	2a00      	cmp	r2, #0
 800a294:	da0b      	bge.n	800a2ae <round+0x32>
 800a296:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a29a:	3201      	adds	r2, #1
 800a29c:	bf04      	itt	eq
 800a29e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a2a2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	e015      	b.n	800a2da <round+0x5e>
 800a2ae:	4c15      	ldr	r4, [pc, #84]	@ (800a304 <round+0x88>)
 800a2b0:	4114      	asrs	r4, r2
 800a2b2:	ea04 0601 	and.w	r6, r4, r1
 800a2b6:	4306      	orrs	r6, r0
 800a2b8:	d00f      	beq.n	800a2da <round+0x5e>
 800a2ba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a2be:	fa41 f202 	asr.w	r2, r1, r2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	ea23 0304 	bic.w	r3, r3, r4
 800a2c8:	e7ed      	b.n	800a2a6 <round+0x2a>
 800a2ca:	2a33      	cmp	r2, #51	@ 0x33
 800a2cc:	dd08      	ble.n	800a2e0 <round+0x64>
 800a2ce:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a2d2:	d102      	bne.n	800a2da <round+0x5e>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	f7f6 f8cf 	bl	8000478 <__adddf3>
 800a2da:	ec41 0b10 	vmov	d0, r0, r1
 800a2de:	bd70      	pop	{r4, r5, r6, pc}
 800a2e0:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a2e4:	f04f 34ff 	mov.w	r4, #4294967295
 800a2e8:	40f4      	lsrs	r4, r6
 800a2ea:	4204      	tst	r4, r0
 800a2ec:	d0f5      	beq.n	800a2da <round+0x5e>
 800a2ee:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	408a      	lsls	r2, r1
 800a2f6:	1952      	adds	r2, r2, r5
 800a2f8:	bf28      	it	cs
 800a2fa:	3301      	addcs	r3, #1
 800a2fc:	ea22 0204 	bic.w	r2, r2, r4
 800a300:	e7d2      	b.n	800a2a8 <round+0x2c>
 800a302:	bf00      	nop
 800a304:	000fffff 	.word	0x000fffff

0800a308 <__kernel_cos>:
 800a308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	ec57 6b10 	vmov	r6, r7, d0
 800a310:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a314:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a318:	ed8d 1b00 	vstr	d1, [sp]
 800a31c:	d206      	bcs.n	800a32c <__kernel_cos+0x24>
 800a31e:	4630      	mov	r0, r6
 800a320:	4639      	mov	r1, r7
 800a322:	f7f6 fae7 	bl	80008f4 <__aeabi_d2iz>
 800a326:	2800      	cmp	r0, #0
 800a328:	f000 8088 	beq.w	800a43c <__kernel_cos+0x134>
 800a32c:	4632      	mov	r2, r6
 800a32e:	463b      	mov	r3, r7
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f5 ff70 	bl	8000218 <__aeabi_dmul>
 800a338:	4b51      	ldr	r3, [pc, #324]	@ (800a480 <__kernel_cos+0x178>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	4604      	mov	r4, r0
 800a33e:	460d      	mov	r5, r1
 800a340:	f7f5 ff6a 	bl	8000218 <__aeabi_dmul>
 800a344:	a340      	add	r3, pc, #256	@ (adr r3, 800a448 <__kernel_cos+0x140>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	4682      	mov	sl, r0
 800a34c:	468b      	mov	fp, r1
 800a34e:	4620      	mov	r0, r4
 800a350:	4629      	mov	r1, r5
 800a352:	f7f5 ff61 	bl	8000218 <__aeabi_dmul>
 800a356:	a33e      	add	r3, pc, #248	@ (adr r3, 800a450 <__kernel_cos+0x148>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f7f6 f88c 	bl	8000478 <__adddf3>
 800a360:	4622      	mov	r2, r4
 800a362:	462b      	mov	r3, r5
 800a364:	f7f5 ff58 	bl	8000218 <__aeabi_dmul>
 800a368:	a33b      	add	r3, pc, #236	@ (adr r3, 800a458 <__kernel_cos+0x150>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f7f6 f881 	bl	8000474 <__aeabi_dsub>
 800a372:	4622      	mov	r2, r4
 800a374:	462b      	mov	r3, r5
 800a376:	f7f5 ff4f 	bl	8000218 <__aeabi_dmul>
 800a37a:	a339      	add	r3, pc, #228	@ (adr r3, 800a460 <__kernel_cos+0x158>)
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	f7f6 f87a 	bl	8000478 <__adddf3>
 800a384:	4622      	mov	r2, r4
 800a386:	462b      	mov	r3, r5
 800a388:	f7f5 ff46 	bl	8000218 <__aeabi_dmul>
 800a38c:	a336      	add	r3, pc, #216	@ (adr r3, 800a468 <__kernel_cos+0x160>)
 800a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a392:	f7f6 f86f 	bl	8000474 <__aeabi_dsub>
 800a396:	4622      	mov	r2, r4
 800a398:	462b      	mov	r3, r5
 800a39a:	f7f5 ff3d 	bl	8000218 <__aeabi_dmul>
 800a39e:	a334      	add	r3, pc, #208	@ (adr r3, 800a470 <__kernel_cos+0x168>)
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f7f6 f868 	bl	8000478 <__adddf3>
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	462b      	mov	r3, r5
 800a3ac:	f7f5 ff34 	bl	8000218 <__aeabi_dmul>
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	462b      	mov	r3, r5
 800a3b4:	f7f5 ff30 	bl	8000218 <__aeabi_dmul>
 800a3b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3bc:	4604      	mov	r4, r0
 800a3be:	460d      	mov	r5, r1
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	f7f5 ff28 	bl	8000218 <__aeabi_dmul>
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f7f6 f850 	bl	8000474 <__aeabi_dsub>
 800a3d4:	4b2b      	ldr	r3, [pc, #172]	@ (800a484 <__kernel_cos+0x17c>)
 800a3d6:	4598      	cmp	r8, r3
 800a3d8:	4606      	mov	r6, r0
 800a3da:	460f      	mov	r7, r1
 800a3dc:	d810      	bhi.n	800a400 <__kernel_cos+0xf8>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4650      	mov	r0, sl
 800a3e4:	4659      	mov	r1, fp
 800a3e6:	f7f6 f845 	bl	8000474 <__aeabi_dsub>
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4926      	ldr	r1, [pc, #152]	@ (800a488 <__kernel_cos+0x180>)
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	f7f6 f83f 	bl	8000474 <__aeabi_dsub>
 800a3f6:	ec41 0b10 	vmov	d0, r0, r1
 800a3fa:	b003      	add	sp, #12
 800a3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a400:	4b22      	ldr	r3, [pc, #136]	@ (800a48c <__kernel_cos+0x184>)
 800a402:	4921      	ldr	r1, [pc, #132]	@ (800a488 <__kernel_cos+0x180>)
 800a404:	4598      	cmp	r8, r3
 800a406:	bf8c      	ite	hi
 800a408:	4d21      	ldrhi	r5, [pc, #132]	@ (800a490 <__kernel_cos+0x188>)
 800a40a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a40e:	2400      	movs	r4, #0
 800a410:	4622      	mov	r2, r4
 800a412:	462b      	mov	r3, r5
 800a414:	2000      	movs	r0, #0
 800a416:	f7f6 f82d 	bl	8000474 <__aeabi_dsub>
 800a41a:	4622      	mov	r2, r4
 800a41c:	4680      	mov	r8, r0
 800a41e:	4689      	mov	r9, r1
 800a420:	462b      	mov	r3, r5
 800a422:	4650      	mov	r0, sl
 800a424:	4659      	mov	r1, fp
 800a426:	f7f6 f825 	bl	8000474 <__aeabi_dsub>
 800a42a:	4632      	mov	r2, r6
 800a42c:	463b      	mov	r3, r7
 800a42e:	f7f6 f821 	bl	8000474 <__aeabi_dsub>
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	4640      	mov	r0, r8
 800a438:	4649      	mov	r1, r9
 800a43a:	e7da      	b.n	800a3f2 <__kernel_cos+0xea>
 800a43c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a478 <__kernel_cos+0x170>
 800a440:	e7db      	b.n	800a3fa <__kernel_cos+0xf2>
 800a442:	bf00      	nop
 800a444:	f3af 8000 	nop.w
 800a448:	be8838d4 	.word	0xbe8838d4
 800a44c:	bda8fae9 	.word	0xbda8fae9
 800a450:	bdb4b1c4 	.word	0xbdb4b1c4
 800a454:	3e21ee9e 	.word	0x3e21ee9e
 800a458:	809c52ad 	.word	0x809c52ad
 800a45c:	3e927e4f 	.word	0x3e927e4f
 800a460:	19cb1590 	.word	0x19cb1590
 800a464:	3efa01a0 	.word	0x3efa01a0
 800a468:	16c15177 	.word	0x16c15177
 800a46c:	3f56c16c 	.word	0x3f56c16c
 800a470:	5555554c 	.word	0x5555554c
 800a474:	3fa55555 	.word	0x3fa55555
 800a478:	00000000 	.word	0x00000000
 800a47c:	3ff00000 	.word	0x3ff00000
 800a480:	3fe00000 	.word	0x3fe00000
 800a484:	3fd33332 	.word	0x3fd33332
 800a488:	3ff00000 	.word	0x3ff00000
 800a48c:	3fe90000 	.word	0x3fe90000
 800a490:	3fd20000 	.word	0x3fd20000
 800a494:	00000000 	.word	0x00000000

0800a498 <__kernel_sin>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	ec55 4b10 	vmov	r4, r5, d0
 800a4a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a4a4:	b085      	sub	sp, #20
 800a4a6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a4aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a4ae:	4680      	mov	r8, r0
 800a4b0:	d205      	bcs.n	800a4be <__kernel_sin+0x26>
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	f7f6 fa1d 	bl	80008f4 <__aeabi_d2iz>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d052      	beq.n	800a564 <__kernel_sin+0xcc>
 800a4be:	4622      	mov	r2, r4
 800a4c0:	462b      	mov	r3, r5
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	f7f5 fea7 	bl	8000218 <__aeabi_dmul>
 800a4ca:	4682      	mov	sl, r0
 800a4cc:	468b      	mov	fp, r1
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f7f5 fe9f 	bl	8000218 <__aeabi_dmul>
 800a4da:	a342      	add	r3, pc, #264	@ (adr r3, 800a5e4 <__kernel_sin+0x14c>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	e9cd 0100 	strd	r0, r1, [sp]
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	4659      	mov	r1, fp
 800a4e8:	f7f5 fe96 	bl	8000218 <__aeabi_dmul>
 800a4ec:	a33f      	add	r3, pc, #252	@ (adr r3, 800a5ec <__kernel_sin+0x154>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	f7f5 ffbf 	bl	8000474 <__aeabi_dsub>
 800a4f6:	4652      	mov	r2, sl
 800a4f8:	465b      	mov	r3, fp
 800a4fa:	f7f5 fe8d 	bl	8000218 <__aeabi_dmul>
 800a4fe:	a33d      	add	r3, pc, #244	@ (adr r3, 800a5f4 <__kernel_sin+0x15c>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f5 ffb8 	bl	8000478 <__adddf3>
 800a508:	4652      	mov	r2, sl
 800a50a:	465b      	mov	r3, fp
 800a50c:	f7f5 fe84 	bl	8000218 <__aeabi_dmul>
 800a510:	a33a      	add	r3, pc, #232	@ (adr r3, 800a5fc <__kernel_sin+0x164>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f7f5 ffad 	bl	8000474 <__aeabi_dsub>
 800a51a:	4652      	mov	r2, sl
 800a51c:	465b      	mov	r3, fp
 800a51e:	f7f5 fe7b 	bl	8000218 <__aeabi_dmul>
 800a522:	a338      	add	r3, pc, #224	@ (adr r3, 800a604 <__kernel_sin+0x16c>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f7f5 ffa6 	bl	8000478 <__adddf3>
 800a52c:	4606      	mov	r6, r0
 800a52e:	460f      	mov	r7, r1
 800a530:	f1b8 0f00 	cmp.w	r8, #0
 800a534:	d11b      	bne.n	800a56e <__kernel_sin+0xd6>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4650      	mov	r0, sl
 800a53c:	4659      	mov	r1, fp
 800a53e:	f7f5 fe6b 	bl	8000218 <__aeabi_dmul>
 800a542:	a325      	add	r3, pc, #148	@ (adr r3, 800a5d8 <__kernel_sin+0x140>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f7f5 ff94 	bl	8000474 <__aeabi_dsub>
 800a54c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a550:	f7f5 fe62 	bl	8000218 <__aeabi_dmul>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4620      	mov	r0, r4
 800a55a:	4629      	mov	r1, r5
 800a55c:	f7f5 ff8c 	bl	8000478 <__adddf3>
 800a560:	4604      	mov	r4, r0
 800a562:	460d      	mov	r5, r1
 800a564:	ec45 4b10 	vmov	d0, r4, r5
 800a568:	b005      	add	sp, #20
 800a56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a572:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e0 <__kernel_sin+0x148>)
 800a574:	2200      	movs	r2, #0
 800a576:	f7f5 fe4f 	bl	8000218 <__aeabi_dmul>
 800a57a:	4632      	mov	r2, r6
 800a57c:	4680      	mov	r8, r0
 800a57e:	4689      	mov	r9, r1
 800a580:	463b      	mov	r3, r7
 800a582:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a586:	f7f5 fe47 	bl	8000218 <__aeabi_dmul>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	4640      	mov	r0, r8
 800a590:	4649      	mov	r1, r9
 800a592:	f7f5 ff6f 	bl	8000474 <__aeabi_dsub>
 800a596:	4652      	mov	r2, sl
 800a598:	465b      	mov	r3, fp
 800a59a:	f7f5 fe3d 	bl	8000218 <__aeabi_dmul>
 800a59e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5a2:	f7f5 ff67 	bl	8000474 <__aeabi_dsub>
 800a5a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a5d8 <__kernel_sin+0x140>)
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	4606      	mov	r6, r0
 800a5ae:	460f      	mov	r7, r1
 800a5b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5b4:	f7f5 fe30 	bl	8000218 <__aeabi_dmul>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4630      	mov	r0, r6
 800a5be:	4639      	mov	r1, r7
 800a5c0:	f7f5 ff5a 	bl	8000478 <__adddf3>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	f7f5 ff52 	bl	8000474 <__aeabi_dsub>
 800a5d0:	e7c6      	b.n	800a560 <__kernel_sin+0xc8>
 800a5d2:	bf00      	nop
 800a5d4:	f3af 8000 	nop.w
 800a5d8:	55555549 	.word	0x55555549
 800a5dc:	3fc55555 	.word	0x3fc55555
 800a5e0:	3fe00000 	.word	0x3fe00000
 800a5e4:	5acfd57c 	.word	0x5acfd57c
 800a5e8:	3de5d93a 	.word	0x3de5d93a
 800a5ec:	8a2b9ceb 	.word	0x8a2b9ceb
 800a5f0:	3e5ae5e6 	.word	0x3e5ae5e6
 800a5f4:	57b1fe7d 	.word	0x57b1fe7d
 800a5f8:	3ec71de3 	.word	0x3ec71de3
 800a5fc:	19c161d5 	.word	0x19c161d5
 800a600:	3f2a01a0 	.word	0x3f2a01a0
 800a604:	1110f8a6 	.word	0x1110f8a6
 800a608:	3f811111 	.word	0x3f811111
 800a60c:	00000000 	.word	0x00000000

0800a610 <__ieee754_rem_pio2>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	ec57 6b10 	vmov	r6, r7, d0
 800a618:	4bc5      	ldr	r3, [pc, #788]	@ (800a930 <__ieee754_rem_pio2+0x320>)
 800a61a:	b08d      	sub	sp, #52	@ 0x34
 800a61c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a620:	4598      	cmp	r8, r3
 800a622:	4604      	mov	r4, r0
 800a624:	9704      	str	r7, [sp, #16]
 800a626:	d807      	bhi.n	800a638 <__ieee754_rem_pio2+0x28>
 800a628:	2200      	movs	r2, #0
 800a62a:	2300      	movs	r3, #0
 800a62c:	ed80 0b00 	vstr	d0, [r0]
 800a630:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a634:	2500      	movs	r5, #0
 800a636:	e028      	b.n	800a68a <__ieee754_rem_pio2+0x7a>
 800a638:	4bbe      	ldr	r3, [pc, #760]	@ (800a934 <__ieee754_rem_pio2+0x324>)
 800a63a:	4598      	cmp	r8, r3
 800a63c:	d878      	bhi.n	800a730 <__ieee754_rem_pio2+0x120>
 800a63e:	9b04      	ldr	r3, [sp, #16]
 800a640:	4dbd      	ldr	r5, [pc, #756]	@ (800a938 <__ieee754_rem_pio2+0x328>)
 800a642:	2b00      	cmp	r3, #0
 800a644:	4630      	mov	r0, r6
 800a646:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a8f8 <__ieee754_rem_pio2+0x2e8>)
 800a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64c:	4639      	mov	r1, r7
 800a64e:	dd38      	ble.n	800a6c2 <__ieee754_rem_pio2+0xb2>
 800a650:	f7f5 ff10 	bl	8000474 <__aeabi_dsub>
 800a654:	45a8      	cmp	r8, r5
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	d01a      	beq.n	800a692 <__ieee754_rem_pio2+0x82>
 800a65c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a900 <__ieee754_rem_pio2+0x2f0>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f7f5 ff07 	bl	8000474 <__aeabi_dsub>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4680      	mov	r8, r0
 800a66c:	4689      	mov	r9, r1
 800a66e:	4630      	mov	r0, r6
 800a670:	4639      	mov	r1, r7
 800a672:	f7f5 feff 	bl	8000474 <__aeabi_dsub>
 800a676:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a900 <__ieee754_rem_pio2+0x2f0>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	f7f5 fefa 	bl	8000474 <__aeabi_dsub>
 800a680:	e9c4 8900 	strd	r8, r9, [r4]
 800a684:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a688:	2501      	movs	r5, #1
 800a68a:	4628      	mov	r0, r5
 800a68c:	b00d      	add	sp, #52	@ 0x34
 800a68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a692:	a39d      	add	r3, pc, #628	@ (adr r3, 800a908 <__ieee754_rem_pio2+0x2f8>)
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f7f5 feec 	bl	8000474 <__aeabi_dsub>
 800a69c:	a39c      	add	r3, pc, #624	@ (adr r3, 800a910 <__ieee754_rem_pio2+0x300>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	f7f5 fee5 	bl	8000474 <__aeabi_dsub>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4680      	mov	r8, r0
 800a6b0:	4689      	mov	r9, r1
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	f7f5 fedd 	bl	8000474 <__aeabi_dsub>
 800a6ba:	a395      	add	r3, pc, #596	@ (adr r3, 800a910 <__ieee754_rem_pio2+0x300>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	e7dc      	b.n	800a67c <__ieee754_rem_pio2+0x6c>
 800a6c2:	f7f5 fed9 	bl	8000478 <__adddf3>
 800a6c6:	45a8      	cmp	r8, r5
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	460f      	mov	r7, r1
 800a6cc:	d018      	beq.n	800a700 <__ieee754_rem_pio2+0xf0>
 800a6ce:	a38c      	add	r3, pc, #560	@ (adr r3, 800a900 <__ieee754_rem_pio2+0x2f0>)
 800a6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d4:	f7f5 fed0 	bl	8000478 <__adddf3>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4680      	mov	r8, r0
 800a6de:	4689      	mov	r9, r1
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f5 fec6 	bl	8000474 <__aeabi_dsub>
 800a6e8:	a385      	add	r3, pc, #532	@ (adr r3, 800a900 <__ieee754_rem_pio2+0x2f0>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 fec3 	bl	8000478 <__adddf3>
 800a6f2:	f04f 35ff 	mov.w	r5, #4294967295
 800a6f6:	e9c4 8900 	strd	r8, r9, [r4]
 800a6fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a6fe:	e7c4      	b.n	800a68a <__ieee754_rem_pio2+0x7a>
 800a700:	a381      	add	r3, pc, #516	@ (adr r3, 800a908 <__ieee754_rem_pio2+0x2f8>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 feb7 	bl	8000478 <__adddf3>
 800a70a:	a381      	add	r3, pc, #516	@ (adr r3, 800a910 <__ieee754_rem_pio2+0x300>)
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	4606      	mov	r6, r0
 800a712:	460f      	mov	r7, r1
 800a714:	f7f5 feb0 	bl	8000478 <__adddf3>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4680      	mov	r8, r0
 800a71e:	4689      	mov	r9, r1
 800a720:	4630      	mov	r0, r6
 800a722:	4639      	mov	r1, r7
 800a724:	f7f5 fea6 	bl	8000474 <__aeabi_dsub>
 800a728:	a379      	add	r3, pc, #484	@ (adr r3, 800a910 <__ieee754_rem_pio2+0x300>)
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	e7de      	b.n	800a6ee <__ieee754_rem_pio2+0xde>
 800a730:	4b82      	ldr	r3, [pc, #520]	@ (800a93c <__ieee754_rem_pio2+0x32c>)
 800a732:	4598      	cmp	r8, r3
 800a734:	f200 80d1 	bhi.w	800a8da <__ieee754_rem_pio2+0x2ca>
 800a738:	f000 f966 	bl	800aa08 <fabs>
 800a73c:	ec57 6b10 	vmov	r6, r7, d0
 800a740:	a375      	add	r3, pc, #468	@ (adr r3, 800a918 <__ieee754_rem_pio2+0x308>)
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	4630      	mov	r0, r6
 800a748:	4639      	mov	r1, r7
 800a74a:	f7f5 fd65 	bl	8000218 <__aeabi_dmul>
 800a74e:	4b7c      	ldr	r3, [pc, #496]	@ (800a940 <__ieee754_rem_pio2+0x330>)
 800a750:	2200      	movs	r2, #0
 800a752:	f7f5 fe91 	bl	8000478 <__adddf3>
 800a756:	f7f6 f8cd 	bl	80008f4 <__aeabi_d2iz>
 800a75a:	4605      	mov	r5, r0
 800a75c:	f7f5 ffd8 	bl	8000710 <__aeabi_i2d>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a768:	a363      	add	r3, pc, #396	@ (adr r3, 800a8f8 <__ieee754_rem_pio2+0x2e8>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	f7f5 fd53 	bl	8000218 <__aeabi_dmul>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4630      	mov	r0, r6
 800a778:	4639      	mov	r1, r7
 800a77a:	f7f5 fe7b 	bl	8000474 <__aeabi_dsub>
 800a77e:	a360      	add	r3, pc, #384	@ (adr r3, 800a900 <__ieee754_rem_pio2+0x2f0>)
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	4682      	mov	sl, r0
 800a786:	468b      	mov	fp, r1
 800a788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a78c:	f7f5 fd44 	bl	8000218 <__aeabi_dmul>
 800a790:	2d1f      	cmp	r5, #31
 800a792:	4606      	mov	r6, r0
 800a794:	460f      	mov	r7, r1
 800a796:	dc0c      	bgt.n	800a7b2 <__ieee754_rem_pio2+0x1a2>
 800a798:	4b6a      	ldr	r3, [pc, #424]	@ (800a944 <__ieee754_rem_pio2+0x334>)
 800a79a:	1e6a      	subs	r2, r5, #1
 800a79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a0:	4543      	cmp	r3, r8
 800a7a2:	d006      	beq.n	800a7b2 <__ieee754_rem_pio2+0x1a2>
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	463b      	mov	r3, r7
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	4659      	mov	r1, fp
 800a7ac:	f7f5 fe62 	bl	8000474 <__aeabi_dsub>
 800a7b0:	e00e      	b.n	800a7d0 <__ieee754_rem_pio2+0x1c0>
 800a7b2:	463b      	mov	r3, r7
 800a7b4:	4632      	mov	r2, r6
 800a7b6:	4650      	mov	r0, sl
 800a7b8:	4659      	mov	r1, fp
 800a7ba:	f7f5 fe5b 	bl	8000474 <__aeabi_dsub>
 800a7be:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a7c2:	9305      	str	r3, [sp, #20]
 800a7c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7c8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a7cc:	2b10      	cmp	r3, #16
 800a7ce:	dc02      	bgt.n	800a7d6 <__ieee754_rem_pio2+0x1c6>
 800a7d0:	e9c4 0100 	strd	r0, r1, [r4]
 800a7d4:	e039      	b.n	800a84a <__ieee754_rem_pio2+0x23a>
 800a7d6:	a34c      	add	r3, pc, #304	@ (adr r3, 800a908 <__ieee754_rem_pio2+0x2f8>)
 800a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e0:	f7f5 fd1a 	bl	8000218 <__aeabi_dmul>
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	460f      	mov	r7, r1
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	4659      	mov	r1, fp
 800a7f0:	f7f5 fe40 	bl	8000474 <__aeabi_dsub>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4680      	mov	r8, r0
 800a7fa:	4689      	mov	r9, r1
 800a7fc:	4650      	mov	r0, sl
 800a7fe:	4659      	mov	r1, fp
 800a800:	f7f5 fe38 	bl	8000474 <__aeabi_dsub>
 800a804:	4632      	mov	r2, r6
 800a806:	463b      	mov	r3, r7
 800a808:	f7f5 fe34 	bl	8000474 <__aeabi_dsub>
 800a80c:	a340      	add	r3, pc, #256	@ (adr r3, 800a910 <__ieee754_rem_pio2+0x300>)
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	4606      	mov	r6, r0
 800a814:	460f      	mov	r7, r1
 800a816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a81a:	f7f5 fcfd 	bl	8000218 <__aeabi_dmul>
 800a81e:	4632      	mov	r2, r6
 800a820:	463b      	mov	r3, r7
 800a822:	f7f5 fe27 	bl	8000474 <__aeabi_dsub>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	4640      	mov	r0, r8
 800a830:	4649      	mov	r1, r9
 800a832:	f7f5 fe1f 	bl	8000474 <__aeabi_dsub>
 800a836:	9a05      	ldr	r2, [sp, #20]
 800a838:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	2b31      	cmp	r3, #49	@ 0x31
 800a840:	dc20      	bgt.n	800a884 <__ieee754_rem_pio2+0x274>
 800a842:	e9c4 0100 	strd	r0, r1, [r4]
 800a846:	46c2      	mov	sl, r8
 800a848:	46cb      	mov	fp, r9
 800a84a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a84e:	4650      	mov	r0, sl
 800a850:	4642      	mov	r2, r8
 800a852:	464b      	mov	r3, r9
 800a854:	4659      	mov	r1, fp
 800a856:	f7f5 fe0d 	bl	8000474 <__aeabi_dsub>
 800a85a:	463b      	mov	r3, r7
 800a85c:	4632      	mov	r2, r6
 800a85e:	f7f5 fe09 	bl	8000474 <__aeabi_dsub>
 800a862:	9b04      	ldr	r3, [sp, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a86a:	f6bf af0e 	bge.w	800a68a <__ieee754_rem_pio2+0x7a>
 800a86e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a872:	6063      	str	r3, [r4, #4]
 800a874:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a878:	f8c4 8000 	str.w	r8, [r4]
 800a87c:	60a0      	str	r0, [r4, #8]
 800a87e:	60e3      	str	r3, [r4, #12]
 800a880:	426d      	negs	r5, r5
 800a882:	e702      	b.n	800a68a <__ieee754_rem_pio2+0x7a>
 800a884:	a326      	add	r3, pc, #152	@ (adr r3, 800a920 <__ieee754_rem_pio2+0x310>)
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a88e:	f7f5 fcc3 	bl	8000218 <__aeabi_dmul>
 800a892:	4606      	mov	r6, r0
 800a894:	460f      	mov	r7, r1
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4640      	mov	r0, r8
 800a89c:	4649      	mov	r1, r9
 800a89e:	f7f5 fde9 	bl	8000474 <__aeabi_dsub>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	4682      	mov	sl, r0
 800a8a8:	468b      	mov	fp, r1
 800a8aa:	4640      	mov	r0, r8
 800a8ac:	4649      	mov	r1, r9
 800a8ae:	f7f5 fde1 	bl	8000474 <__aeabi_dsub>
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	463b      	mov	r3, r7
 800a8b6:	f7f5 fddd 	bl	8000474 <__aeabi_dsub>
 800a8ba:	a31b      	add	r3, pc, #108	@ (adr r3, 800a928 <__ieee754_rem_pio2+0x318>)
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	460f      	mov	r7, r1
 800a8c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c8:	f7f5 fca6 	bl	8000218 <__aeabi_dmul>
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	463b      	mov	r3, r7
 800a8d0:	f7f5 fdd0 	bl	8000474 <__aeabi_dsub>
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	460f      	mov	r7, r1
 800a8d8:	e764      	b.n	800a7a4 <__ieee754_rem_pio2+0x194>
 800a8da:	4b1b      	ldr	r3, [pc, #108]	@ (800a948 <__ieee754_rem_pio2+0x338>)
 800a8dc:	4598      	cmp	r8, r3
 800a8de:	d935      	bls.n	800a94c <__ieee754_rem_pio2+0x33c>
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	f7f5 fdc4 	bl	8000474 <__aeabi_dsub>
 800a8ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a8f0:	e9c4 0100 	strd	r0, r1, [r4]
 800a8f4:	e69e      	b.n	800a634 <__ieee754_rem_pio2+0x24>
 800a8f6:	bf00      	nop
 800a8f8:	54400000 	.word	0x54400000
 800a8fc:	3ff921fb 	.word	0x3ff921fb
 800a900:	1a626331 	.word	0x1a626331
 800a904:	3dd0b461 	.word	0x3dd0b461
 800a908:	1a600000 	.word	0x1a600000
 800a90c:	3dd0b461 	.word	0x3dd0b461
 800a910:	2e037073 	.word	0x2e037073
 800a914:	3ba3198a 	.word	0x3ba3198a
 800a918:	6dc9c883 	.word	0x6dc9c883
 800a91c:	3fe45f30 	.word	0x3fe45f30
 800a920:	2e000000 	.word	0x2e000000
 800a924:	3ba3198a 	.word	0x3ba3198a
 800a928:	252049c1 	.word	0x252049c1
 800a92c:	397b839a 	.word	0x397b839a
 800a930:	3fe921fb 	.word	0x3fe921fb
 800a934:	4002d97b 	.word	0x4002d97b
 800a938:	3ff921fb 	.word	0x3ff921fb
 800a93c:	413921fb 	.word	0x413921fb
 800a940:	3fe00000 	.word	0x3fe00000
 800a944:	0800c008 	.word	0x0800c008
 800a948:	7fefffff 	.word	0x7fefffff
 800a94c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a950:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a954:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a958:	4630      	mov	r0, r6
 800a95a:	460f      	mov	r7, r1
 800a95c:	f7f5 ffca 	bl	80008f4 <__aeabi_d2iz>
 800a960:	f7f5 fed6 	bl	8000710 <__aeabi_i2d>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4630      	mov	r0, r6
 800a96a:	4639      	mov	r1, r7
 800a96c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a970:	f7f5 fd80 	bl	8000474 <__aeabi_dsub>
 800a974:	4b22      	ldr	r3, [pc, #136]	@ (800aa00 <__ieee754_rem_pio2+0x3f0>)
 800a976:	2200      	movs	r2, #0
 800a978:	f7f5 fc4e 	bl	8000218 <__aeabi_dmul>
 800a97c:	460f      	mov	r7, r1
 800a97e:	4606      	mov	r6, r0
 800a980:	f7f5 ffb8 	bl	80008f4 <__aeabi_d2iz>
 800a984:	f7f5 fec4 	bl	8000710 <__aeabi_i2d>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4630      	mov	r0, r6
 800a98e:	4639      	mov	r1, r7
 800a990:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a994:	f7f5 fd6e 	bl	8000474 <__aeabi_dsub>
 800a998:	4b19      	ldr	r3, [pc, #100]	@ (800aa00 <__ieee754_rem_pio2+0x3f0>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	f7f5 fc3c 	bl	8000218 <__aeabi_dmul>
 800a9a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a9a4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a9a8:	f04f 0803 	mov.w	r8, #3
 800a9ac:	2600      	movs	r6, #0
 800a9ae:	2700      	movs	r7, #0
 800a9b0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	46c2      	mov	sl, r8
 800a9ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9be:	f7f5 ff67 	bl	8000890 <__aeabi_dcmpeq>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d1f4      	bne.n	800a9b0 <__ieee754_rem_pio2+0x3a0>
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa04 <__ieee754_rem_pio2+0x3f4>)
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	4653      	mov	r3, sl
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	a806      	add	r0, sp, #24
 800a9d6:	f000 fb6b 	bl	800b0b0 <__kernel_rem_pio2>
 800a9da:	9b04      	ldr	r3, [sp, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	4605      	mov	r5, r0
 800a9e0:	f6bf ae53 	bge.w	800a68a <__ieee754_rem_pio2+0x7a>
 800a9e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a9e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9ec:	e9c4 2300 	strd	r2, r3, [r4]
 800a9f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a9f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a9fc:	e740      	b.n	800a880 <__ieee754_rem_pio2+0x270>
 800a9fe:	bf00      	nop
 800aa00:	41700000 	.word	0x41700000
 800aa04:	0800c088 	.word	0x0800c088

0800aa08 <fabs>:
 800aa08:	ec51 0b10 	vmov	r0, r1, d0
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa12:	ec43 2b10 	vmov	d0, r2, r3
 800aa16:	4770      	bx	lr

0800aa18 <__kernel_cosf>:
 800aa18:	ee10 3a10 	vmov	r3, s0
 800aa1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa20:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800aa24:	eef0 6a40 	vmov.f32	s13, s0
 800aa28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800aa2c:	d204      	bcs.n	800aa38 <__kernel_cosf+0x20>
 800aa2e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800aa32:	ee17 2a90 	vmov	r2, s15
 800aa36:	b342      	cbz	r2, 800aa8a <__kernel_cosf+0x72>
 800aa38:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800aa3c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800aaa8 <__kernel_cosf+0x90>
 800aa40:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800aaac <__kernel_cosf+0x94>
 800aa44:	4a1a      	ldr	r2, [pc, #104]	@ (800aab0 <__kernel_cosf+0x98>)
 800aa46:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800aab4 <__kernel_cosf+0x9c>
 800aa50:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa54:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800aab8 <__kernel_cosf+0xa0>
 800aa58:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aa5c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800aabc <__kernel_cosf+0xa4>
 800aa60:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa64:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800aac0 <__kernel_cosf+0xa8>
 800aa68:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aa6c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800aa70:	ee26 6a07 	vmul.f32	s12, s12, s14
 800aa74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800aa78:	eee7 0a06 	vfma.f32	s1, s14, s12
 800aa7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa80:	d804      	bhi.n	800aa8c <__kernel_cosf+0x74>
 800aa82:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aa86:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa8a:	4770      	bx	lr
 800aa8c:	4a0d      	ldr	r2, [pc, #52]	@ (800aac4 <__kernel_cosf+0xac>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	bf9a      	itte	ls
 800aa92:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800aa96:	ee07 3a10 	vmovls	s14, r3
 800aa9a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800aa9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aaa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aaa6:	e7ec      	b.n	800aa82 <__kernel_cosf+0x6a>
 800aaa8:	ad47d74e 	.word	0xad47d74e
 800aaac:	310f74f6 	.word	0x310f74f6
 800aab0:	3e999999 	.word	0x3e999999
 800aab4:	b493f27c 	.word	0xb493f27c
 800aab8:	37d00d01 	.word	0x37d00d01
 800aabc:	bab60b61 	.word	0xbab60b61
 800aac0:	3d2aaaab 	.word	0x3d2aaaab
 800aac4:	3f480000 	.word	0x3f480000

0800aac8 <__kernel_sinf>:
 800aac8:	ee10 3a10 	vmov	r3, s0
 800aacc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aad0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800aad4:	d204      	bcs.n	800aae0 <__kernel_sinf+0x18>
 800aad6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aada:	ee17 3a90 	vmov	r3, s15
 800aade:	b35b      	cbz	r3, 800ab38 <__kernel_sinf+0x70>
 800aae0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aae4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ab3c <__kernel_sinf+0x74>
 800aae8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ab40 <__kernel_sinf+0x78>
 800aaec:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aaf0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ab44 <__kernel_sinf+0x7c>
 800aaf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aaf8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ab48 <__kernel_sinf+0x80>
 800aafc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ab00:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ab4c <__kernel_sinf+0x84>
 800ab04:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ab08:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ab0c:	b930      	cbnz	r0, 800ab1c <__kernel_sinf+0x54>
 800ab0e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ab50 <__kernel_sinf+0x88>
 800ab12:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ab16:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ab1a:	4770      	bx	lr
 800ab1c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ab20:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ab24:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ab28:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ab2c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ab54 <__kernel_sinf+0x8c>
 800ab30:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ab34:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	2f2ec9d3 	.word	0x2f2ec9d3
 800ab40:	b2d72f34 	.word	0xb2d72f34
 800ab44:	3638ef1b 	.word	0x3638ef1b
 800ab48:	b9500d01 	.word	0xb9500d01
 800ab4c:	3c088889 	.word	0x3c088889
 800ab50:	be2aaaab 	.word	0xbe2aaaab
 800ab54:	3e2aaaab 	.word	0x3e2aaaab

0800ab58 <__ieee754_atan2f>:
 800ab58:	ee10 2a90 	vmov	r2, s1
 800ab5c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ab60:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ab64:	b510      	push	{r4, lr}
 800ab66:	eef0 7a40 	vmov.f32	s15, s0
 800ab6a:	d806      	bhi.n	800ab7a <__ieee754_atan2f+0x22>
 800ab6c:	ee10 0a10 	vmov	r0, s0
 800ab70:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ab74:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ab78:	d904      	bls.n	800ab84 <__ieee754_atan2f+0x2c>
 800ab7a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ab7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ab82:	bd10      	pop	{r4, pc}
 800ab84:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ab88:	d103      	bne.n	800ab92 <__ieee754_atan2f+0x3a>
 800ab8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab8e:	f000 b9b3 	b.w	800aef8 <atanf>
 800ab92:	1794      	asrs	r4, r2, #30
 800ab94:	f004 0402 	and.w	r4, r4, #2
 800ab98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ab9c:	b943      	cbnz	r3, 800abb0 <__ieee754_atan2f+0x58>
 800ab9e:	2c02      	cmp	r4, #2
 800aba0:	d05e      	beq.n	800ac60 <__ieee754_atan2f+0x108>
 800aba2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ac74 <__ieee754_atan2f+0x11c>
 800aba6:	2c03      	cmp	r4, #3
 800aba8:	bf08      	it	eq
 800abaa:	eef0 7a47 	vmoveq.f32	s15, s14
 800abae:	e7e6      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800abb0:	b941      	cbnz	r1, 800abc4 <__ieee754_atan2f+0x6c>
 800abb2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ac78 <__ieee754_atan2f+0x120>
 800abb6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ac7c <__ieee754_atan2f+0x124>
 800abba:	2800      	cmp	r0, #0
 800abbc:	bfb8      	it	lt
 800abbe:	eef0 7a47 	vmovlt.f32	s15, s14
 800abc2:	e7dc      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800abc4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800abc8:	d110      	bne.n	800abec <__ieee754_atan2f+0x94>
 800abca:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800abce:	f104 34ff 	add.w	r4, r4, #4294967295
 800abd2:	d107      	bne.n	800abe4 <__ieee754_atan2f+0x8c>
 800abd4:	2c02      	cmp	r4, #2
 800abd6:	d846      	bhi.n	800ac66 <__ieee754_atan2f+0x10e>
 800abd8:	4b29      	ldr	r3, [pc, #164]	@ (800ac80 <__ieee754_atan2f+0x128>)
 800abda:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800abde:	edd3 7a00 	vldr	s15, [r3]
 800abe2:	e7cc      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800abe4:	2c02      	cmp	r4, #2
 800abe6:	d841      	bhi.n	800ac6c <__ieee754_atan2f+0x114>
 800abe8:	4b26      	ldr	r3, [pc, #152]	@ (800ac84 <__ieee754_atan2f+0x12c>)
 800abea:	e7f6      	b.n	800abda <__ieee754_atan2f+0x82>
 800abec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800abf0:	d0df      	beq.n	800abb2 <__ieee754_atan2f+0x5a>
 800abf2:	1a5b      	subs	r3, r3, r1
 800abf4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800abf8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800abfc:	da1a      	bge.n	800ac34 <__ieee754_atan2f+0xdc>
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	da01      	bge.n	800ac06 <__ieee754_atan2f+0xae>
 800ac02:	313c      	adds	r1, #60	@ 0x3c
 800ac04:	db19      	blt.n	800ac3a <__ieee754_atan2f+0xe2>
 800ac06:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ac0a:	f000 fa49 	bl	800b0a0 <fabsf>
 800ac0e:	f000 f973 	bl	800aef8 <atanf>
 800ac12:	eef0 7a40 	vmov.f32	s15, s0
 800ac16:	2c01      	cmp	r4, #1
 800ac18:	d012      	beq.n	800ac40 <__ieee754_atan2f+0xe8>
 800ac1a:	2c02      	cmp	r4, #2
 800ac1c:	d017      	beq.n	800ac4e <__ieee754_atan2f+0xf6>
 800ac1e:	2c00      	cmp	r4, #0
 800ac20:	d0ad      	beq.n	800ab7e <__ieee754_atan2f+0x26>
 800ac22:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ac88 <__ieee754_atan2f+0x130>
 800ac26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac2a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ac8c <__ieee754_atan2f+0x134>
 800ac2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac32:	e7a4      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac34:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ac78 <__ieee754_atan2f+0x120>
 800ac38:	e7ed      	b.n	800ac16 <__ieee754_atan2f+0xbe>
 800ac3a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ac90 <__ieee754_atan2f+0x138>
 800ac3e:	e7ea      	b.n	800ac16 <__ieee754_atan2f+0xbe>
 800ac40:	ee17 3a90 	vmov	r3, s15
 800ac44:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ac48:	ee07 3a90 	vmov	s15, r3
 800ac4c:	e797      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac4e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ac88 <__ieee754_atan2f+0x130>
 800ac52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac56:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ac8c <__ieee754_atan2f+0x134>
 800ac5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac5e:	e78e      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac60:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ac8c <__ieee754_atan2f+0x134>
 800ac64:	e78b      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac66:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ac94 <__ieee754_atan2f+0x13c>
 800ac6a:	e788      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac6c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ac90 <__ieee754_atan2f+0x138>
 800ac70:	e785      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac72:	bf00      	nop
 800ac74:	c0490fdb 	.word	0xc0490fdb
 800ac78:	3fc90fdb 	.word	0x3fc90fdb
 800ac7c:	bfc90fdb 	.word	0xbfc90fdb
 800ac80:	0800c19c 	.word	0x0800c19c
 800ac84:	0800c190 	.word	0x0800c190
 800ac88:	33bbbd2e 	.word	0x33bbbd2e
 800ac8c:	40490fdb 	.word	0x40490fdb
 800ac90:	00000000 	.word	0x00000000
 800ac94:	3f490fdb 	.word	0x3f490fdb

0800ac98 <__ieee754_rem_pio2f>:
 800ac98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac9a:	ee10 6a10 	vmov	r6, s0
 800ac9e:	4b88      	ldr	r3, [pc, #544]	@ (800aec0 <__ieee754_rem_pio2f+0x228>)
 800aca0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800aca4:	429d      	cmp	r5, r3
 800aca6:	b087      	sub	sp, #28
 800aca8:	4604      	mov	r4, r0
 800acaa:	d805      	bhi.n	800acb8 <__ieee754_rem_pio2f+0x20>
 800acac:	2300      	movs	r3, #0
 800acae:	ed80 0a00 	vstr	s0, [r0]
 800acb2:	6043      	str	r3, [r0, #4]
 800acb4:	2000      	movs	r0, #0
 800acb6:	e022      	b.n	800acfe <__ieee754_rem_pio2f+0x66>
 800acb8:	4b82      	ldr	r3, [pc, #520]	@ (800aec4 <__ieee754_rem_pio2f+0x22c>)
 800acba:	429d      	cmp	r5, r3
 800acbc:	d83a      	bhi.n	800ad34 <__ieee754_rem_pio2f+0x9c>
 800acbe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800acc2:	2e00      	cmp	r6, #0
 800acc4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800aec8 <__ieee754_rem_pio2f+0x230>
 800acc8:	4a80      	ldr	r2, [pc, #512]	@ (800aecc <__ieee754_rem_pio2f+0x234>)
 800acca:	f023 030f 	bic.w	r3, r3, #15
 800acce:	dd18      	ble.n	800ad02 <__ieee754_rem_pio2f+0x6a>
 800acd0:	4293      	cmp	r3, r2
 800acd2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800acd6:	bf09      	itett	eq
 800acd8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800aed0 <__ieee754_rem_pio2f+0x238>
 800acdc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800aed4 <__ieee754_rem_pio2f+0x23c>
 800ace0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800aed8 <__ieee754_rem_pio2f+0x240>
 800ace4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ace8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800acec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acf0:	ed80 7a00 	vstr	s14, [r0]
 800acf4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800acf8:	edc0 7a01 	vstr	s15, [r0, #4]
 800acfc:	2001      	movs	r0, #1
 800acfe:	b007      	add	sp, #28
 800ad00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad02:	4293      	cmp	r3, r2
 800ad04:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ad08:	bf09      	itett	eq
 800ad0a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800aed0 <__ieee754_rem_pio2f+0x238>
 800ad0e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800aed4 <__ieee754_rem_pio2f+0x23c>
 800ad12:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800aed8 <__ieee754_rem_pio2f+0x240>
 800ad16:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ad1a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ad1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad22:	ed80 7a00 	vstr	s14, [r0]
 800ad26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2a:	edc0 7a01 	vstr	s15, [r0, #4]
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	e7e4      	b.n	800acfe <__ieee754_rem_pio2f+0x66>
 800ad34:	4b69      	ldr	r3, [pc, #420]	@ (800aedc <__ieee754_rem_pio2f+0x244>)
 800ad36:	429d      	cmp	r5, r3
 800ad38:	d873      	bhi.n	800ae22 <__ieee754_rem_pio2f+0x18a>
 800ad3a:	f000 f9b1 	bl	800b0a0 <fabsf>
 800ad3e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800aee0 <__ieee754_rem_pio2f+0x248>
 800ad42:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ad46:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ad4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad52:	ee17 0a90 	vmov	r0, s15
 800ad56:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800aec8 <__ieee754_rem_pio2f+0x230>
 800ad5a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ad5e:	281f      	cmp	r0, #31
 800ad60:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800aed4 <__ieee754_rem_pio2f+0x23c>
 800ad64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad68:	eeb1 6a47 	vneg.f32	s12, s14
 800ad6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ad70:	ee16 1a90 	vmov	r1, s13
 800ad74:	dc09      	bgt.n	800ad8a <__ieee754_rem_pio2f+0xf2>
 800ad76:	4a5b      	ldr	r2, [pc, #364]	@ (800aee4 <__ieee754_rem_pio2f+0x24c>)
 800ad78:	1e47      	subs	r7, r0, #1
 800ad7a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ad7e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800ad82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d107      	bne.n	800ad9a <__ieee754_rem_pio2f+0x102>
 800ad8a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ad8e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ad92:	2a08      	cmp	r2, #8
 800ad94:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ad98:	dc14      	bgt.n	800adc4 <__ieee754_rem_pio2f+0x12c>
 800ad9a:	6021      	str	r1, [r4, #0]
 800ad9c:	ed94 7a00 	vldr	s14, [r4]
 800ada0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ada4:	2e00      	cmp	r6, #0
 800ada6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800adaa:	ed84 0a01 	vstr	s0, [r4, #4]
 800adae:	daa6      	bge.n	800acfe <__ieee754_rem_pio2f+0x66>
 800adb0:	eeb1 7a47 	vneg.f32	s14, s14
 800adb4:	eeb1 0a40 	vneg.f32	s0, s0
 800adb8:	ed84 7a00 	vstr	s14, [r4]
 800adbc:	ed84 0a01 	vstr	s0, [r4, #4]
 800adc0:	4240      	negs	r0, r0
 800adc2:	e79c      	b.n	800acfe <__ieee754_rem_pio2f+0x66>
 800adc4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800aed0 <__ieee754_rem_pio2f+0x238>
 800adc8:	eef0 6a40 	vmov.f32	s13, s0
 800adcc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800add0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800add4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800add8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800aed8 <__ieee754_rem_pio2f+0x240>
 800addc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ade0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ade4:	ee15 2a90 	vmov	r2, s11
 800ade8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800adec:	1a5b      	subs	r3, r3, r1
 800adee:	2b19      	cmp	r3, #25
 800adf0:	dc04      	bgt.n	800adfc <__ieee754_rem_pio2f+0x164>
 800adf2:	edc4 5a00 	vstr	s11, [r4]
 800adf6:	eeb0 0a66 	vmov.f32	s0, s13
 800adfa:	e7cf      	b.n	800ad9c <__ieee754_rem_pio2f+0x104>
 800adfc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800aee8 <__ieee754_rem_pio2f+0x250>
 800ae00:	eeb0 0a66 	vmov.f32	s0, s13
 800ae04:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ae08:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ae0c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800aeec <__ieee754_rem_pio2f+0x254>
 800ae10:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ae14:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ae18:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ae1c:	ed84 7a00 	vstr	s14, [r4]
 800ae20:	e7bc      	b.n	800ad9c <__ieee754_rem_pio2f+0x104>
 800ae22:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800ae26:	d306      	bcc.n	800ae36 <__ieee754_rem_pio2f+0x19e>
 800ae28:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ae2c:	edc0 7a01 	vstr	s15, [r0, #4]
 800ae30:	edc0 7a00 	vstr	s15, [r0]
 800ae34:	e73e      	b.n	800acb4 <__ieee754_rem_pio2f+0x1c>
 800ae36:	15ea      	asrs	r2, r5, #23
 800ae38:	3a86      	subs	r2, #134	@ 0x86
 800ae3a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ae46:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800aef0 <__ieee754_rem_pio2f+0x258>
 800ae4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae52:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ae56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ae5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ae5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae66:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ae6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ae6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae76:	edcd 7a05 	vstr	s15, [sp, #20]
 800ae7a:	d11e      	bne.n	800aeba <__ieee754_rem_pio2f+0x222>
 800ae7c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ae80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae84:	bf0c      	ite	eq
 800ae86:	2301      	moveq	r3, #1
 800ae88:	2302      	movne	r3, #2
 800ae8a:	491a      	ldr	r1, [pc, #104]	@ (800aef4 <__ieee754_rem_pio2f+0x25c>)
 800ae8c:	9101      	str	r1, [sp, #4]
 800ae8e:	2102      	movs	r1, #2
 800ae90:	9100      	str	r1, [sp, #0]
 800ae92:	a803      	add	r0, sp, #12
 800ae94:	4621      	mov	r1, r4
 800ae96:	f000 fc63 	bl	800b760 <__kernel_rem_pio2f>
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	f6bf af2f 	bge.w	800acfe <__ieee754_rem_pio2f+0x66>
 800aea0:	edd4 7a00 	vldr	s15, [r4]
 800aea4:	eef1 7a67 	vneg.f32	s15, s15
 800aea8:	edc4 7a00 	vstr	s15, [r4]
 800aeac:	edd4 7a01 	vldr	s15, [r4, #4]
 800aeb0:	eef1 7a67 	vneg.f32	s15, s15
 800aeb4:	edc4 7a01 	vstr	s15, [r4, #4]
 800aeb8:	e782      	b.n	800adc0 <__ieee754_rem_pio2f+0x128>
 800aeba:	2303      	movs	r3, #3
 800aebc:	e7e5      	b.n	800ae8a <__ieee754_rem_pio2f+0x1f2>
 800aebe:	bf00      	nop
 800aec0:	3f490fd8 	.word	0x3f490fd8
 800aec4:	4016cbe3 	.word	0x4016cbe3
 800aec8:	3fc90f80 	.word	0x3fc90f80
 800aecc:	3fc90fd0 	.word	0x3fc90fd0
 800aed0:	37354400 	.word	0x37354400
 800aed4:	37354443 	.word	0x37354443
 800aed8:	2e85a308 	.word	0x2e85a308
 800aedc:	43490f80 	.word	0x43490f80
 800aee0:	3f22f984 	.word	0x3f22f984
 800aee4:	0800c1a8 	.word	0x0800c1a8
 800aee8:	2e85a300 	.word	0x2e85a300
 800aeec:	248d3132 	.word	0x248d3132
 800aef0:	43800000 	.word	0x43800000
 800aef4:	0800c228 	.word	0x0800c228

0800aef8 <atanf>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	ee10 5a10 	vmov	r5, s0
 800aefe:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800af02:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800af06:	eef0 7a40 	vmov.f32	s15, s0
 800af0a:	d310      	bcc.n	800af2e <atanf+0x36>
 800af0c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800af10:	d904      	bls.n	800af1c <atanf+0x24>
 800af12:	ee70 7a00 	vadd.f32	s15, s0, s0
 800af16:	eeb0 0a67 	vmov.f32	s0, s15
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800b054 <atanf+0x15c>
 800af20:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800b058 <atanf+0x160>
 800af24:	2d00      	cmp	r5, #0
 800af26:	bfc8      	it	gt
 800af28:	eef0 7a47 	vmovgt.f32	s15, s14
 800af2c:	e7f3      	b.n	800af16 <atanf+0x1e>
 800af2e:	4b4b      	ldr	r3, [pc, #300]	@ (800b05c <atanf+0x164>)
 800af30:	429c      	cmp	r4, r3
 800af32:	d810      	bhi.n	800af56 <atanf+0x5e>
 800af34:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800af38:	d20a      	bcs.n	800af50 <atanf+0x58>
 800af3a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800b060 <atanf+0x168>
 800af3e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800af42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af46:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800af4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af4e:	dce2      	bgt.n	800af16 <atanf+0x1e>
 800af50:	f04f 33ff 	mov.w	r3, #4294967295
 800af54:	e013      	b.n	800af7e <atanf+0x86>
 800af56:	f000 f8a3 	bl	800b0a0 <fabsf>
 800af5a:	4b42      	ldr	r3, [pc, #264]	@ (800b064 <atanf+0x16c>)
 800af5c:	429c      	cmp	r4, r3
 800af5e:	d84f      	bhi.n	800b000 <atanf+0x108>
 800af60:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800af64:	429c      	cmp	r4, r3
 800af66:	d841      	bhi.n	800afec <atanf+0xf4>
 800af68:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800af6c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800af70:	eea0 7a27 	vfma.f32	s14, s0, s15
 800af74:	2300      	movs	r3, #0
 800af76:	ee30 0a27 	vadd.f32	s0, s0, s15
 800af7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800af84:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b068 <atanf+0x170>
 800af88:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800b06c <atanf+0x174>
 800af8c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800b070 <atanf+0x178>
 800af90:	ee66 6a06 	vmul.f32	s13, s12, s12
 800af94:	eee6 5a87 	vfma.f32	s11, s13, s14
 800af98:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800b074 <atanf+0x17c>
 800af9c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800afa0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800b078 <atanf+0x180>
 800afa4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800afa8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800b07c <atanf+0x184>
 800afac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800afb0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b080 <atanf+0x188>
 800afb4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800afb8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800b084 <atanf+0x18c>
 800afbc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800afc0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800b088 <atanf+0x190>
 800afc4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800afc8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800b08c <atanf+0x194>
 800afcc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800afd0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b090 <atanf+0x198>
 800afd4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800afd8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800afdc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800afe0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800afe4:	d121      	bne.n	800b02a <atanf+0x132>
 800afe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afea:	e794      	b.n	800af16 <atanf+0x1e>
 800afec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800aff0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800aff4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aff8:	2301      	movs	r3, #1
 800affa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800affe:	e7be      	b.n	800af7e <atanf+0x86>
 800b000:	4b24      	ldr	r3, [pc, #144]	@ (800b094 <atanf+0x19c>)
 800b002:	429c      	cmp	r4, r3
 800b004:	d80b      	bhi.n	800b01e <atanf+0x126>
 800b006:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800b00a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b00e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b012:	2302      	movs	r3, #2
 800b014:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01c:	e7af      	b.n	800af7e <atanf+0x86>
 800b01e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b022:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b026:	2303      	movs	r3, #3
 800b028:	e7a9      	b.n	800af7e <atanf+0x86>
 800b02a:	4a1b      	ldr	r2, [pc, #108]	@ (800b098 <atanf+0x1a0>)
 800b02c:	491b      	ldr	r1, [pc, #108]	@ (800b09c <atanf+0x1a4>)
 800b02e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b032:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b036:	edd3 6a00 	vldr	s13, [r3]
 800b03a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b03e:	2d00      	cmp	r5, #0
 800b040:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b044:	edd2 7a00 	vldr	s15, [r2]
 800b048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b04c:	bfb8      	it	lt
 800b04e:	eef1 7a67 	vneglt.f32	s15, s15
 800b052:	e760      	b.n	800af16 <atanf+0x1e>
 800b054:	bfc90fdb 	.word	0xbfc90fdb
 800b058:	3fc90fdb 	.word	0x3fc90fdb
 800b05c:	3edfffff 	.word	0x3edfffff
 800b060:	7149f2ca 	.word	0x7149f2ca
 800b064:	3f97ffff 	.word	0x3f97ffff
 800b068:	3c8569d7 	.word	0x3c8569d7
 800b06c:	3d4bda59 	.word	0x3d4bda59
 800b070:	bd6ef16b 	.word	0xbd6ef16b
 800b074:	3d886b35 	.word	0x3d886b35
 800b078:	3dba2e6e 	.word	0x3dba2e6e
 800b07c:	3e124925 	.word	0x3e124925
 800b080:	3eaaaaab 	.word	0x3eaaaaab
 800b084:	bd15a221 	.word	0xbd15a221
 800b088:	bd9d8795 	.word	0xbd9d8795
 800b08c:	bde38e38 	.word	0xbde38e38
 800b090:	be4ccccd 	.word	0xbe4ccccd
 800b094:	401bffff 	.word	0x401bffff
 800b098:	0800c550 	.word	0x0800c550
 800b09c:	0800c540 	.word	0x0800c540

0800b0a0 <fabsf>:
 800b0a0:	ee10 3a10 	vmov	r3, s0
 800b0a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0a8:	ee00 3a10 	vmov	s0, r3
 800b0ac:	4770      	bx	lr
	...

0800b0b0 <__kernel_rem_pio2>:
 800b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	ed2d 8b02 	vpush	{d8}
 800b0b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b0bc:	f112 0f14 	cmn.w	r2, #20
 800b0c0:	9306      	str	r3, [sp, #24]
 800b0c2:	9104      	str	r1, [sp, #16]
 800b0c4:	4bbe      	ldr	r3, [pc, #760]	@ (800b3c0 <__kernel_rem_pio2+0x310>)
 800b0c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b0c8:	9008      	str	r0, [sp, #32]
 800b0ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	9b06      	ldr	r3, [sp, #24]
 800b0d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0d6:	bfa8      	it	ge
 800b0d8:	1ed4      	subge	r4, r2, #3
 800b0da:	9305      	str	r3, [sp, #20]
 800b0dc:	bfb2      	itee	lt
 800b0de:	2400      	movlt	r4, #0
 800b0e0:	2318      	movge	r3, #24
 800b0e2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b0e6:	f06f 0317 	mvn.w	r3, #23
 800b0ea:	fb04 3303 	mla	r3, r4, r3, r3
 800b0ee:	eb03 0b02 	add.w	fp, r3, r2
 800b0f2:	9b00      	ldr	r3, [sp, #0]
 800b0f4:	9a05      	ldr	r2, [sp, #20]
 800b0f6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b3b0 <__kernel_rem_pio2+0x300>
 800b0fa:	eb03 0802 	add.w	r8, r3, r2
 800b0fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b100:	1aa7      	subs	r7, r4, r2
 800b102:	ae20      	add	r6, sp, #128	@ 0x80
 800b104:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b108:	2500      	movs	r5, #0
 800b10a:	4545      	cmp	r5, r8
 800b10c:	dd13      	ble.n	800b136 <__kernel_rem_pio2+0x86>
 800b10e:	9b06      	ldr	r3, [sp, #24]
 800b110:	aa20      	add	r2, sp, #128	@ 0x80
 800b112:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b116:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b11a:	f04f 0800 	mov.w	r8, #0
 800b11e:	9b00      	ldr	r3, [sp, #0]
 800b120:	4598      	cmp	r8, r3
 800b122:	dc31      	bgt.n	800b188 <__kernel_rem_pio2+0xd8>
 800b124:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b3b0 <__kernel_rem_pio2+0x300>
 800b128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b12c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b130:	462f      	mov	r7, r5
 800b132:	2600      	movs	r6, #0
 800b134:	e01b      	b.n	800b16e <__kernel_rem_pio2+0xbe>
 800b136:	42ef      	cmn	r7, r5
 800b138:	d407      	bmi.n	800b14a <__kernel_rem_pio2+0x9a>
 800b13a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b13e:	f7f5 fae7 	bl	8000710 <__aeabi_i2d>
 800b142:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b146:	3501      	adds	r5, #1
 800b148:	e7df      	b.n	800b10a <__kernel_rem_pio2+0x5a>
 800b14a:	ec51 0b18 	vmov	r0, r1, d8
 800b14e:	e7f8      	b.n	800b142 <__kernel_rem_pio2+0x92>
 800b150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b154:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b158:	f7f5 f85e 	bl	8000218 <__aeabi_dmul>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b164:	f7f5 f988 	bl	8000478 <__adddf3>
 800b168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b16c:	3601      	adds	r6, #1
 800b16e:	9b05      	ldr	r3, [sp, #20]
 800b170:	429e      	cmp	r6, r3
 800b172:	f1a7 0708 	sub.w	r7, r7, #8
 800b176:	ddeb      	ble.n	800b150 <__kernel_rem_pio2+0xa0>
 800b178:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b17c:	f108 0801 	add.w	r8, r8, #1
 800b180:	ecaa 7b02 	vstmia	sl!, {d7}
 800b184:	3508      	adds	r5, #8
 800b186:	e7ca      	b.n	800b11e <__kernel_rem_pio2+0x6e>
 800b188:	9b00      	ldr	r3, [sp, #0]
 800b18a:	f8dd 8000 	ldr.w	r8, [sp]
 800b18e:	aa0c      	add	r2, sp, #48	@ 0x30
 800b190:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b194:	930a      	str	r3, [sp, #40]	@ 0x28
 800b196:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b198:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b19e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b1a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1a4:	ab98      	add	r3, sp, #608	@ 0x260
 800b1a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b1aa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b1ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1b2:	ac0c      	add	r4, sp, #48	@ 0x30
 800b1b4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b1b6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b1ba:	46a1      	mov	r9, r4
 800b1bc:	46c2      	mov	sl, r8
 800b1be:	f1ba 0f00 	cmp.w	sl, #0
 800b1c2:	f1a5 0508 	sub.w	r5, r5, #8
 800b1c6:	dc77      	bgt.n	800b2b8 <__kernel_rem_pio2+0x208>
 800b1c8:	4658      	mov	r0, fp
 800b1ca:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b1ce:	f000 fd3b 	bl	800bc48 <scalbn>
 800b1d2:	ec57 6b10 	vmov	r6, r7, d0
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b1dc:	4630      	mov	r0, r6
 800b1de:	4639      	mov	r1, r7
 800b1e0:	f7f5 f81a 	bl	8000218 <__aeabi_dmul>
 800b1e4:	ec41 0b10 	vmov	d0, r0, r1
 800b1e8:	f000 fe12 	bl	800be10 <floor>
 800b1ec:	4b75      	ldr	r3, [pc, #468]	@ (800b3c4 <__kernel_rem_pio2+0x314>)
 800b1ee:	ec51 0b10 	vmov	r0, r1, d0
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f7f5 f810 	bl	8000218 <__aeabi_dmul>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	4639      	mov	r1, r7
 800b200:	f7f5 f938 	bl	8000474 <__aeabi_dsub>
 800b204:	460f      	mov	r7, r1
 800b206:	4606      	mov	r6, r0
 800b208:	f7f5 fb74 	bl	80008f4 <__aeabi_d2iz>
 800b20c:	9002      	str	r0, [sp, #8]
 800b20e:	f7f5 fa7f 	bl	8000710 <__aeabi_i2d>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	4630      	mov	r0, r6
 800b218:	4639      	mov	r1, r7
 800b21a:	f7f5 f92b 	bl	8000474 <__aeabi_dsub>
 800b21e:	f1bb 0f00 	cmp.w	fp, #0
 800b222:	4606      	mov	r6, r0
 800b224:	460f      	mov	r7, r1
 800b226:	dd6c      	ble.n	800b302 <__kernel_rem_pio2+0x252>
 800b228:	f108 31ff 	add.w	r1, r8, #4294967295
 800b22c:	ab0c      	add	r3, sp, #48	@ 0x30
 800b22e:	9d02      	ldr	r5, [sp, #8]
 800b230:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b234:	f1cb 0018 	rsb	r0, fp, #24
 800b238:	fa43 f200 	asr.w	r2, r3, r0
 800b23c:	4415      	add	r5, r2
 800b23e:	4082      	lsls	r2, r0
 800b240:	1a9b      	subs	r3, r3, r2
 800b242:	aa0c      	add	r2, sp, #48	@ 0x30
 800b244:	9502      	str	r5, [sp, #8]
 800b246:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b24a:	f1cb 0217 	rsb	r2, fp, #23
 800b24e:	fa43 f902 	asr.w	r9, r3, r2
 800b252:	f1b9 0f00 	cmp.w	r9, #0
 800b256:	dd64      	ble.n	800b322 <__kernel_rem_pio2+0x272>
 800b258:	9b02      	ldr	r3, [sp, #8]
 800b25a:	2200      	movs	r2, #0
 800b25c:	3301      	adds	r3, #1
 800b25e:	9302      	str	r3, [sp, #8]
 800b260:	4615      	mov	r5, r2
 800b262:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b266:	4590      	cmp	r8, r2
 800b268:	f300 80b8 	bgt.w	800b3dc <__kernel_rem_pio2+0x32c>
 800b26c:	f1bb 0f00 	cmp.w	fp, #0
 800b270:	dd07      	ble.n	800b282 <__kernel_rem_pio2+0x1d2>
 800b272:	f1bb 0f01 	cmp.w	fp, #1
 800b276:	f000 80bf 	beq.w	800b3f8 <__kernel_rem_pio2+0x348>
 800b27a:	f1bb 0f02 	cmp.w	fp, #2
 800b27e:	f000 80c6 	beq.w	800b40e <__kernel_rem_pio2+0x35e>
 800b282:	f1b9 0f02 	cmp.w	r9, #2
 800b286:	d14c      	bne.n	800b322 <__kernel_rem_pio2+0x272>
 800b288:	4632      	mov	r2, r6
 800b28a:	463b      	mov	r3, r7
 800b28c:	494e      	ldr	r1, [pc, #312]	@ (800b3c8 <__kernel_rem_pio2+0x318>)
 800b28e:	2000      	movs	r0, #0
 800b290:	f7f5 f8f0 	bl	8000474 <__aeabi_dsub>
 800b294:	4606      	mov	r6, r0
 800b296:	460f      	mov	r7, r1
 800b298:	2d00      	cmp	r5, #0
 800b29a:	d042      	beq.n	800b322 <__kernel_rem_pio2+0x272>
 800b29c:	4658      	mov	r0, fp
 800b29e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b3b8 <__kernel_rem_pio2+0x308>
 800b2a2:	f000 fcd1 	bl	800bc48 <scalbn>
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	ec53 2b10 	vmov	r2, r3, d0
 800b2ae:	f7f5 f8e1 	bl	8000474 <__aeabi_dsub>
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	460f      	mov	r7, r1
 800b2b6:	e034      	b.n	800b322 <__kernel_rem_pio2+0x272>
 800b2b8:	4b44      	ldr	r3, [pc, #272]	@ (800b3cc <__kernel_rem_pio2+0x31c>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2c0:	f7f4 ffaa 	bl	8000218 <__aeabi_dmul>
 800b2c4:	f7f5 fb16 	bl	80008f4 <__aeabi_d2iz>
 800b2c8:	f7f5 fa22 	bl	8000710 <__aeabi_i2d>
 800b2cc:	4b40      	ldr	r3, [pc, #256]	@ (800b3d0 <__kernel_rem_pio2+0x320>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	460f      	mov	r7, r1
 800b2d4:	f7f4 ffa0 	bl	8000218 <__aeabi_dmul>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2e0:	f7f5 f8c8 	bl	8000474 <__aeabi_dsub>
 800b2e4:	f7f5 fb06 	bl	80008f4 <__aeabi_d2iz>
 800b2e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2ec:	f849 0b04 	str.w	r0, [r9], #4
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f7f5 f8c0 	bl	8000478 <__adddf3>
 800b2f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b300:	e75d      	b.n	800b1be <__kernel_rem_pio2+0x10e>
 800b302:	d107      	bne.n	800b314 <__kernel_rem_pio2+0x264>
 800b304:	f108 33ff 	add.w	r3, r8, #4294967295
 800b308:	aa0c      	add	r2, sp, #48	@ 0x30
 800b30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b30e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b312:	e79e      	b.n	800b252 <__kernel_rem_pio2+0x1a2>
 800b314:	4b2f      	ldr	r3, [pc, #188]	@ (800b3d4 <__kernel_rem_pio2+0x324>)
 800b316:	2200      	movs	r2, #0
 800b318:	f7f5 fad8 	bl	80008cc <__aeabi_dcmpge>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d143      	bne.n	800b3a8 <__kernel_rem_pio2+0x2f8>
 800b320:	4681      	mov	r9, r0
 800b322:	2200      	movs	r2, #0
 800b324:	2300      	movs	r3, #0
 800b326:	4630      	mov	r0, r6
 800b328:	4639      	mov	r1, r7
 800b32a:	f7f5 fab1 	bl	8000890 <__aeabi_dcmpeq>
 800b32e:	2800      	cmp	r0, #0
 800b330:	f000 80bf 	beq.w	800b4b2 <__kernel_rem_pio2+0x402>
 800b334:	f108 33ff 	add.w	r3, r8, #4294967295
 800b338:	2200      	movs	r2, #0
 800b33a:	9900      	ldr	r1, [sp, #0]
 800b33c:	428b      	cmp	r3, r1
 800b33e:	da6e      	bge.n	800b41e <__kernel_rem_pio2+0x36e>
 800b340:	2a00      	cmp	r2, #0
 800b342:	f000 8089 	beq.w	800b458 <__kernel_rem_pio2+0x3a8>
 800b346:	f108 38ff 	add.w	r8, r8, #4294967295
 800b34a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b34c:	f1ab 0b18 	sub.w	fp, fp, #24
 800b350:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d0f6      	beq.n	800b346 <__kernel_rem_pio2+0x296>
 800b358:	4658      	mov	r0, fp
 800b35a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b3b8 <__kernel_rem_pio2+0x308>
 800b35e:	f000 fc73 	bl	800bc48 <scalbn>
 800b362:	f108 0301 	add.w	r3, r8, #1
 800b366:	00da      	lsls	r2, r3, #3
 800b368:	9205      	str	r2, [sp, #20]
 800b36a:	ec55 4b10 	vmov	r4, r5, d0
 800b36e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b370:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b3cc <__kernel_rem_pio2+0x31c>
 800b374:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b378:	4646      	mov	r6, r8
 800b37a:	f04f 0a00 	mov.w	sl, #0
 800b37e:	2e00      	cmp	r6, #0
 800b380:	f280 80cf 	bge.w	800b522 <__kernel_rem_pio2+0x472>
 800b384:	4644      	mov	r4, r8
 800b386:	2c00      	cmp	r4, #0
 800b388:	f2c0 80fd 	blt.w	800b586 <__kernel_rem_pio2+0x4d6>
 800b38c:	4b12      	ldr	r3, [pc, #72]	@ (800b3d8 <__kernel_rem_pio2+0x328>)
 800b38e:	461f      	mov	r7, r3
 800b390:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b396:	9306      	str	r3, [sp, #24]
 800b398:	f04f 0a00 	mov.w	sl, #0
 800b39c:	f04f 0b00 	mov.w	fp, #0
 800b3a0:	2600      	movs	r6, #0
 800b3a2:	eba8 0504 	sub.w	r5, r8, r4
 800b3a6:	e0e2      	b.n	800b56e <__kernel_rem_pio2+0x4be>
 800b3a8:	f04f 0902 	mov.w	r9, #2
 800b3ac:	e754      	b.n	800b258 <__kernel_rem_pio2+0x1a8>
 800b3ae:	bf00      	nop
	...
 800b3bc:	3ff00000 	.word	0x3ff00000
 800b3c0:	0800c5a0 	.word	0x0800c5a0
 800b3c4:	40200000 	.word	0x40200000
 800b3c8:	3ff00000 	.word	0x3ff00000
 800b3cc:	3e700000 	.word	0x3e700000
 800b3d0:	41700000 	.word	0x41700000
 800b3d4:	3fe00000 	.word	0x3fe00000
 800b3d8:	0800c560 	.word	0x0800c560
 800b3dc:	f854 3b04 	ldr.w	r3, [r4], #4
 800b3e0:	b945      	cbnz	r5, 800b3f4 <__kernel_rem_pio2+0x344>
 800b3e2:	b123      	cbz	r3, 800b3ee <__kernel_rem_pio2+0x33e>
 800b3e4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b3e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	3201      	adds	r2, #1
 800b3f0:	461d      	mov	r5, r3
 800b3f2:	e738      	b.n	800b266 <__kernel_rem_pio2+0x1b6>
 800b3f4:	1acb      	subs	r3, r1, r3
 800b3f6:	e7f7      	b.n	800b3e8 <__kernel_rem_pio2+0x338>
 800b3f8:	f108 32ff 	add.w	r2, r8, #4294967295
 800b3fc:	ab0c      	add	r3, sp, #48	@ 0x30
 800b3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b402:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b406:	a90c      	add	r1, sp, #48	@ 0x30
 800b408:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b40c:	e739      	b.n	800b282 <__kernel_rem_pio2+0x1d2>
 800b40e:	f108 32ff 	add.w	r2, r8, #4294967295
 800b412:	ab0c      	add	r3, sp, #48	@ 0x30
 800b414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b418:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b41c:	e7f3      	b.n	800b406 <__kernel_rem_pio2+0x356>
 800b41e:	a90c      	add	r1, sp, #48	@ 0x30
 800b420:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b424:	3b01      	subs	r3, #1
 800b426:	430a      	orrs	r2, r1
 800b428:	e787      	b.n	800b33a <__kernel_rem_pio2+0x28a>
 800b42a:	3401      	adds	r4, #1
 800b42c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b430:	2a00      	cmp	r2, #0
 800b432:	d0fa      	beq.n	800b42a <__kernel_rem_pio2+0x37a>
 800b434:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b436:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b43a:	eb0d 0503 	add.w	r5, sp, r3
 800b43e:	9b06      	ldr	r3, [sp, #24]
 800b440:	aa20      	add	r2, sp, #128	@ 0x80
 800b442:	4443      	add	r3, r8
 800b444:	f108 0701 	add.w	r7, r8, #1
 800b448:	3d98      	subs	r5, #152	@ 0x98
 800b44a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b44e:	4444      	add	r4, r8
 800b450:	42bc      	cmp	r4, r7
 800b452:	da04      	bge.n	800b45e <__kernel_rem_pio2+0x3ae>
 800b454:	46a0      	mov	r8, r4
 800b456:	e6a2      	b.n	800b19e <__kernel_rem_pio2+0xee>
 800b458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b45a:	2401      	movs	r4, #1
 800b45c:	e7e6      	b.n	800b42c <__kernel_rem_pio2+0x37c>
 800b45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b460:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b464:	f7f5 f954 	bl	8000710 <__aeabi_i2d>
 800b468:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b730 <__kernel_rem_pio2+0x680>
 800b46c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b470:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b474:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b478:	46b2      	mov	sl, r6
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	9b05      	ldr	r3, [sp, #20]
 800b480:	4598      	cmp	r8, r3
 800b482:	dd05      	ble.n	800b490 <__kernel_rem_pio2+0x3e0>
 800b484:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b488:	3701      	adds	r7, #1
 800b48a:	eca5 7b02 	vstmia	r5!, {d7}
 800b48e:	e7df      	b.n	800b450 <__kernel_rem_pio2+0x3a0>
 800b490:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b494:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b498:	f7f4 febe 	bl	8000218 <__aeabi_dmul>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a4:	f7f4 ffe8 	bl	8000478 <__adddf3>
 800b4a8:	f108 0801 	add.w	r8, r8, #1
 800b4ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4b0:	e7e5      	b.n	800b47e <__kernel_rem_pio2+0x3ce>
 800b4b2:	f1cb 0000 	rsb	r0, fp, #0
 800b4b6:	ec47 6b10 	vmov	d0, r6, r7
 800b4ba:	f000 fbc5 	bl	800bc48 <scalbn>
 800b4be:	ec55 4b10 	vmov	r4, r5, d0
 800b4c2:	4b9d      	ldr	r3, [pc, #628]	@ (800b738 <__kernel_rem_pio2+0x688>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7f5 f9ff 	bl	80008cc <__aeabi_dcmpge>
 800b4ce:	b300      	cbz	r0, 800b512 <__kernel_rem_pio2+0x462>
 800b4d0:	4b9a      	ldr	r3, [pc, #616]	@ (800b73c <__kernel_rem_pio2+0x68c>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	f7f4 fe9e 	bl	8000218 <__aeabi_dmul>
 800b4dc:	f7f5 fa0a 	bl	80008f4 <__aeabi_d2iz>
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	f7f5 f915 	bl	8000710 <__aeabi_i2d>
 800b4e6:	4b94      	ldr	r3, [pc, #592]	@ (800b738 <__kernel_rem_pio2+0x688>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f7f4 fe95 	bl	8000218 <__aeabi_dmul>
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f7f4 ffbd 	bl	8000474 <__aeabi_dsub>
 800b4fa:	f7f5 f9fb 	bl	80008f4 <__aeabi_d2iz>
 800b4fe:	ab0c      	add	r3, sp, #48	@ 0x30
 800b500:	f10b 0b18 	add.w	fp, fp, #24
 800b504:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b508:	f108 0801 	add.w	r8, r8, #1
 800b50c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b510:	e722      	b.n	800b358 <__kernel_rem_pio2+0x2a8>
 800b512:	4620      	mov	r0, r4
 800b514:	4629      	mov	r1, r5
 800b516:	f7f5 f9ed 	bl	80008f4 <__aeabi_d2iz>
 800b51a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b51c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b520:	e71a      	b.n	800b358 <__kernel_rem_pio2+0x2a8>
 800b522:	ab0c      	add	r3, sp, #48	@ 0x30
 800b524:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b528:	f7f5 f8f2 	bl	8000710 <__aeabi_i2d>
 800b52c:	4622      	mov	r2, r4
 800b52e:	462b      	mov	r3, r5
 800b530:	f7f4 fe72 	bl	8000218 <__aeabi_dmul>
 800b534:	4652      	mov	r2, sl
 800b536:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b53a:	465b      	mov	r3, fp
 800b53c:	4620      	mov	r0, r4
 800b53e:	4629      	mov	r1, r5
 800b540:	f7f4 fe6a 	bl	8000218 <__aeabi_dmul>
 800b544:	3e01      	subs	r6, #1
 800b546:	4604      	mov	r4, r0
 800b548:	460d      	mov	r5, r1
 800b54a:	e718      	b.n	800b37e <__kernel_rem_pio2+0x2ce>
 800b54c:	9906      	ldr	r1, [sp, #24]
 800b54e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b552:	9106      	str	r1, [sp, #24]
 800b554:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b558:	f7f4 fe5e 	bl	8000218 <__aeabi_dmul>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4650      	mov	r0, sl
 800b562:	4659      	mov	r1, fp
 800b564:	f7f4 ff88 	bl	8000478 <__adddf3>
 800b568:	3601      	adds	r6, #1
 800b56a:	4682      	mov	sl, r0
 800b56c:	468b      	mov	fp, r1
 800b56e:	9b00      	ldr	r3, [sp, #0]
 800b570:	429e      	cmp	r6, r3
 800b572:	dc01      	bgt.n	800b578 <__kernel_rem_pio2+0x4c8>
 800b574:	42b5      	cmp	r5, r6
 800b576:	dae9      	bge.n	800b54c <__kernel_rem_pio2+0x49c>
 800b578:	ab48      	add	r3, sp, #288	@ 0x120
 800b57a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b57e:	e9c5 ab00 	strd	sl, fp, [r5]
 800b582:	3c01      	subs	r4, #1
 800b584:	e6ff      	b.n	800b386 <__kernel_rem_pio2+0x2d6>
 800b586:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b588:	2b02      	cmp	r3, #2
 800b58a:	dc0b      	bgt.n	800b5a4 <__kernel_rem_pio2+0x4f4>
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dc39      	bgt.n	800b604 <__kernel_rem_pio2+0x554>
 800b590:	d05d      	beq.n	800b64e <__kernel_rem_pio2+0x59e>
 800b592:	9b02      	ldr	r3, [sp, #8]
 800b594:	f003 0007 	and.w	r0, r3, #7
 800b598:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b59c:	ecbd 8b02 	vpop	{d8}
 800b5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d1f3      	bne.n	800b592 <__kernel_rem_pio2+0x4e2>
 800b5aa:	9b05      	ldr	r3, [sp, #20]
 800b5ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b5b0:	eb0d 0403 	add.w	r4, sp, r3
 800b5b4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b5b8:	4625      	mov	r5, r4
 800b5ba:	46c2      	mov	sl, r8
 800b5bc:	f1ba 0f00 	cmp.w	sl, #0
 800b5c0:	f1a5 0508 	sub.w	r5, r5, #8
 800b5c4:	dc6b      	bgt.n	800b69e <__kernel_rem_pio2+0x5ee>
 800b5c6:	4645      	mov	r5, r8
 800b5c8:	2d01      	cmp	r5, #1
 800b5ca:	f1a4 0408 	sub.w	r4, r4, #8
 800b5ce:	f300 8087 	bgt.w	800b6e0 <__kernel_rem_pio2+0x630>
 800b5d2:	9c05      	ldr	r4, [sp, #20]
 800b5d4:	ab48      	add	r3, sp, #288	@ 0x120
 800b5d6:	441c      	add	r4, r3
 800b5d8:	2000      	movs	r0, #0
 800b5da:	2100      	movs	r1, #0
 800b5dc:	f1b8 0f01 	cmp.w	r8, #1
 800b5e0:	f300 809c 	bgt.w	800b71c <__kernel_rem_pio2+0x66c>
 800b5e4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b5e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b5ec:	f1b9 0f00 	cmp.w	r9, #0
 800b5f0:	f040 80a6 	bne.w	800b740 <__kernel_rem_pio2+0x690>
 800b5f4:	9b04      	ldr	r3, [sp, #16]
 800b5f6:	e9c3 7800 	strd	r7, r8, [r3]
 800b5fa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b5fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b602:	e7c6      	b.n	800b592 <__kernel_rem_pio2+0x4e2>
 800b604:	9d05      	ldr	r5, [sp, #20]
 800b606:	ab48      	add	r3, sp, #288	@ 0x120
 800b608:	441d      	add	r5, r3
 800b60a:	4644      	mov	r4, r8
 800b60c:	2000      	movs	r0, #0
 800b60e:	2100      	movs	r1, #0
 800b610:	2c00      	cmp	r4, #0
 800b612:	da35      	bge.n	800b680 <__kernel_rem_pio2+0x5d0>
 800b614:	f1b9 0f00 	cmp.w	r9, #0
 800b618:	d038      	beq.n	800b68c <__kernel_rem_pio2+0x5dc>
 800b61a:	4602      	mov	r2, r0
 800b61c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b620:	9c04      	ldr	r4, [sp, #16]
 800b622:	e9c4 2300 	strd	r2, r3, [r4]
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b62e:	f7f4 ff21 	bl	8000474 <__aeabi_dsub>
 800b632:	ad4a      	add	r5, sp, #296	@ 0x128
 800b634:	2401      	movs	r4, #1
 800b636:	45a0      	cmp	r8, r4
 800b638:	da2b      	bge.n	800b692 <__kernel_rem_pio2+0x5e2>
 800b63a:	f1b9 0f00 	cmp.w	r9, #0
 800b63e:	d002      	beq.n	800b646 <__kernel_rem_pio2+0x596>
 800b640:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b644:	4619      	mov	r1, r3
 800b646:	9b04      	ldr	r3, [sp, #16]
 800b648:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b64c:	e7a1      	b.n	800b592 <__kernel_rem_pio2+0x4e2>
 800b64e:	9c05      	ldr	r4, [sp, #20]
 800b650:	ab48      	add	r3, sp, #288	@ 0x120
 800b652:	441c      	add	r4, r3
 800b654:	2000      	movs	r0, #0
 800b656:	2100      	movs	r1, #0
 800b658:	f1b8 0f00 	cmp.w	r8, #0
 800b65c:	da09      	bge.n	800b672 <__kernel_rem_pio2+0x5c2>
 800b65e:	f1b9 0f00 	cmp.w	r9, #0
 800b662:	d002      	beq.n	800b66a <__kernel_rem_pio2+0x5ba>
 800b664:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b668:	4619      	mov	r1, r3
 800b66a:	9b04      	ldr	r3, [sp, #16]
 800b66c:	e9c3 0100 	strd	r0, r1, [r3]
 800b670:	e78f      	b.n	800b592 <__kernel_rem_pio2+0x4e2>
 800b672:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b676:	f7f4 feff 	bl	8000478 <__adddf3>
 800b67a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b67e:	e7eb      	b.n	800b658 <__kernel_rem_pio2+0x5a8>
 800b680:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b684:	f7f4 fef8 	bl	8000478 <__adddf3>
 800b688:	3c01      	subs	r4, #1
 800b68a:	e7c1      	b.n	800b610 <__kernel_rem_pio2+0x560>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	e7c6      	b.n	800b620 <__kernel_rem_pio2+0x570>
 800b692:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b696:	f7f4 feef 	bl	8000478 <__adddf3>
 800b69a:	3401      	adds	r4, #1
 800b69c:	e7cb      	b.n	800b636 <__kernel_rem_pio2+0x586>
 800b69e:	ed95 7b00 	vldr	d7, [r5]
 800b6a2:	ed8d 7b00 	vstr	d7, [sp]
 800b6a6:	ed95 7b02 	vldr	d7, [r5, #8]
 800b6aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6ae:	ec53 2b17 	vmov	r2, r3, d7
 800b6b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6b6:	f7f4 fedf 	bl	8000478 <__adddf3>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4606      	mov	r6, r0
 800b6c0:	460f      	mov	r7, r1
 800b6c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6c6:	f7f4 fed5 	bl	8000474 <__aeabi_dsub>
 800b6ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6ce:	f7f4 fed3 	bl	8000478 <__adddf3>
 800b6d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b6da:	e9c5 6700 	strd	r6, r7, [r5]
 800b6de:	e76d      	b.n	800b5bc <__kernel_rem_pio2+0x50c>
 800b6e0:	ed94 7b00 	vldr	d7, [r4]
 800b6e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b6e8:	ec51 0b17 	vmov	r0, r1, d7
 800b6ec:	4652      	mov	r2, sl
 800b6ee:	465b      	mov	r3, fp
 800b6f0:	ed8d 7b00 	vstr	d7, [sp]
 800b6f4:	f7f4 fec0 	bl	8000478 <__adddf3>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b704:	f7f4 feb6 	bl	8000474 <__aeabi_dsub>
 800b708:	4652      	mov	r2, sl
 800b70a:	465b      	mov	r3, fp
 800b70c:	f7f4 feb4 	bl	8000478 <__adddf3>
 800b710:	3d01      	subs	r5, #1
 800b712:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b716:	e9c4 6700 	strd	r6, r7, [r4]
 800b71a:	e755      	b.n	800b5c8 <__kernel_rem_pio2+0x518>
 800b71c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b720:	f7f4 feaa 	bl	8000478 <__adddf3>
 800b724:	f108 38ff 	add.w	r8, r8, #4294967295
 800b728:	e758      	b.n	800b5dc <__kernel_rem_pio2+0x52c>
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w
	...
 800b738:	41700000 	.word	0x41700000
 800b73c:	3e700000 	.word	0x3e700000
 800b740:	9b04      	ldr	r3, [sp, #16]
 800b742:	9a04      	ldr	r2, [sp, #16]
 800b744:	601f      	str	r7, [r3, #0]
 800b746:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b74a:	605c      	str	r4, [r3, #4]
 800b74c:	609d      	str	r5, [r3, #8]
 800b74e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b752:	60d3      	str	r3, [r2, #12]
 800b754:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b758:	6110      	str	r0, [r2, #16]
 800b75a:	6153      	str	r3, [r2, #20]
 800b75c:	e719      	b.n	800b592 <__kernel_rem_pio2+0x4e2>
 800b75e:	bf00      	nop

0800b760 <__kernel_rem_pio2f>:
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	ed2d 8b04 	vpush	{d8-d9}
 800b768:	b0d9      	sub	sp, #356	@ 0x164
 800b76a:	4690      	mov	r8, r2
 800b76c:	9001      	str	r0, [sp, #4]
 800b76e:	4ab9      	ldr	r2, [pc, #740]	@ (800ba54 <__kernel_rem_pio2f+0x2f4>)
 800b770:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b772:	f118 0f04 	cmn.w	r8, #4
 800b776:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b77a:	460f      	mov	r7, r1
 800b77c:	f103 3bff 	add.w	fp, r3, #4294967295
 800b780:	db27      	blt.n	800b7d2 <__kernel_rem_pio2f+0x72>
 800b782:	f1b8 0203 	subs.w	r2, r8, #3
 800b786:	bf48      	it	mi
 800b788:	f108 0204 	addmi.w	r2, r8, #4
 800b78c:	10d2      	asrs	r2, r2, #3
 800b78e:	1c55      	adds	r5, r2, #1
 800b790:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b792:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ba64 <__kernel_rem_pio2f+0x304>
 800b796:	00e8      	lsls	r0, r5, #3
 800b798:	eba2 060b 	sub.w	r6, r2, fp
 800b79c:	9002      	str	r0, [sp, #8]
 800b79e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b7a2:	eb0a 0c0b 	add.w	ip, sl, fp
 800b7a6:	ac1c      	add	r4, sp, #112	@ 0x70
 800b7a8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	4560      	cmp	r0, ip
 800b7b0:	dd11      	ble.n	800b7d6 <__kernel_rem_pio2f+0x76>
 800b7b2:	a91c      	add	r1, sp, #112	@ 0x70
 800b7b4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b7b8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b7bc:	f04f 0c00 	mov.w	ip, #0
 800b7c0:	45d4      	cmp	ip, sl
 800b7c2:	dc27      	bgt.n	800b814 <__kernel_rem_pio2f+0xb4>
 800b7c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b7c8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800ba64 <__kernel_rem_pio2f+0x304>
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	2400      	movs	r4, #0
 800b7d0:	e016      	b.n	800b800 <__kernel_rem_pio2f+0xa0>
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	e7db      	b.n	800b78e <__kernel_rem_pio2f+0x2e>
 800b7d6:	42c6      	cmn	r6, r0
 800b7d8:	bf5d      	ittte	pl
 800b7da:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b7de:	ee07 1a90 	vmovpl	s15, r1
 800b7e2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b7e6:	eef0 7a47 	vmovmi.f32	s15, s14
 800b7ea:	ece4 7a01 	vstmia	r4!, {s15}
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	e7dd      	b.n	800b7ae <__kernel_rem_pio2f+0x4e>
 800b7f2:	ecfe 6a01 	vldmia	lr!, {s13}
 800b7f6:	ed96 7a00 	vldr	s14, [r6]
 800b7fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b7fe:	3401      	adds	r4, #1
 800b800:	455c      	cmp	r4, fp
 800b802:	f1a6 0604 	sub.w	r6, r6, #4
 800b806:	ddf4      	ble.n	800b7f2 <__kernel_rem_pio2f+0x92>
 800b808:	ece9 7a01 	vstmia	r9!, {s15}
 800b80c:	f10c 0c01 	add.w	ip, ip, #1
 800b810:	3004      	adds	r0, #4
 800b812:	e7d5      	b.n	800b7c0 <__kernel_rem_pio2f+0x60>
 800b814:	a908      	add	r1, sp, #32
 800b816:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b81a:	9104      	str	r1, [sp, #16]
 800b81c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b81e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800ba60 <__kernel_rem_pio2f+0x300>
 800b822:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800ba5c <__kernel_rem_pio2f+0x2fc>
 800b826:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b82a:	9203      	str	r2, [sp, #12]
 800b82c:	4654      	mov	r4, sl
 800b82e:	00a2      	lsls	r2, r4, #2
 800b830:	9205      	str	r2, [sp, #20]
 800b832:	aa58      	add	r2, sp, #352	@ 0x160
 800b834:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b838:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b83c:	a944      	add	r1, sp, #272	@ 0x110
 800b83e:	aa08      	add	r2, sp, #32
 800b840:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b844:	4694      	mov	ip, r2
 800b846:	4626      	mov	r6, r4
 800b848:	2e00      	cmp	r6, #0
 800b84a:	f1a0 0004 	sub.w	r0, r0, #4
 800b84e:	dc4c      	bgt.n	800b8ea <__kernel_rem_pio2f+0x18a>
 800b850:	4628      	mov	r0, r5
 800b852:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b856:	f000 fa75 	bl	800bd44 <scalbnf>
 800b85a:	eeb0 8a40 	vmov.f32	s16, s0
 800b85e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b862:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b866:	f000 fb4f 	bl	800bf08 <floorf>
 800b86a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b86e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b872:	2d00      	cmp	r5, #0
 800b874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b878:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b87c:	ee17 9a90 	vmov	r9, s15
 800b880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b884:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b888:	dd41      	ble.n	800b90e <__kernel_rem_pio2f+0x1ae>
 800b88a:	f104 3cff 	add.w	ip, r4, #4294967295
 800b88e:	a908      	add	r1, sp, #32
 800b890:	f1c5 0e08 	rsb	lr, r5, #8
 800b894:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b898:	fa46 f00e 	asr.w	r0, r6, lr
 800b89c:	4481      	add	r9, r0
 800b89e:	fa00 f00e 	lsl.w	r0, r0, lr
 800b8a2:	1a36      	subs	r6, r6, r0
 800b8a4:	f1c5 0007 	rsb	r0, r5, #7
 800b8a8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b8ac:	4106      	asrs	r6, r0
 800b8ae:	2e00      	cmp	r6, #0
 800b8b0:	dd3c      	ble.n	800b92c <__kernel_rem_pio2f+0x1cc>
 800b8b2:	f04f 0e00 	mov.w	lr, #0
 800b8b6:	f109 0901 	add.w	r9, r9, #1
 800b8ba:	4670      	mov	r0, lr
 800b8bc:	4574      	cmp	r4, lr
 800b8be:	dc68      	bgt.n	800b992 <__kernel_rem_pio2f+0x232>
 800b8c0:	2d00      	cmp	r5, #0
 800b8c2:	dd03      	ble.n	800b8cc <__kernel_rem_pio2f+0x16c>
 800b8c4:	2d01      	cmp	r5, #1
 800b8c6:	d074      	beq.n	800b9b2 <__kernel_rem_pio2f+0x252>
 800b8c8:	2d02      	cmp	r5, #2
 800b8ca:	d07d      	beq.n	800b9c8 <__kernel_rem_pio2f+0x268>
 800b8cc:	2e02      	cmp	r6, #2
 800b8ce:	d12d      	bne.n	800b92c <__kernel_rem_pio2f+0x1cc>
 800b8d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b8d4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b8d8:	b340      	cbz	r0, 800b92c <__kernel_rem_pio2f+0x1cc>
 800b8da:	4628      	mov	r0, r5
 800b8dc:	9306      	str	r3, [sp, #24]
 800b8de:	f000 fa31 	bl	800bd44 <scalbnf>
 800b8e2:	9b06      	ldr	r3, [sp, #24]
 800b8e4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b8e8:	e020      	b.n	800b92c <__kernel_rem_pio2f+0x1cc>
 800b8ea:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b8ee:	3e01      	subs	r6, #1
 800b8f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8f8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b8fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b900:	ecac 0a01 	vstmia	ip!, {s0}
 800b904:	ed90 0a00 	vldr	s0, [r0]
 800b908:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b90c:	e79c      	b.n	800b848 <__kernel_rem_pio2f+0xe8>
 800b90e:	d105      	bne.n	800b91c <__kernel_rem_pio2f+0x1bc>
 800b910:	1e60      	subs	r0, r4, #1
 800b912:	a908      	add	r1, sp, #32
 800b914:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b918:	11f6      	asrs	r6, r6, #7
 800b91a:	e7c8      	b.n	800b8ae <__kernel_rem_pio2f+0x14e>
 800b91c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b920:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b928:	da31      	bge.n	800b98e <__kernel_rem_pio2f+0x22e>
 800b92a:	2600      	movs	r6, #0
 800b92c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b934:	f040 8098 	bne.w	800ba68 <__kernel_rem_pio2f+0x308>
 800b938:	1e60      	subs	r0, r4, #1
 800b93a:	2200      	movs	r2, #0
 800b93c:	4550      	cmp	r0, sl
 800b93e:	da4b      	bge.n	800b9d8 <__kernel_rem_pio2f+0x278>
 800b940:	2a00      	cmp	r2, #0
 800b942:	d065      	beq.n	800ba10 <__kernel_rem_pio2f+0x2b0>
 800b944:	3c01      	subs	r4, #1
 800b946:	ab08      	add	r3, sp, #32
 800b948:	3d08      	subs	r5, #8
 800b94a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0f8      	beq.n	800b944 <__kernel_rem_pio2f+0x1e4>
 800b952:	4628      	mov	r0, r5
 800b954:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b958:	f000 f9f4 	bl	800bd44 <scalbnf>
 800b95c:	1c63      	adds	r3, r4, #1
 800b95e:	aa44      	add	r2, sp, #272	@ 0x110
 800b960:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ba60 <__kernel_rem_pio2f+0x300>
 800b964:	0099      	lsls	r1, r3, #2
 800b966:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b96a:	4623      	mov	r3, r4
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f280 80a9 	bge.w	800bac4 <__kernel_rem_pio2f+0x364>
 800b972:	4623      	mov	r3, r4
 800b974:	2b00      	cmp	r3, #0
 800b976:	f2c0 80c7 	blt.w	800bb08 <__kernel_rem_pio2f+0x3a8>
 800b97a:	aa44      	add	r2, sp, #272	@ 0x110
 800b97c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b980:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ba58 <__kernel_rem_pio2f+0x2f8>
 800b984:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ba64 <__kernel_rem_pio2f+0x304>
 800b988:	2000      	movs	r0, #0
 800b98a:	1ae2      	subs	r2, r4, r3
 800b98c:	e0b1      	b.n	800baf2 <__kernel_rem_pio2f+0x392>
 800b98e:	2602      	movs	r6, #2
 800b990:	e78f      	b.n	800b8b2 <__kernel_rem_pio2f+0x152>
 800b992:	f852 1b04 	ldr.w	r1, [r2], #4
 800b996:	b948      	cbnz	r0, 800b9ac <__kernel_rem_pio2f+0x24c>
 800b998:	b121      	cbz	r1, 800b9a4 <__kernel_rem_pio2f+0x244>
 800b99a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b99e:	f842 1c04 	str.w	r1, [r2, #-4]
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	f10e 0e01 	add.w	lr, lr, #1
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	e787      	b.n	800b8bc <__kernel_rem_pio2f+0x15c>
 800b9ac:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b9b0:	e7f5      	b.n	800b99e <__kernel_rem_pio2f+0x23e>
 800b9b2:	f104 3cff 	add.w	ip, r4, #4294967295
 800b9b6:	aa08      	add	r2, sp, #32
 800b9b8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b9bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b9c0:	a908      	add	r1, sp, #32
 800b9c2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b9c6:	e781      	b.n	800b8cc <__kernel_rem_pio2f+0x16c>
 800b9c8:	f104 3cff 	add.w	ip, r4, #4294967295
 800b9cc:	aa08      	add	r2, sp, #32
 800b9ce:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b9d2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b9d6:	e7f3      	b.n	800b9c0 <__kernel_rem_pio2f+0x260>
 800b9d8:	a908      	add	r1, sp, #32
 800b9da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b9de:	3801      	subs	r0, #1
 800b9e0:	430a      	orrs	r2, r1
 800b9e2:	e7ab      	b.n	800b93c <__kernel_rem_pio2f+0x1dc>
 800b9e4:	3201      	adds	r2, #1
 800b9e6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b9ea:	2e00      	cmp	r6, #0
 800b9ec:	d0fa      	beq.n	800b9e4 <__kernel_rem_pio2f+0x284>
 800b9ee:	9905      	ldr	r1, [sp, #20]
 800b9f0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b9f4:	eb0d 0001 	add.w	r0, sp, r1
 800b9f8:	18e6      	adds	r6, r4, r3
 800b9fa:	a91c      	add	r1, sp, #112	@ 0x70
 800b9fc:	f104 0c01 	add.w	ip, r4, #1
 800ba00:	384c      	subs	r0, #76	@ 0x4c
 800ba02:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ba06:	4422      	add	r2, r4
 800ba08:	4562      	cmp	r2, ip
 800ba0a:	da04      	bge.n	800ba16 <__kernel_rem_pio2f+0x2b6>
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	e70e      	b.n	800b82e <__kernel_rem_pio2f+0xce>
 800ba10:	9804      	ldr	r0, [sp, #16]
 800ba12:	2201      	movs	r2, #1
 800ba14:	e7e7      	b.n	800b9e6 <__kernel_rem_pio2f+0x286>
 800ba16:	9903      	ldr	r1, [sp, #12]
 800ba18:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ba1c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ba20:	9105      	str	r1, [sp, #20]
 800ba22:	ee07 1a90 	vmov	s15, r1
 800ba26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba2a:	2400      	movs	r4, #0
 800ba2c:	ece6 7a01 	vstmia	r6!, {s15}
 800ba30:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ba64 <__kernel_rem_pio2f+0x304>
 800ba34:	46b1      	mov	r9, r6
 800ba36:	455c      	cmp	r4, fp
 800ba38:	dd04      	ble.n	800ba44 <__kernel_rem_pio2f+0x2e4>
 800ba3a:	ece0 7a01 	vstmia	r0!, {s15}
 800ba3e:	f10c 0c01 	add.w	ip, ip, #1
 800ba42:	e7e1      	b.n	800ba08 <__kernel_rem_pio2f+0x2a8>
 800ba44:	ecfe 6a01 	vldmia	lr!, {s13}
 800ba48:	ed39 7a01 	vldmdb	r9!, {s14}
 800ba4c:	3401      	adds	r4, #1
 800ba4e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba52:	e7f0      	b.n	800ba36 <__kernel_rem_pio2f+0x2d6>
 800ba54:	0800c5dc 	.word	0x0800c5dc
 800ba58:	0800c5b0 	.word	0x0800c5b0
 800ba5c:	43800000 	.word	0x43800000
 800ba60:	3b800000 	.word	0x3b800000
 800ba64:	00000000 	.word	0x00000000
 800ba68:	9b02      	ldr	r3, [sp, #8]
 800ba6a:	eeb0 0a48 	vmov.f32	s0, s16
 800ba6e:	eba3 0008 	sub.w	r0, r3, r8
 800ba72:	f000 f967 	bl	800bd44 <scalbnf>
 800ba76:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ba5c <__kernel_rem_pio2f+0x2fc>
 800ba7a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ba7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba82:	db19      	blt.n	800bab8 <__kernel_rem_pio2f+0x358>
 800ba84:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ba60 <__kernel_rem_pio2f+0x300>
 800ba88:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba8c:	aa08      	add	r2, sp, #32
 800ba8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba92:	3508      	adds	r5, #8
 800ba94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba98:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800baa0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800baa4:	ee10 3a10 	vmov	r3, s0
 800baa8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800baac:	ee17 3a90 	vmov	r3, s15
 800bab0:	3401      	adds	r4, #1
 800bab2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bab6:	e74c      	b.n	800b952 <__kernel_rem_pio2f+0x1f2>
 800bab8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800babc:	aa08      	add	r2, sp, #32
 800babe:	ee10 3a10 	vmov	r3, s0
 800bac2:	e7f6      	b.n	800bab2 <__kernel_rem_pio2f+0x352>
 800bac4:	a808      	add	r0, sp, #32
 800bac6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800baca:	9001      	str	r0, [sp, #4]
 800bacc:	ee07 0a90 	vmov	s15, r0
 800bad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bad4:	3b01      	subs	r3, #1
 800bad6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bada:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bade:	ed62 7a01 	vstmdb	r2!, {s15}
 800bae2:	e743      	b.n	800b96c <__kernel_rem_pio2f+0x20c>
 800bae4:	ecfc 6a01 	vldmia	ip!, {s13}
 800bae8:	ecb5 7a01 	vldmia	r5!, {s14}
 800baec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800baf0:	3001      	adds	r0, #1
 800baf2:	4550      	cmp	r0, sl
 800baf4:	dc01      	bgt.n	800bafa <__kernel_rem_pio2f+0x39a>
 800baf6:	4282      	cmp	r2, r0
 800baf8:	daf4      	bge.n	800bae4 <__kernel_rem_pio2f+0x384>
 800bafa:	a858      	add	r0, sp, #352	@ 0x160
 800bafc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bb00:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800bb04:	3b01      	subs	r3, #1
 800bb06:	e735      	b.n	800b974 <__kernel_rem_pio2f+0x214>
 800bb08:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	dc09      	bgt.n	800bb22 <__kernel_rem_pio2f+0x3c2>
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	dc2b      	bgt.n	800bb6a <__kernel_rem_pio2f+0x40a>
 800bb12:	d044      	beq.n	800bb9e <__kernel_rem_pio2f+0x43e>
 800bb14:	f009 0007 	and.w	r0, r9, #7
 800bb18:	b059      	add	sp, #356	@ 0x164
 800bb1a:	ecbd 8b04 	vpop	{d8-d9}
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb22:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d1f5      	bne.n	800bb14 <__kernel_rem_pio2f+0x3b4>
 800bb28:	aa30      	add	r2, sp, #192	@ 0xc0
 800bb2a:	1f0b      	subs	r3, r1, #4
 800bb2c:	4413      	add	r3, r2
 800bb2e:	461a      	mov	r2, r3
 800bb30:	4620      	mov	r0, r4
 800bb32:	2800      	cmp	r0, #0
 800bb34:	f1a2 0204 	sub.w	r2, r2, #4
 800bb38:	dc52      	bgt.n	800bbe0 <__kernel_rem_pio2f+0x480>
 800bb3a:	4622      	mov	r2, r4
 800bb3c:	2a01      	cmp	r2, #1
 800bb3e:	f1a3 0304 	sub.w	r3, r3, #4
 800bb42:	dc5d      	bgt.n	800bc00 <__kernel_rem_pio2f+0x4a0>
 800bb44:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb46:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800ba64 <__kernel_rem_pio2f+0x304>
 800bb4a:	440b      	add	r3, r1
 800bb4c:	2c01      	cmp	r4, #1
 800bb4e:	dc67      	bgt.n	800bc20 <__kernel_rem_pio2f+0x4c0>
 800bb50:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bb54:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bb58:	2e00      	cmp	r6, #0
 800bb5a:	d167      	bne.n	800bc2c <__kernel_rem_pio2f+0x4cc>
 800bb5c:	edc7 6a00 	vstr	s13, [r7]
 800bb60:	ed87 7a01 	vstr	s14, [r7, #4]
 800bb64:	edc7 7a02 	vstr	s15, [r7, #8]
 800bb68:	e7d4      	b.n	800bb14 <__kernel_rem_pio2f+0x3b4>
 800bb6a:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb6c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800ba64 <__kernel_rem_pio2f+0x304>
 800bb70:	440b      	add	r3, r1
 800bb72:	4622      	mov	r2, r4
 800bb74:	2a00      	cmp	r2, #0
 800bb76:	da24      	bge.n	800bbc2 <__kernel_rem_pio2f+0x462>
 800bb78:	b34e      	cbz	r6, 800bbce <__kernel_rem_pio2f+0x46e>
 800bb7a:	eef1 7a47 	vneg.f32	s15, s14
 800bb7e:	edc7 7a00 	vstr	s15, [r7]
 800bb82:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bb86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb8a:	aa31      	add	r2, sp, #196	@ 0xc4
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	429c      	cmp	r4, r3
 800bb90:	da20      	bge.n	800bbd4 <__kernel_rem_pio2f+0x474>
 800bb92:	b10e      	cbz	r6, 800bb98 <__kernel_rem_pio2f+0x438>
 800bb94:	eef1 7a67 	vneg.f32	s15, s15
 800bb98:	edc7 7a01 	vstr	s15, [r7, #4]
 800bb9c:	e7ba      	b.n	800bb14 <__kernel_rem_pio2f+0x3b4>
 800bb9e:	ab30      	add	r3, sp, #192	@ 0xc0
 800bba0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800ba64 <__kernel_rem_pio2f+0x304>
 800bba4:	440b      	add	r3, r1
 800bba6:	2c00      	cmp	r4, #0
 800bba8:	da05      	bge.n	800bbb6 <__kernel_rem_pio2f+0x456>
 800bbaa:	b10e      	cbz	r6, 800bbb0 <__kernel_rem_pio2f+0x450>
 800bbac:	eef1 7a67 	vneg.f32	s15, s15
 800bbb0:	edc7 7a00 	vstr	s15, [r7]
 800bbb4:	e7ae      	b.n	800bb14 <__kernel_rem_pio2f+0x3b4>
 800bbb6:	ed33 7a01 	vldmdb	r3!, {s14}
 800bbba:	3c01      	subs	r4, #1
 800bbbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbc0:	e7f1      	b.n	800bba6 <__kernel_rem_pio2f+0x446>
 800bbc2:	ed73 7a01 	vldmdb	r3!, {s15}
 800bbc6:	3a01      	subs	r2, #1
 800bbc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bbcc:	e7d2      	b.n	800bb74 <__kernel_rem_pio2f+0x414>
 800bbce:	eef0 7a47 	vmov.f32	s15, s14
 800bbd2:	e7d4      	b.n	800bb7e <__kernel_rem_pio2f+0x41e>
 800bbd4:	ecb2 7a01 	vldmia	r2!, {s14}
 800bbd8:	3301      	adds	r3, #1
 800bbda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbde:	e7d6      	b.n	800bb8e <__kernel_rem_pio2f+0x42e>
 800bbe0:	edd2 7a00 	vldr	s15, [r2]
 800bbe4:	edd2 6a01 	vldr	s13, [r2, #4]
 800bbe8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bbec:	3801      	subs	r0, #1
 800bbee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbf2:	ed82 7a00 	vstr	s14, [r2]
 800bbf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbfa:	edc2 7a01 	vstr	s15, [r2, #4]
 800bbfe:	e798      	b.n	800bb32 <__kernel_rem_pio2f+0x3d2>
 800bc00:	edd3 7a00 	vldr	s15, [r3]
 800bc04:	edd3 6a01 	vldr	s13, [r3, #4]
 800bc08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bc0c:	3a01      	subs	r2, #1
 800bc0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc12:	ed83 7a00 	vstr	s14, [r3]
 800bc16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc1a:	edc3 7a01 	vstr	s15, [r3, #4]
 800bc1e:	e78d      	b.n	800bb3c <__kernel_rem_pio2f+0x3dc>
 800bc20:	ed33 7a01 	vldmdb	r3!, {s14}
 800bc24:	3c01      	subs	r4, #1
 800bc26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc2a:	e78f      	b.n	800bb4c <__kernel_rem_pio2f+0x3ec>
 800bc2c:	eef1 6a66 	vneg.f32	s13, s13
 800bc30:	eeb1 7a47 	vneg.f32	s14, s14
 800bc34:	edc7 6a00 	vstr	s13, [r7]
 800bc38:	ed87 7a01 	vstr	s14, [r7, #4]
 800bc3c:	eef1 7a67 	vneg.f32	s15, s15
 800bc40:	e790      	b.n	800bb64 <__kernel_rem_pio2f+0x404>
 800bc42:	bf00      	nop
 800bc44:	0000      	movs	r0, r0
	...

0800bc48 <scalbn>:
 800bc48:	b570      	push	{r4, r5, r6, lr}
 800bc4a:	ec55 4b10 	vmov	r4, r5, d0
 800bc4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bc52:	4606      	mov	r6, r0
 800bc54:	462b      	mov	r3, r5
 800bc56:	b991      	cbnz	r1, 800bc7e <scalbn+0x36>
 800bc58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bc5c:	4323      	orrs	r3, r4
 800bc5e:	d03d      	beq.n	800bcdc <scalbn+0x94>
 800bc60:	4b35      	ldr	r3, [pc, #212]	@ (800bd38 <scalbn+0xf0>)
 800bc62:	4620      	mov	r0, r4
 800bc64:	4629      	mov	r1, r5
 800bc66:	2200      	movs	r2, #0
 800bc68:	f7f4 fad6 	bl	8000218 <__aeabi_dmul>
 800bc6c:	4b33      	ldr	r3, [pc, #204]	@ (800bd3c <scalbn+0xf4>)
 800bc6e:	429e      	cmp	r6, r3
 800bc70:	4604      	mov	r4, r0
 800bc72:	460d      	mov	r5, r1
 800bc74:	da0f      	bge.n	800bc96 <scalbn+0x4e>
 800bc76:	a328      	add	r3, pc, #160	@ (adr r3, 800bd18 <scalbn+0xd0>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	e01e      	b.n	800bcbc <scalbn+0x74>
 800bc7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bc82:	4291      	cmp	r1, r2
 800bc84:	d10b      	bne.n	800bc9e <scalbn+0x56>
 800bc86:	4622      	mov	r2, r4
 800bc88:	4620      	mov	r0, r4
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	f7f4 fbf4 	bl	8000478 <__adddf3>
 800bc90:	4604      	mov	r4, r0
 800bc92:	460d      	mov	r5, r1
 800bc94:	e022      	b.n	800bcdc <scalbn+0x94>
 800bc96:	460b      	mov	r3, r1
 800bc98:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bc9c:	3936      	subs	r1, #54	@ 0x36
 800bc9e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bca2:	4296      	cmp	r6, r2
 800bca4:	dd0d      	ble.n	800bcc2 <scalbn+0x7a>
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	a11d      	add	r1, pc, #116	@ (adr r1, 800bd20 <scalbn+0xd8>)
 800bcaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcae:	da02      	bge.n	800bcb6 <scalbn+0x6e>
 800bcb0:	a11d      	add	r1, pc, #116	@ (adr r1, 800bd28 <scalbn+0xe0>)
 800bcb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb6:	a31a      	add	r3, pc, #104	@ (adr r3, 800bd20 <scalbn+0xd8>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	f7f4 faac 	bl	8000218 <__aeabi_dmul>
 800bcc0:	e7e6      	b.n	800bc90 <scalbn+0x48>
 800bcc2:	1872      	adds	r2, r6, r1
 800bcc4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bcc8:	428a      	cmp	r2, r1
 800bcca:	dcec      	bgt.n	800bca6 <scalbn+0x5e>
 800bccc:	2a00      	cmp	r2, #0
 800bcce:	dd08      	ble.n	800bce2 <scalbn+0x9a>
 800bcd0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bcd4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bcd8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bcdc:	ec45 4b10 	vmov	d0, r4, r5
 800bce0:	bd70      	pop	{r4, r5, r6, pc}
 800bce2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bce6:	da08      	bge.n	800bcfa <scalbn+0xb2>
 800bce8:	2d00      	cmp	r5, #0
 800bcea:	a10b      	add	r1, pc, #44	@ (adr r1, 800bd18 <scalbn+0xd0>)
 800bcec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcf0:	dac1      	bge.n	800bc76 <scalbn+0x2e>
 800bcf2:	a10f      	add	r1, pc, #60	@ (adr r1, 800bd30 <scalbn+0xe8>)
 800bcf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcf8:	e7bd      	b.n	800bc76 <scalbn+0x2e>
 800bcfa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bcfe:	3236      	adds	r2, #54	@ 0x36
 800bd00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bd04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd08:	4620      	mov	r0, r4
 800bd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd40 <scalbn+0xf8>)
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	2200      	movs	r2, #0
 800bd10:	e7d4      	b.n	800bcbc <scalbn+0x74>
 800bd12:	bf00      	nop
 800bd14:	f3af 8000 	nop.w
 800bd18:	c2f8f359 	.word	0xc2f8f359
 800bd1c:	01a56e1f 	.word	0x01a56e1f
 800bd20:	8800759c 	.word	0x8800759c
 800bd24:	7e37e43c 	.word	0x7e37e43c
 800bd28:	8800759c 	.word	0x8800759c
 800bd2c:	fe37e43c 	.word	0xfe37e43c
 800bd30:	c2f8f359 	.word	0xc2f8f359
 800bd34:	81a56e1f 	.word	0x81a56e1f
 800bd38:	43500000 	.word	0x43500000
 800bd3c:	ffff3cb0 	.word	0xffff3cb0
 800bd40:	3c900000 	.word	0x3c900000

0800bd44 <scalbnf>:
 800bd44:	ee10 3a10 	vmov	r3, s0
 800bd48:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bd4c:	d02b      	beq.n	800bda6 <scalbnf+0x62>
 800bd4e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bd52:	d302      	bcc.n	800bd5a <scalbnf+0x16>
 800bd54:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd58:	4770      	bx	lr
 800bd5a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bd5e:	d123      	bne.n	800bda8 <scalbnf+0x64>
 800bd60:	4b24      	ldr	r3, [pc, #144]	@ (800bdf4 <scalbnf+0xb0>)
 800bd62:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bdf8 <scalbnf+0xb4>
 800bd66:	4298      	cmp	r0, r3
 800bd68:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bd6c:	db17      	blt.n	800bd9e <scalbnf+0x5a>
 800bd6e:	ee10 3a10 	vmov	r3, s0
 800bd72:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bd76:	3a19      	subs	r2, #25
 800bd78:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bd7c:	4288      	cmp	r0, r1
 800bd7e:	dd15      	ble.n	800bdac <scalbnf+0x68>
 800bd80:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bdfc <scalbnf+0xb8>
 800bd84:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800be00 <scalbnf+0xbc>
 800bd88:	ee10 3a10 	vmov	r3, s0
 800bd8c:	eeb0 7a67 	vmov.f32	s14, s15
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	bfb8      	it	lt
 800bd94:	eef0 7a66 	vmovlt.f32	s15, s13
 800bd98:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bd9c:	4770      	bx	lr
 800bd9e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800be04 <scalbnf+0xc0>
 800bda2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bda6:	4770      	bx	lr
 800bda8:	0dd2      	lsrs	r2, r2, #23
 800bdaa:	e7e5      	b.n	800bd78 <scalbnf+0x34>
 800bdac:	4410      	add	r0, r2
 800bdae:	28fe      	cmp	r0, #254	@ 0xfe
 800bdb0:	dce6      	bgt.n	800bd80 <scalbnf+0x3c>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	dd06      	ble.n	800bdc4 <scalbnf+0x80>
 800bdb6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bdba:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bdbe:	ee00 3a10 	vmov	s0, r3
 800bdc2:	4770      	bx	lr
 800bdc4:	f110 0f16 	cmn.w	r0, #22
 800bdc8:	da09      	bge.n	800bdde <scalbnf+0x9a>
 800bdca:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800be04 <scalbnf+0xc0>
 800bdce:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800be08 <scalbnf+0xc4>
 800bdd2:	ee10 3a10 	vmov	r3, s0
 800bdd6:	eeb0 7a67 	vmov.f32	s14, s15
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	e7d9      	b.n	800bd92 <scalbnf+0x4e>
 800bdde:	3019      	adds	r0, #25
 800bde0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bde4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bde8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800be0c <scalbnf+0xc8>
 800bdec:	ee07 3a90 	vmov	s15, r3
 800bdf0:	e7d7      	b.n	800bda2 <scalbnf+0x5e>
 800bdf2:	bf00      	nop
 800bdf4:	ffff3cb0 	.word	0xffff3cb0
 800bdf8:	4c000000 	.word	0x4c000000
 800bdfc:	7149f2ca 	.word	0x7149f2ca
 800be00:	f149f2ca 	.word	0xf149f2ca
 800be04:	0da24260 	.word	0x0da24260
 800be08:	8da24260 	.word	0x8da24260
 800be0c:	33000000 	.word	0x33000000

0800be10 <floor>:
 800be10:	ec51 0b10 	vmov	r0, r1, d0
 800be14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800be20:	2e13      	cmp	r6, #19
 800be22:	460c      	mov	r4, r1
 800be24:	4605      	mov	r5, r0
 800be26:	4680      	mov	r8, r0
 800be28:	dc34      	bgt.n	800be94 <floor+0x84>
 800be2a:	2e00      	cmp	r6, #0
 800be2c:	da17      	bge.n	800be5e <floor+0x4e>
 800be2e:	a332      	add	r3, pc, #200	@ (adr r3, 800bef8 <floor+0xe8>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f7f4 fb20 	bl	8000478 <__adddf3>
 800be38:	2200      	movs	r2, #0
 800be3a:	2300      	movs	r3, #0
 800be3c:	f7f4 fd50 	bl	80008e0 <__aeabi_dcmpgt>
 800be40:	b150      	cbz	r0, 800be58 <floor+0x48>
 800be42:	2c00      	cmp	r4, #0
 800be44:	da55      	bge.n	800bef2 <floor+0xe2>
 800be46:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800be4a:	432c      	orrs	r4, r5
 800be4c:	2500      	movs	r5, #0
 800be4e:	42ac      	cmp	r4, r5
 800be50:	4c2b      	ldr	r4, [pc, #172]	@ (800bf00 <floor+0xf0>)
 800be52:	bf08      	it	eq
 800be54:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800be58:	4621      	mov	r1, r4
 800be5a:	4628      	mov	r0, r5
 800be5c:	e023      	b.n	800bea6 <floor+0x96>
 800be5e:	4f29      	ldr	r7, [pc, #164]	@ (800bf04 <floor+0xf4>)
 800be60:	4137      	asrs	r7, r6
 800be62:	ea01 0307 	and.w	r3, r1, r7
 800be66:	4303      	orrs	r3, r0
 800be68:	d01d      	beq.n	800bea6 <floor+0x96>
 800be6a:	a323      	add	r3, pc, #140	@ (adr r3, 800bef8 <floor+0xe8>)
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	f7f4 fb02 	bl	8000478 <__adddf3>
 800be74:	2200      	movs	r2, #0
 800be76:	2300      	movs	r3, #0
 800be78:	f7f4 fd32 	bl	80008e0 <__aeabi_dcmpgt>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d0eb      	beq.n	800be58 <floor+0x48>
 800be80:	2c00      	cmp	r4, #0
 800be82:	bfbe      	ittt	lt
 800be84:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800be88:	4133      	asrlt	r3, r6
 800be8a:	18e4      	addlt	r4, r4, r3
 800be8c:	ea24 0407 	bic.w	r4, r4, r7
 800be90:	2500      	movs	r5, #0
 800be92:	e7e1      	b.n	800be58 <floor+0x48>
 800be94:	2e33      	cmp	r6, #51	@ 0x33
 800be96:	dd0a      	ble.n	800beae <floor+0x9e>
 800be98:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800be9c:	d103      	bne.n	800bea6 <floor+0x96>
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	f7f4 fae9 	bl	8000478 <__adddf3>
 800bea6:	ec41 0b10 	vmov	d0, r0, r1
 800beaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800beb2:	f04f 37ff 	mov.w	r7, #4294967295
 800beb6:	40df      	lsrs	r7, r3
 800beb8:	4207      	tst	r7, r0
 800beba:	d0f4      	beq.n	800bea6 <floor+0x96>
 800bebc:	a30e      	add	r3, pc, #56	@ (adr r3, 800bef8 <floor+0xe8>)
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	f7f4 fad9 	bl	8000478 <__adddf3>
 800bec6:	2200      	movs	r2, #0
 800bec8:	2300      	movs	r3, #0
 800beca:	f7f4 fd09 	bl	80008e0 <__aeabi_dcmpgt>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d0c2      	beq.n	800be58 <floor+0x48>
 800bed2:	2c00      	cmp	r4, #0
 800bed4:	da0a      	bge.n	800beec <floor+0xdc>
 800bed6:	2e14      	cmp	r6, #20
 800bed8:	d101      	bne.n	800bede <floor+0xce>
 800beda:	3401      	adds	r4, #1
 800bedc:	e006      	b.n	800beec <floor+0xdc>
 800bede:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bee2:	2301      	movs	r3, #1
 800bee4:	40b3      	lsls	r3, r6
 800bee6:	441d      	add	r5, r3
 800bee8:	4545      	cmp	r5, r8
 800beea:	d3f6      	bcc.n	800beda <floor+0xca>
 800beec:	ea25 0507 	bic.w	r5, r5, r7
 800bef0:	e7b2      	b.n	800be58 <floor+0x48>
 800bef2:	2500      	movs	r5, #0
 800bef4:	462c      	mov	r4, r5
 800bef6:	e7af      	b.n	800be58 <floor+0x48>
 800bef8:	8800759c 	.word	0x8800759c
 800befc:	7e37e43c 	.word	0x7e37e43c
 800bf00:	bff00000 	.word	0xbff00000
 800bf04:	000fffff 	.word	0x000fffff

0800bf08 <floorf>:
 800bf08:	ee10 3a10 	vmov	r3, s0
 800bf0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bf10:	3a7f      	subs	r2, #127	@ 0x7f
 800bf12:	2a16      	cmp	r2, #22
 800bf14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bf18:	dc2b      	bgt.n	800bf72 <floorf+0x6a>
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	da12      	bge.n	800bf44 <floorf+0x3c>
 800bf1e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bf84 <floorf+0x7c>
 800bf22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bf26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2e:	dd06      	ble.n	800bf3e <floorf+0x36>
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	da24      	bge.n	800bf7e <floorf+0x76>
 800bf34:	2900      	cmp	r1, #0
 800bf36:	4b14      	ldr	r3, [pc, #80]	@ (800bf88 <floorf+0x80>)
 800bf38:	bf08      	it	eq
 800bf3a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bf3e:	ee00 3a10 	vmov	s0, r3
 800bf42:	4770      	bx	lr
 800bf44:	4911      	ldr	r1, [pc, #68]	@ (800bf8c <floorf+0x84>)
 800bf46:	4111      	asrs	r1, r2
 800bf48:	420b      	tst	r3, r1
 800bf4a:	d0fa      	beq.n	800bf42 <floorf+0x3a>
 800bf4c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bf84 <floorf+0x7c>
 800bf50:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bf54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf5c:	ddef      	ble.n	800bf3e <floorf+0x36>
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	bfbe      	ittt	lt
 800bf62:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bf66:	fa40 f202 	asrlt.w	r2, r0, r2
 800bf6a:	189b      	addlt	r3, r3, r2
 800bf6c:	ea23 0301 	bic.w	r3, r3, r1
 800bf70:	e7e5      	b.n	800bf3e <floorf+0x36>
 800bf72:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bf76:	d3e4      	bcc.n	800bf42 <floorf+0x3a>
 800bf78:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bf7c:	4770      	bx	lr
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e7dd      	b.n	800bf3e <floorf+0x36>
 800bf82:	bf00      	nop
 800bf84:	7149f2ca 	.word	0x7149f2ca
 800bf88:	bf800000 	.word	0xbf800000
 800bf8c:	007fffff 	.word	0x007fffff

0800bf90 <_init>:
 800bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf92:	bf00      	nop
 800bf94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf96:	bc08      	pop	{r3}
 800bf98:	469e      	mov	lr, r3
 800bf9a:	4770      	bx	lr

0800bf9c <_fini>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	bf00      	nop
 800bfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa2:	bc08      	pop	{r3}
 800bfa4:	469e      	mov	lr, r3
 800bfa6:	4770      	bx	lr
